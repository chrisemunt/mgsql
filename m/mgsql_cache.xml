<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="26" zv="Cache for Windows (x86-64) 2019.1 (Build 192) Sun Nov 18 2018 23:37:14 EST" ts="2019-11-28 09:30:17">
<Routine name="%mgsql" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsql ;(CM) MGSQL Front end
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers("%mgsql") q
 ; 
v() ; version and date
 n v,r,d
 ;s v="1.0",r=1,d="1 December 2018"
 ;s v="1.0",r=2,d="26 March 2019"
 ;s v="1.0",r=3,d="10 May 2019"
 ;s v="1.0",r=4,d="11 May 2019"
 ;s v="1.0",r=5,d="14 May 2019"
 ;s v="1.0",r=6,d="7 June 2019"
 ;s v="1.0",r=7,d="13 June 2019"
 s v="1.0",r=8,d="1 November 2019"
 q v_"."_r_"."_d
 ;
vers(this) ; version information
 n v
 s v=$$v()
 w !,"MGSQL by M/Gateway Developments Ltd."
 w !,"Version: "_$P(v,".",1,2)_"; Revision "_$P(v,".",3)_" ("_$P(v,".",4)_")"_" "_this
 w !
 Q
 ;
exec(dbid,sql,%zi,%zo)
 n (dbid,sql,%zi,%zo)
 ;k ^mgsqlx,^mgtmp
 s $zt="exece^%mgsql" ; new $ztrap set $ztrap="zgoto "_$zlevel_":exece^%mgsql"
 s error=""
 s dbid=$$schema(dbid)
 s line(1)=sql
 s rou=$$main^%mgsqlx(dbid,.line,.info,.error)
 i error'="" s %zo("error")=error q -1
 i $d(info("sp")) d  g exec1
 . s ok=-1
 . s %zo("routine")=rou
 . s rc=$$so^%mgsqlz()
 . s @("ok=$$"_rou_"(.%zi,.%zo)")
 . s rc=$$sc^%mgsqlz()
 . q
 s ok=-1 i rou'="" s %zo("routine")=rou,@("ok=$$exec^"_rou_"(.%zi,.%zo)")
exec1 ; exit
 q ok
 ;
exece ; error
 w !!,"error=",$$error^%mgsqls()
 q -1
 ;
inetd ; entry point from [x]inetd
xinetd ; someone is sure to use this label
 s $zt="inetde^%mgsql" ; new $ztrap set $ztrap="zgoto "_$zlevel_":inetde^%mgsql"
 s buf="" f  r *x q:x=10  s buf=buf_$c(x)
 i buf="xDBC" d main^%mgsqln q
 i buf?1U.E1"HTTP/"1N1"."1N1C s buf=buf_$c(10) d main^%mgsqlw q
 q
inetde ; error
 w $$error^%mgsqls()
 q
 ;
schema(schema) ; schema
 i schema="" q "mgsql"
 q schema
 ;
start(port) ; Start daemon
 s $zt="starte^%mgsql" ; new $ztrap set $ztrap="zgoto "_$zlevel_":starte^%mgsql"
 s port=+$g(port)
 ; +not_ydb
 j accept^%mgsqln($g(port)) q
 ; -not_ydb
 ; +ydb
 ; w !,"Not supported, use inetd or xinetd instead"
 ; -ydb
 q
starte ; Error
 w $ze
 q
 ;
killproc(pid) ; Stop this listener
 i '$l(pid) q
 w !,"stop: "_pid
 ; +not_ydb
 i $$isidb^%mgsqls() s x=$SYSTEM.Process.Terminate(pid,0)
 ; -not_ydb
 q
 ;
ylink ; link all routines
 ;;zlink "_mgsql.m"
 zlink "_mgsqlc.m"
 zlink "_mgsqlc1.m"
 zlink "_mgsqlc2.m"
 zlink "_mgsqlc3.m"
 zlink "_mgsqlc4.m"
 zlink "_mgsqlc5.m"
 zlink "_mgsqlc6.m"
 zlink "_mgsqlcd.m"
 zlink "_mgsqlci.m"
 zlink "_mgsqlct.m"
 zlink "_mgsqlcu.m"
 zlink "_mgsqld.m"
 zlink "_mgsqle.m"
 zlink "_mgsqle1.m"
 zlink "_mgsqle2.m"
 zlink "_mgsqln.m"
 zlink "_mgsqln1.m"
 zlink "_mgsqln2.m"
 zlink "_mgsqlo.m"
 zlink "_mgsqlo1.m"
 zlink "_mgsqlo2.m"
 zlink "_mgsqlp.m"
 zlink "_mgsqlp1.m"
 zlink "_mgsqlr.m"
 zlink "_mgsqls.m"
 zlink "_mgsqlv.m"
 zlink "_mgsqlv1.m"
 zlink "_mgsqlv2.m"
 zlink "_mgsqlv3.m"
 zlink "_mgsqlv4.m"
 zlink "_mgsqlv5.m"
 zlink "_mgsqlv6.m"
 zlink "_mgsqlw.m"
 zlink "_mgsqlx.m"
 zlink "_mgsqlz.m"
 q
 ;
 ;
 ; SQL samples
 ;
drop ; drop tables
 k %zi,%zo
 s ok=$$exec^%mgsql("","drop table patient",.%zi,.%zo)
 s ok=$$exec^%mgsql("","drop table admission",.%zi,.%zo)
 q
 ;
create ; create tables
 k %zi,%zo
 s sql="create table patient ("
 s sql=sql_" num int not null,"
 s sql=sql_" name varchar(255),"
 s sql=sql_" address varchar(255),"
 s sql=sql_" constraint pk_patient primary key (num))"
 s sql=sql_" /*! global=mgpat, delimiter=# */"
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 ;
 s sql="create table admission ("
 s sql=sql_" num int not null,"
 s sql=sql_" dadm date not null,"
 s sql=sql_" ward varchar(32),"
 s sql=sql_" con varchar(32),"
 s sql=sql_" constraint pk_admission primary key ('p', num, dadm))"
 s sql=sql_" /*! global=mgadm, delimiter=# */"
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
index ; create index
 k %zi,%zo
 s sql="create index x1 on admission ('x1', dadm, num)"
 s sql=sql_" /*! global=mgadm */"
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
delete ; delete records
 k %zi,%zo
 s ok=$$exec^%mgsql("","delete from patient",.%zi,.%zo)
 s ok=$$exec^%mgsql("","delete from admission",.%zi,.%zo)
 q
 ;
insert ; insert records
 k %zi,%zo
 s sql="insert into patient (num, name, address) values (:num, :name, :address)"
 s %zi("num")=1,%zi("name")="Chris Munt",%zi("address")="Banstead",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=2,%zi("name")="Rob Tweed",%zi("address")="Redhill",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=3,%zi("name")="John Smith",%zi("address")="London",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=4,%zi("name")="Jane Doe",%zi("address")="Oxford",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 ;
 k %zi,%zo
 s sql="insert into admission (num, dadm, ward, con) values (:num, {d:dadm}, :ward, :con)"
 s %zi("num")=1,%zi("dadm")="2012-02-20",%zi("ward")="B1",%zi("con")="IES",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=1,%zi("dadm")="2012-03-21",%zi("ward")="B3",%zi("con")="JM",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=1,%zi("dadm")="2015-01-17",%zi("ward")="B1",%zi("con")="TJP",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=1,%zi("dadm")="2016-01-01",%zi("ward")="B1",%zi("con")="IES",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=2,%zi("dadm")="2018-02-20",%zi("ward")="C1",%zi("con")="EW",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=3,%zi("dadm")="2018-04-21",%zi("ward")="D2",%zi("con")="RS",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=2,%zi("dadm")="2018-11-10",%zi("ward")="C3",%zi("con")="RP",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
update ; update a record
 k %zi,%zo
 s ok=$$exec^%mgsql("","update patient a set a.address = 'Cambridge' where a.num = 4",.%zi,.%zo)
 q
 ;
sel1 ; select all patient records
 k %zi,%zo
 s ok=$$exec^%mgsql("","select * from patient",.%zi,.%zo)
 q
 ;
sel2 ; select all admitted patients and their admission records (joining the tables using a 'where' statement)
 k %zi,%zo
 s ok=$$exec^%mgsql("","select a.num,a.name,b.dadm,b.ward,b.con from patient a, admission b where a.num = b.num",.%zi,.%zo)
 q
 ;
sel3 ; select all admitted patients and their admission records (using an 'inner join' construct)
 k %zi,%zo
 s ok=$$exec^%mgsql("","select a.num,a.name,b.dadm,b.ward,b.con from patient a inner join admission b using (num)",.%zi,.%zo)
 q
 ;
sel4 ; select all patients and any associated admission records (using an 'outer join' construct)
 k %zi,%zo
 s ok=$$exec^%mgsql("","select a.num,a.name,b.dadm,b.ward,b.con from patient a left join admission b using (num)",.%zi,.%zo)
 q
 ;
sel5 ; select all patients who have been admitted more that 3 times
 k %zi,%zo
 s sql="select a.num,a.name,b.dadm,b.ward,b.con from patient a, admission b"
 s sql=sql_" where a.num = b.num and 3 < select count(c.dadm) from admission c where c.num = a.num"
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel6 ; count the number of times admitted patients have been admitted
 k %zi,%zo
 s sql="select a.num,a.name,count(b.dadm) from patient a, admission b"
 s sql=sql_" where a.num = b.num"
 s sql=sql_" group by a.num,a.name"
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel7 ; select all patients who have been admitted more that 3 times
 k %zi,%zo
 s sql="select a.num,a.name,count(*) from patient a, admission b"
 s sql=sql_" where a.num = b.num"
 s sql=sql_" group by a.num,a.name"
 s sql=sql_" having count(*) > 3"
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel8 ; select all patient records but just show each patient's surname
 k %zi,%zo
 s ok=$$exec^%mgsql("","select a.num,$p(a.name,"" "",2) from patient a",.%zi,.%zo)
 q
 ;
sel9 ; select all patients and any associated admission records, but only those for ward 'B3'
 k %zi,%zo
 s ok=$$exec^%mgsql("","select a.num,a.name,b.num,b.dadm,b.ward from patient a left join admission b on a.num = b.num and b.ward = 'B3'")
 q
 ;
proc ; create stored procedures
 s ok=$$exec^%mgsql("","CREATE PROCEDURE patient_getdata (num int, name varchar(255), address varchar(255))",.%zi,.%zo)
 s ok=$$exec^%mgsql("","CREATE PROCEDURE SelectAllPatients AS SELECT * FROM patient GO;",.%zi,.%zo)
 q
 ;
]]></Routine>


<Routine name="%mgsqlc" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlc ;(CM) sql compiler - main driver ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc") q
 ;
main ; start
 d init i $d(update) s unique(1)=0
 i '$d(sql(0,1)) g exit
 s grp=2
 i $p(sql(0,1)," ",1)="insert",'$d(sql(1,1)) d main^%mgsqlci g main1
 i $p(sql(0,1)," ",1)="delete",'$d(sql(1,1)) d hilev^%mgsqlcd g main1
 s grp=5
 f count=1:1 s qnum=$p(comord,"~",count) q:qnum=""  d subq^%mgsqlc1 i $l(error) q
 i $l(error) g exit
 s grp=3,qnum=1
 d strtq
 d endq
 s grp=5
main1 ; second phase
 d query
 s grp=1
 d begin
 d sort
 d idx
 m ^mgtmp($j,"from")=from
 m ^mgtmp($j,"update")=update
exit ; exit
 k att,comdel,comord,cond,count,line,done,f,tnum,tname,from,i,ii,j,l,lcom,lvar,n,pvar,qnum,rec,sdel,sel,select,sqfun,v,vsub,x,y,z,sqin,seq,reset,endsq
 q
 ;
addend ; add line of code for end of query
 s endcode(el)=line,line="",el=el+1
 q
 ;
init ; initialise system for stand-alone or integrated sql
 k tag
 s ktmp=0
 s line="",vsub=0,invs=0,tsub=0
 d tagout
 q
 ;
tagout ; determine exit line tag (null for fall-through)
 s tagout=%z("dl")_%z("pt")_"x"_%z("dl")
 q
 ;
begin ; code to be executed at start of query
 k %d,%t s %to="",%do=""
 s line=rou_" ; SQL "_qid_"; "_$$ddate^%mgsqls($h,2)_"; "_$$dtime^%mgsqls($h)_"; "_$h d addline(grp,.line)
 s line=" ;" d addline(grp,.line)
 s line="cols(%zo) ; columns" d addline(grp,.line)
 f i=1:1 q:'$d(^mgtmp($j,"outsel",1,i))  s var=$g(^(i)) d
 . i var[%z("dsv") s var=$p(var,%z("dsv"),2)
 . s alias=$p(var,".",1),cname=$p(var,".",2)
 . i alias'="" s tno=$g(^mgtmp($j,"from","x",1,alias)) i tno'="" s tname=$p($g(^mgtmp($j,"from",1,tno)),"~",1)
 . s line=" s %zo(0,"_i_")="""_var_""""_",%zo(0,"_i_",0)="""_$$dtype^%mgsqld(dbid,tname,cname)_"""" d addline(grp,.line)
 . q
 s line=" q 0" d addline(grp,.line)
 s line=" ;" d addline(grp,.line)
 s line="exec(%zi,%zo) ; main entry point" d addline(grp,.line)
 s line=line_%z("pv")
 f i=1:1:vsub s line=line_","_%z("pv")_i
 i invs f i=1:1:invs s line=line_","_"iv"_i
 s line=" n "_line d addline(grp,.line)
 i ktmp s line=" k "_%z("ctg")_"("_%z("cts")_")"
 s lvar="" f  s lvar=$o(^mgtmp($j,"in",lvar)) q:lvar=""  d subvar3 s r=$g(^mgtmp($j,"in",lvar)) d
 . s pvar=$p(r,"~",1)
 . s line=" i '$d(%zi("""_lvar_""")) s %zo(""error"")=""<ERROR>input '"_lvar_"' not supplied"" q -1" d addline(grp,.line)
 . s line=" s "_pvar_"=$g(%zi("""_lvar_"""))" d addline(grp,.line)
 . q
 s line=" s "_%z("vok")_"=$$cols(.%zo)" d addline(grp,.line)
 s line=" s "_%z("vok")_"=$$so^%mgsqlz(.%zi,.%zo)" d addline(grp,.line)
 d trx
 i $d(sql("union",1)) d union
 i $d(sql("txp",0)) d txp
 q
 ;
txp ; transaction processing
 f cmnd="commit","rollback","start" d txp1
 q
 ;
txp1 ; transaction process
 i '$d(sql("txp",0,cmnd)) q
 s nam=sql("txp",0,cmnd) i nam="" s nam=""""""
 i nam?1":"1a.e s nam=del_$p(nam,":",2,999)_del
 s line=" s %txp(2)="_nam_" d txp"_$e(cmnd)_"^%"_$c(72,88)_"lnk" d addline(grp,.line)
 q
 ;
union ; reserve variables for union in uvar
 n %noinc,qnum s %noinc=1
 s qnum="" f  s qnum=$o(sql("union",qnum)) q:qnum=""  f i=1:1:outsel s uvar=$p(^mgtmp($j,"sel",qnum,i),%z("dsv"),2) d union1
 k uvarx
 q
 ;
union1 ; assign union variable by position
 i uvar="" q
 d union2
 i '$d(uvarx(i)) s lvar="\\cmu"_i d subvar1^%mgsqlc s uvarx(i)=pvar
 s pvar=uvarx(i)
 i $l(pvaru) s uvar(0,qnum,pvar)=pvaru
 i $d(uvar(uvar)) s uvar(0,qnum,pvar)=uvar(uvar) q
 s uvar(uvar)=pvar
 s uvar=$p($p(uvar,")",1),"(",2) i uvar="" q
 d union2
 i '$d(uvarx(i,1)) s lvar="\\\cmu"_i d subvar1^%mgsqlc s uvarx(i,1)=pvar
 s pvar=uvarx(i,1)
 i $l(pvaru) s uvar(0,qnum,pvar)=pvaru
 i $d(uvar(uvar)) s uvar(0,qnum,pvar)=uvar(uvar) q
 s uvar(uvar)=pvar
 q
 ;
union2 ; check for pre-assigned variable from declare
 n lvar,pvar
 s lvar=uvar
 d subvaru^%mgsqlc
 s pvaru=pvar
 q
 ;
strtq ; code to be executed at start of query
 n lab
 s ok=0 f i=1:1 q:'$d(^mgtmp($j,"from",i))!ok  f ii=1:1 q:'$d(^mgtmp($j,"from",i,ii))  i $p(^mgtmp($j,"from",i,ii),"~",1)["(" s ok=1 q
 i ok s line=" i '$d(%iv(""uci"")) s %iv(""uci"")=""""" d addline(grp,.line)
 i $d(create("index")) d klind^%mgsqlc5
 s line=" s "_%z("vrc")_"=0" d addline(grp,.line)
 s line=" s "_%z("vn")_"=0,"_%z("vnx")_"=0" d addline(grp,.line)
 i $d(ord) s line=" s "_%z("pv")_"n=0" d addline(grp,.line)
 s line="",com=""
 f i=1:1:$l(comord,"~") s x=$p(comord,"~",i) i x'=1,x'="",'$d(corel("x",x)),'$d(sql("union",x)) s line=line_com_%z("dl")_%z("pt")_x_"s"_%z("dl"),com=","
 i line'="" s line=" d "_line d addline(grp,.line)
 q
 ;
trx ; evaluate constants
 n wrd,i,ii,arg,pre,post
 s wrd="" f  s wrd=$o(^mgtmp($j,"trx",wrd)) q:wrd=""  d
 . f i=1:1 s chr=$e(wrd,i) i chr=":"!(chr?1"""")!(chr?1n)!(chr="") q
 . f ii=$l(wrd):-1:1 s chr=$e(wrd,ii) i chr?1""""!(chr?1an)!(chr="") q
 . s arg=$e(wrd,i,ii),pre=$e(wrd,1,i-1),post=$e(wrd,ii+1,9999)
 . i arg?1":"1a.e s arg=%z("dev")_$e(arg,2,999)_%z("dev")
 . s line=" s "_%z("dsv")_wrd_%z("dsv")_"="_"$$edate^%mgsqls("_arg_",1)" d addline(grp,.line)
 q
 ;
endq ; code to be executed at end of query
 s tags1=0 s line=" g "_%z("dl")_%z("pt")_"1s",tags1=1 d addline(grp,.line)
 i 'tags1,$d(^mgtmp($j,"s",1)) s x=^mgtmp($j,"s",1),y=$p(x,"~",2),x=$p(x,"~",1) k @(code_",x,y)")
 k endcode s el=1
endq1 ; kill sql variables and exit query
 ;s (line,com)=""
 ;s line=line_com_%z("pv"),com=","
 i ktmp s line=" k "_%z("ctg")_"("_%z("cts")_")"
 ;f i=1:1:vsub s line=line_com_%z("pv")_i,com="," i $l(line)>240 s line=" k "_line d addend s line="",com=""
 ;i invs f i=1:1:invs s line=line_com_"iv"_i,com=","
 ;i $l(line) s line=" k "_line d addend
 ; stand-alone sql
 s line=" s "_%z("vok")_"=$$sc^%mgsqlz(.%zi,.%zo)" d addend
 s line=" q "_%z("vok") d addend
 s endcode(1)=%z("dl")_%z("pt")_"x"_%z("dl")_endcode(1)
 f el=1:1 q:'$d(endcode(el))  s line=endcode(el) d addline(grp,.line)
 q
 ;
uniout ; output unique result
 q
 s rec="",rdel="",test=1 f i=1:1:outsel q:'$d(^mgtmp($j,"sel",1,i))  s x=^(i),rec=rec_rdel_x,rdel="_"_$c(34)_"~"_$c(34)_"_"
 s %data=1,ptag=tagout d line^%mgsqlc3
 k test
 q
 ;
query ; insert query (text) and variable substitution into routine
 i $d(sql(1,1)) g query1
 s line=%z("dl")_%z("pt")_"x"_%z("dl")
 s line=line_" s "_%z("vok")_"=$$sc^%mgsqlz(.%zi,.%zo)" d addline(grp,.line)
 s line=line_" q "_%z("vok") d addline(grp,.line)
query1 s line=" ;" d addline(grp,.line) s line="query ;" d addline(grp,.line)
 f i=1:1 q:'$d(^mgsqlx(1,dbid,qid,"sql",i))  s line=" ; "_^(i) d addline(grp,.line)
 s line="var ;" d addline(grp,.line)
 s x="" f  s x=$o(vsub(x)) q:x=""  s v(vsub(x))=x
 f i=1:1 q:'$d(v(i))  s line=" ;    "_%z("pv")_i_" = "_v(i) d addline(grp,.line)
 q
 ;
idx ; index data
 n r
 f qnum=1:1 q:'$d(^mgtmp($j,"from",qnum))  f tnum=1:1 q:'$d(^mgtmp($j,"from",qnum,tnum))  d
 . n tname,alias,sqcname,sqcname1,cname,sel
 . s tname=$p(^mgtmp($j,"from",qnum,tnum),"~",1),alias=$p(^mgtmp($j,"from",qnum,tnum),"~",2)
 . s r=$s($d(^mgtmp($j,"sqlupd",tname)):^(tname),1:"~"),$p(r,"~",1)="r" i '($p(r,"~",2)) s $p(r,"~",2)=0
 . s sqcname="" f  s sqcname=$o(^mgtmp($j,"get",sqcname)) q:sqcname=""  d
 . . i $p(sqcname,".",1)'=alias q
 . . s cname=$p(sqcname,".",2) i cname="" q
 . . s sel=0 i qnum=1 f i=1:1 q:'$d(^mgtmp($j,"outsel",qnum,i))  s sqcname1=$p($g(^(i)),%z("dsv"),2) i sqcname1=sqcname s sel=1 q
 . . s ^mgtmp($j,"sqlupd",tname,cname)=sel
 . . q
 . s ^mgtmp($j,"sqlupd",tname)=r
 . q
 i $d(update("insert")) d
 . n tname,alias,sqcname,sqcname1,cname,sel,i
 . s tname=$g(update("insert")) i tname="" q
 . s r=$g(^mgtmp($j,"sqlupd",tname))
 . i r="" s r="~1"
 . s $p(r,"~",1)="i"
 . s cname="" f  s cname=$o(update("attx",cname)) q:cname=""  s ^mgtmp($j,"sqlupd",tname,cname)=0
 . f i=1:1 q:'$d(update("att",i))  s cname=$g(update("att",i)) q:cname=""  s ^mgtmp($j,"sqlupd",tname,cname)=0
 . s ^mgtmp($j,"sqlupd",tname)=r
 . q
 i $d(update("delete")) d
 . n tname,alias,sqcname,cname
 . s tname=$p($g(update("delete"))," ",1) i tname="" q
 . s alias=$p($g(update("delete"))," ",2) i alias="" s alias=tname q
 . s sqcname="" f  s sqcname=$o(^mgtmp($j,"get",sqcname)) q:sqcname=""  d
 . . i $p(sqcname,".",1)'=alias q
 . . s cname=$p(sqcname,".",2) i cname="" q
 . . s sel=1
 . . s ^mgtmp($j,"sqlupd",tname,cname)=sel
 . . q
 . s r=$g(^mgtmp($j,"sqlupd",tname))
 . s $p(r,"~",1)="d"
 . s ^mgtmp($j,"sqlupd",tname)=r
 . q
 i $d(update("update")) d
 . n tname
 . s tname=$p($g(update("update"))," ",1) i tname="" q
 . s r=$g(^mgtmp($j,"sqlupd",tname))
 . s $p(r,"~",1)="u"
 . s ^mgtmp($j,"sqlupd",tname)=r
 . q
 q
 ;
addline(grp,line) ; add line of code to routine
 n ln,lnr
 s lnr=$i(@(%z("ccoder")_",grp)")),@(%z("ccoder")_",grp,lnr)")=line
 i line[%z("dsv")!(line[%z("dev")) d subvar
 i line[%z("dl") d subtag
 i line?1" s ".e,$p(line,"=",2)=$p($p(line," s ",2),"=",1) s line="" q
 i line?1" set ".e,$p(line,"=",2)=$p($p(line," set ",2),"=",1) s line="" q
 s line=$$rstring^%mgsqlp(line)
 i line="" q
 s ln=$i(@(%z("ccode")_",grp)"))
 s @(%z("ccode")_",grp,ln)")=line,line=""
 q
 ;
subvar ; substitute physical variables for logical variables
 n lvar,pvar,x
 f  s lvar=$p(line,%z("dsv"),2) q:'$l(lvar)  d subvar1 s line=$p(line,%z("dsv"),1)_pvar_$p(line,%z("dsv"),3,999)
 i line'[%z("dev") q
 s pn=2 f  s lvar=$p(line,%z("dev"),pn) q:'$l(lvar)  d subvar3 s:pvar="" pn=pn+2 i $l(pvar) s line=$p(line,%z("dev"),1,pn-1)_pvar_$p(line,%z("dev"),pn+1,999)
 q
 ;
subvar1 ; physical variable
 ;i lvar?1"___v".n d subvar4
 d subvar2 i ok q
 i $d(uvar(lvar)) s pvar=uvar(lvar) q
 i '$d(vsub(lvar)) s vsub=vsub+1,vsub(lvar)=vsub
subvaru ; entry point for pre-assigned variables in union
 i '$d(vsub(lvar)) s pvar="" q
 s pvar=%z("pv")_vsub(lvar)
 q
 ;
subvar2 ; determine if select variable interface can be eliminated
 s ok=0
 i $d(^mgtmp($j,"trans",lvar)) s pvar=^(lvar),ok=1 q
 q
 ;
subvar3 ; physical variable for manual input of constant
 s pvar=""
 s r=$g(^mgtmp($j,"in",lvar))
 s pvar=$p(r,"~",1) i pvar'="" q
 s invs=$i(^mgtmp($j,"in"))
 s pvar="iv"_invs
 s $p(r,"~",1)=pvar,^mgtmp($j,"in",lvar)=r
 q
 ;
subvar4 ; add expression or function code
 f i=1:1 q:'$d(^mgtmp($j,"e",lvar,i))  s line=^(i) d addline(grp,.line)
 q
 ;
subtag ; substitute physical line label for logical label
 n ltag,ptag,t,c34
 f  q:line'[%z("dl")  s ltag=$p(line,%z("dl"),2) d subtag1 s line=$p(line,%z("dl"),1)_ptag_$p(line,%z("dl"),3,999)
 q
 ;
subtag1 ; physical line label
 n n,t,x
 s t="0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
 s n=$l(t)
 i '$d(tsub(ltag)) s tsub=tsub+1,tsub(ltag)=tsub
 s x=tsub(ltag),ptag=%z("pt")_$e(t,(x-1)\n)_$e(t,((x-1)#n)+1)
 q
 ;
sort ; sort stand-alone sql code into contiguous routine
 s grp="",l=1 f  s grp=$o(@(%z("ccode")_",grp)")) q:grp=""  s ln="" f  s ln=$o(@(%z("ccode")_",grp,ln)")) q:ln=""  s line=^(ln) k ^(ln) s @(%z("ccode")_",l)")=line,l=l+1
 s @(%z("ccode")_")")=l-1
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlc1" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlc1 ; was 2 (CM) sql compiler - parse files ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc1") q
 ;
subq ; compile sub-query data extraction
 k got
 d getf^%mgsqlct i $l(error) q
 d temps
 s nxtun="" i $d(sql("union",qnum)) s nxtun=$o(sql("union",qnum))
 f tnum=1:1 q:'$d(^mgtmp($j,"from",qnum,tnum))  s tname=$p(^mgtmp($j,"from",qnum,tnum),"~",1),alias=$p(^mgtmp($j,"from",qnum,tnum),"~",2) d pass,data^%mgsqlc5 s got("f",alias)="" d corel^%mgsqlc5,kill
 d output^%mgsqlc2
exit ; exit
 q
 ;
dist() ; optimize select distinct
 n done,x,got,ii
 s done=0
 i $g(^mgtmp($j,"sel",qnum))'="distinct" q done
 i $d(^mgtmp($j,"from",qnum,2)) q done
 f ii=1:1:i s x=$p(z,",",i) i x'="" s got(x)=""
 s done=1 f ii=1:1 q:'$d(^mgtmp($j,"sel",qnum,ii))  s x=$g(^(ii)) i x'="",'$d(got(x)) s done=0 q
 i done s ^mgtmp($j,"dontgetdata",qnum,tnum)=1
 q done
 ;
pass ; pass file
 s keyd=","
 s tag=%z("dl")_%z("pt")_qnum_tnum,tags=%z("dl")_%z("pt")_qnum_"s"_%z("dl")
 ; cmtaaa
 ;i $d(^mgtmp($j,"from","z",qnum)) d
 ;. s ^mgtmp($j,"from","z",qnum,"def",tnum)=%z("dsv")_"\#jndef\"_qnum_"\"_tnum_%z("dsv")
 ;. s line=" "_"s"_" "_^mgtmp($j,"from","z",qnum,"def",tnum)_"=0" d addline^%mgsqlc(grp,.line)
 ;. q
 ;
 i tnum=1 k ctag d
 . s line=tags_" ;"
 . s ^mgtmp($j,"s",qnum)=grp_"~"_$s($d(grpm(grp)):grpm(grp),1:1)
 . d addline^%mgsqlc(grp,.line)
 . i $d(^mgtmp($j,"v",qnum)) s line=" s "_%z("dsv")_$g(^(qnum))_"."_"line-no"_%z("dsv")_"=0" d addline^%mgsqlc(grp,.line)
 . d prefun^%mgsqlc6
 . q
 s z=^mgtmp($j,"key",qnum,tnum),zglo=glb(qnum,tnum),zgloz=$s(zglo[%z("dev"):""")",1:"")
 ;;i $d(seq(alias)) d sqseq^%mgsqlc4 i $d(seq(alias,"zcode","pre")) f i=1:1 q:'$d(seq(alias,"zcode","pre",i))  s line=seq(alias,"zcode","pre",i) d addline^%mgsqlc(grp,.line) s seq(alias,"il")=grp_"~"_(grpm(grp)-1)
 d order^%mgsqlc2
 i tnum=1 d endsq s tagx=$s($d(endsq(qnum))&'$d(sql("union",qnum)):%z("dl")_%z("pt")_qnum_"x"_%z("dl"),$l(nxtun):%z("dl")_%z("pt")_nxtun_"s"_%z("dl"),$d(sql("union",1))&($d(gvar(1))!$d(ord)):%z("dl")_%z("pt")_1_"x"_%z("dl"),1:tagout)
 k got("a") f i=1:1:$l(z,keyd) s y=$p(z,keyd,i) i y[%z("dsv") s dir="$o" s:$d(dir(y)) dir=dir(y) d pre^%mgsqlc4 s y=$p($p(z,keyd,i),%z("dsv"),2) i $l(y) s got("a",y)=""
 i qnum=1,tnum=1,$g(^mgtmp($j,"sel",qnum))="distinct" d dist^%mgsqlc2
 s key="",com="",ptagn="",tagn=1 i tnum=1,'$d(tag(qnum)) s tag(qnum)=tagx
 i $d(^mgtmp($j,"from","z",qnum,"pass",alias)) d oj
 s tagxx=tag(qnum)
 k ctag,got("a") f i=1:1:$l(z,keyd) s y=$p(z,keyd,i) d pass1,gota s:$d(ctag) tag(qnum)=ctag i $$dist() q
 i '$d(ctag) s ctag=tagx
 i ctag'=tagx s tag(qnum)=ctag
pass4 ; set start pointer for sequence
 g passx
 ;i '$d(seq(alias,"il")) g passx
 ;n r,grp,grpm,line,x,or
 ;s (x,or)="" f i=1:1:$l(z,keyd) s y=$p(z,keyd,i) i y[%z("dsv") i $d(nopas(y)),'$d(pre(y,"pre",2)) s x=x_or_"'$l("_y_")",or="!"
 ;i $l(x) s x=" "_"g"_":"_x_" "_tagxx
 ;s r=seq(alias,"il"),grp=$p(r,"~",1),grpm(grp)=$p(r,"~",2),line=@(code_",grp,grpm(grp))")_x_" g "_$s(seq(alias,"ivt")[%z("dsv"):tag(qnum),1:seq(alias,"ivt"))
 ;d addline^%mgsqlc(grp,.line)
passx ; clean-up
 k pre,nopas
 q
 ;
pass1 ; set up line(s) of code for this level of subscript
 s key=key_com_y,com=keyd
 i y'[%z("dsv") q
 s dir=$s($d(dir(y)):dir(y),1:"$o") d dir
 s ptag=tag(qnum)
 i $d(sqin(y)),$d(pre(y,"pre","nostrt")),'$d(corel(qnum)) g pass3
 i $d(nopas(y)),'$d(pre(y,"pre",2)) d nopas q
 i $d(seq(alias,"x",y,"pre")) g passeq
 ;
 ; i $d(pre(y,"pre",2)) d passor g pass2 q
 i $d(pre(y,"pre",2)),'$d(seq(alias)) d passor g pass2 q
 ;
 i $d(pre(y,"pre",2)),$d(seq(alias)) d
 . k pre(y,"pre"),nopas(y)
 . s pre(y,"pre",1)=" "_"s"_" "_y_"="""""
 . s pre(y)=1
 . q
 ;
 s line=pre(y,"pre",1) d addline^%mgsqlc(grp,.line)
passeq s ctag=tag_tagn_%z("dl")
 s (reset,comr)="" i qnum=1,unique(qnum),ptag=tagout d reset i $l(reset) s reset=" s "_reset
 s line=ctag_" "_"s"_" "_y_"="_dirf_"("_zglo_"("_key_")"_zgloz_dirp_") "_"i"_" "_y_"="_$c(34)_$c(34)_reset_" "_"g"_" "_ptag d addline^%mgsqlc(grp,.line)
 i $d(seq(alias,"ivt")),seq(alias,"ivt")=y s seq(alias,"ivt")=ctag
 i $d(pre(y,"post",1)) s line=pre(y,"post",1)_" "_"g"_" "_ptag d addline^%mgsqlc(grp,.line)
 i $d(seq(alias,"x",y,"post")) s line=seq(alias,"x",y,"post") i $l(line) s line=line_" "_"g"_" "_tagxx d addline^%mgsqlc(grp,.line)
pass2 s ptagn=tagn,tagn=tagn+1
 q
 ;
pass3 ; generate optimal code for 'in' clause
 s ctag=tag_tagn_%z("dl")
 s line=pre(y,"pre",1) d addline^%mgsqlc(grp,.line)
 s line=ctag_" "_"s"_" "_y_"="_dirf_"("_%z("ctg")_"("_%z("cts")_","_sqin(y)_","_y_")"_dirp_") "_"i"_" "_y_"="""""_" "_"g"_" "_ptag d addline^%mgsqlc(grp,.line)
 s line=" "_"i"_" '"_"$d"_"("_zglo_"("_key_")"_zgloz_") "_"g"_" "_ctag d addline^%mgsqlc(grp,.line)
 g pass2
 ;
passor ; generate code to handle 'or' predicate for subscript
 s lcase="abcdefghijklmnopqrstuvwxyz"
 s orn=0,tagv=%z("pv")_"("_tnum_","_i_")",tagvp=%z("pv")_"("_tnum_","_i_",""p"")",datag=tag_tagn_"x"_%z("dl")
 s ^mgtmp($j,"passor","tagv",tagv)=""
passor1 s orn=orn+1 i '$d(pre(y,"pre",orn)) g passorx
 s pretag=tag_tagn_"or"_orn_%z("dl"),pastag=tag_tagn_"or"_$e(lcase,orn)_%z("dl")
 s nxtag=$s($d(pre(y,"pre",orn+1)):tag_tagn_"or"_(orn+1)_%z("dl"),1:ptag)
 i $d(nopas(y,orn)) g passor2
 ; generate code to pass on subscript
 s line="" i orn>1 s line=pretag_" ;" d addline^%mgsqlc(grp,.line)
 s line=line_pre(y,"pre",orn)_" s "_tagv_"="""_pastag_"""" d addline^%mgsqlc(grp,.line)
 s line=pastag_" s "_y_"="_dirf_"("_zglo_"("_key_")"_zgloz_dirp_") i "_y_"="_$c(34)_$c(34)_" g "_nxtag d addline^%mgsqlc(grp,.line)
 i $d(pre(y,"post",orn)) s line=pre(y,"post",orn)_" g "_nxtag d addline^%mgsqlc(grp,.line)
 i $d(pre(y,"pre",orn+1)) s line=" g "_datag d addline^%mgsqlc(grp,.line)
 g passor1
passor2 ; generate code for definition test on subscript only
 s line="" i orn>1 s line=pretag_" ;" d addline^%mgsqlc(grp,.line)
 s line=line_pre(y,"pre",orn)_","_tagv_"="""_nxtag_"""" d addline^%mgsqlc(grp,.line)
 s line=" i '$l("_y_") g "_nxtag d addline^%mgsqlc(grp,.line)
 s line=" i '$d("_zglo_"("_key_")"_zgloz_") g "_nxtag d addline^%mgsqlc(grp,.line)
 i $d(pre(y,"pre",orn+1)) s line=" g "_datag d addline^%mgsqlc(grp,.line)
 g passor1
passorx s line=datag_" ;" d addline^%mgsqlc(grp,.line)
 s ctag="@"_tagv
 k nxtag,pretag,pastag,datag,lcase,orn,tagv
 q
 ;
nopas ; generate definition test for non-passed subscript(s)
 s (reset,comr)="" i qnum=1,unique(qnum) d reset
 s mxi=i,(lines,coms,linet,or)=""
 f npn=i:1:$l(z,keyd) s y=$p(z,keyd,npn) q:'$d(nopas(y))!$d(pre(y,"pre",2))  s mxi=npn d nopas1
 s def=1 i qnum=1,unique(1)=2,'$l(reset) s def=0
 s def=1 ;i def,$l(z,keyd)>mxi s def=0
 s qual="",goto=1 i qnum=1,unique(1)=2 s lines=lines_coms_%z("vdef")_"=1,%d=""""",reset=reset_comr_%z("vdef")_"=0",qual=%z("vdef")_",",goto=0
 i $l(lines) s lines=" "_"s"_" "_lines
 i $l(linet) s linet=" "_"i"_" "_linet
 i $l(reset) s reset=" "_"s"_" "_reset
 s line=lines s:$l(linet) line=line_linet_reset_$s(goto:" "_"g"_" "_ptag,1:"") i $l(line) d addline^%mgsqlc(grp,.line)
 i def s line=" "_"i"_" "_qual_"'"_"$d"_"("_zglo_"("_$p(z,keyd,1,mxi)_")"_zgloz_")"_reset_$s(goto:" "_"g"_" "_ptag,1:"") d addline^%mgsqlc(grp,.line)
nopasx s i=mxi
 k npn,mxi,coms,and,or,lines,linet
 q
 ;
nopas1 ; build key and null subscript tests
 s sub=y,set=$p(pre(y,"pre",1)," ",3,999),to=$p(set,"=",2,999)
 s trans=0 i '$d(^mgtmp($j,"from",2)),to'["(",to'[")",$l(to,%z("dsv"))'>3,$l(to,%z("dev"))'>3,'$d(^mgtmp($j,"outselx",1,y)),'$d(^mgtmp($j,"from","z",qnum,"pass",alias)) s trans=1,(sub,^mgtmp($j,"trans",$p(y,%z("dsv"),2)))=to
 i npn>i s key=key_com_sub
 i 'trans s lines=lines_coms_set,coms=","
 i to'[%z("dsv"),to'[%z("dev"),to?1""""1e.e1""""!(to?1n.n)!(to[%z("ds")) q
 s linet=linet_or_"'$l("_sub_")",or="!"
 q
 ;
reset ; check for need to reset unique key outputs on failure
 n %noinc,line,lvar,pvar
 s %noinc=1
 s outsel=$g(^mgtmp($j,"sel",qnum))
 f j=1:1:outsel s x1=^mgtmp($j,"sel",qnum,j) d reset1
 i $l(reset) s line=reset d subvar^%mgsqlc s reset="("_line_")="""""
 k j,x1
 q
 ;
reset1 ; determine whether data item needs to be reset
 n tnum,alias
 i x1["("!(x1'[%z("dsv")) q
 s xx1=$p(x1,%z("dsv"),2),alias=$p(xx1,".",1) i alias="" q
 s tnum=^mgtmp($j,"from","x",qnum,alias)
 i $d(data(qnum,tnum,xx1)),^mgtmp($j,"key",qnum,tnum)'[x1 q
 s reset=reset_comr_x1,comr=","
 q
 ;
endsq ; determine whether an end-of-subquery subroutine needed
 k endsq(qnum)
 i qnum'=1,$d(sql("union",qnum)) q
 i qnum'=1 s endsq(qnum)="" q
 s endsq(qnum)="" q
 i $d(gvar(qnum))!$d(ord) s endsq(qnum)="" q
 q
 ;
dir ; determine physical parse direction parameters
 i dir="$o" s dirf=dir,dirp="" q
 ;i dir="$zp" s dirf=dir,dirp="" q
 i dir="$zp" s dirf="$o",dirp=",-1" q
 q
 ;
oj ; outer join
 n i,taga,tagz,cname,kno
 s ojcnt=%z("dsv")_"\#oj\"_qnum_"\"_tnum_%z("dsv"),ojcnt(0)=1,ojcnt(1)=%z("dsv")_"\#ojcnt\"_qnum_"\"_tnum_%z("dsv")
 s ojtagbp=tag_"\ojbp"_%z("dl"),ojtagxx=tag_"\ojxx"_%z("dl"),ojtagbxx=tag_"\ojbxx"_%z("dl"),ojtagpxx=tag(qnum)
 s taga=tag_"\oja"_%z("dl"),tagz=tag_"\ojz"_%z("dl")
 s line=" "_"s"_" "_ojcnt_"=0"_","_ojcnt(1)_"=1"_" "_"g"_" "_tagz d addline^%mgsqlc(grp,.line)
 s line=taga_" "_"i"_" "_ojcnt_">0 "_"g"_" "_tag(qnum) d addline^%mgsqlc(grp,.line)
 s tag(qnum)=taga
 s line=" "_"s"_" "_ojcnt(1)_"=0" d addline^%mgsqlc(grp,.line)
 s kno=0 f i=1:1:$l(key0(qnum,tnum)) s cname=$p(key0(qnum,tnum),",",i) i cname[%z("dsv") s kno=kno+1,line=" "_"s"_" "_cname_"=""""" d addline^%mgsqlc(grp,.line) i kno=1 s ojkey1=cname
 s cname="" f  s cname=$o(data(qnum,tnum,cname)) q:cname=""  s line=" "_"s"_" "_%z("dsv")_cname_%z("dsv")_"=""""" d addline^%mgsqlc(grp,.line)
 s line=" "_"g"_" "_ojtagbp d addline^%mgsqlc(grp,.line)
 s line=tagz_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;
ojda ; process at end of parse, before get data
 s line=" g "_ojtagbxx d addline^%mgsqlc(grp,.line)
 s line=ojtagxx_" "_"g"_":'$l("_ojkey1_") "_ojtagpxx_" "_"g"_" "_tag(qnum) d addline^%mgsqlc(grp,.line)
 s line=ojtagbxx_" ;" d addline^%mgsqlc(grp,.line)
 s tag(qnum)=ojtagxx
 q
 ;
ojdz ; process after data retrieval
 n i,cname,alias,x
 s cname="" f  s cname=$o(joinx(qnum,cname)) q:cname=""  i $d(joinx(qnum,cname,alias)) d ojdz1
 s x="" f  s x=$o(^mgtmp($j,"wher",x)) q:x=""  i (x+0)=qnum,x["gon" d
 . s line="" f i=1:1 q:'$d(^mgtmp($j,"wher",x,i))  s line=line_^mgtmp($j,"wher",x,i)
 . i $l(line) s line=" "_"i"_" '("_line_")"_" g "_tag(qnum) d addline^%mgsqlc(grp,.line)
 . q
 s cname="" f  s cname=$o(^mgtmp($j,"from","z",qnum,"join",cname)) q:cname=""  d
 . k x
 . s alias="" f i=1:1 s alias=$o(^mgtmp($j,"from","z",qnum,"join",cname,alias)) q:alias=""  s x(i)=alias_"."_cname
 . i $d(x(2)) s line=" i "_%z("dsv")_x(1)_%z("dsv")_"'="_%z("dsv")_x(2)_%z("dsv")_" g "_tag(qnum) d addline^%mgsqlc(grp,.line)
 . q
 s line=" "_"s"_" "_ojcnt_"="_ojcnt_"+1" d addline^%mgsqlc(grp,.line)
 s line=ojtagbp_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;
ojdz1 ; perform natural inner join on data
 n ii,join2,alias1,y
 s join2="" f ii=tnum-1:-1:1 s alias1=$p(^mgtmp($j,"from",qnum,ii),"~",2) i $d(joinx(qnum,cname,alias1)) s join2=%z("dsv")_alias1_"."_cname_%z("dsv") q
 i '$l(join2) q
 s y=%z("dsv")_alias_"."_cname_%z("dsv"),line=" "_"i"_" "_y_"'="_join2_" "_"g"_" "_tag(qnum) d addline^%mgsqlc(grp,.line)
 s ^mgtmp($j,"wexcl",qnum,y_"="_join2)="",^(join2_"="_y)=""
 q
 ;
gota ; new attribute available from single-level parse
 n j,y,sqvar
 f j=1:1:i s y=$p(z,keyd,j) i y[%z("dsv") s sqvar=$p(y,%z("dsv"),2) i $l(sqvar) s got("a",sqvar)=""
 d corel^%mgsqlc5
 q
 ;
kill k com,contyp,ct,data(qnum,tnum),tname,glb(qnum,tnum),i,ii,j,^mgtmp($j,"key",qnum,tnum),odel(qnum,tnum),p,r,subc,x,y,typ,postest
 q
 ;
temps ; determine subscripts for order/group sort file
 k order,order2
 s sort2=0 i qnum=1,$d(gvar(qnum)),$d(ord),$l(ord) d temps2
 s order=0
 i qnum=1,'sort2 f i=1:1 q:'$d(ord(i))  s lvar=ord(i),orderx(lvar)="" d temps1
 f i=1:1 q:'$d(gvar(qnum,i))  s lvar=gvar(qnum,i) i '$d(orderx(lvar)) d temps1
 k orderx
 q
 ;
temps1 ; determine pseudo-logical variable
 s order=order+1
 s var="\cm"_order
 s var=%z("dsv")_var_%z("dsv")
 s order(order)=lvar_"~"_var
 q
 ;
temps2 ; determine whether two sorts required
 n gvarx
 f i=1:1 q:'$d(gvar(qnum,i))  s gvarx(gvar(qnum,i))=""
 f i=1:1 q:'$d(ord(i))  i '$d(gvarx(ord(i))) s sort2=1 q
 i 'sort2 q
 s order2=0
 f i=1:1 q:'$d(ord(i))  s lvar=ord(i) d temps3
 q
 ;
temps3 ; determine pseudo-logical variable for second parse
 s order2=order2+1
 s var="\\cm"_order2
 s var=%z("dsv")_var_%z("dsv")
 s order2(order2)=lvar_"~"_var
 q
 ;
 
 
]]></Routine>


<Routine name="%mgsqlc2" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlc2 ; was 3 (CM) sql compiler - sub driver ; 27 apr 2003  12:44 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc2") q
 ;
output ; process output from subquery
 d where
 i $d(%delrec(0)) d delrec
 d outrec
 i qnum'=1,$d(sql("union",qnum)) g exit
 d updfun^%mgsqlc6
 d out
 d endsq^%mgsqlc3
exit ; exit
 q
 ;
where ; set up test data lines on basis of explicit criteria
 s var="" f  s var=$o(^mgtmp($j,"notnull",qnum,var)) q:var=""  s line=" "_"i"_" "_var_"="""" "_"s"_" "_var_"="" """ d addline^%mgsqlc(grp,.line)
 s test=1,line="" k gcont
 s hostes=1
 d sqinc
 f i=1:1 q:'$d(^mgtmp($j,"wher",qnum,i))  s x=^mgtmp($j,"wher",qnum,i) d where1
 k hostes
 s goto=1 i qnum=1,unique(1)=2 s goto=0
 s reset=""
 i '$d(con) s con=0
 i 'con s wexcl="" f  s wexcl=$o(^mgtmp($j,"wexcl",qnum,wexcl)) q:wexcl=""  i $l(line,wexcl)=2 d wexcl
 i $l(line) s line=" "_"i"_" '("_line_")"_reset_$s(goto:" "_"g"_" "_tag(qnum),1:"") d addline^%mgsqlc(grp,.line)
 q
 ;
wexcl ; remove clause from where predicate if possible
 n pre,pst,ok
 s pre=$p(line,wexcl,1),pst=$p(line,wexcl,2)
 i pre?."(",pst?.")" s line="" q
 i $e(pre,$l(pre))'="("!($e(pst)'=")") q
 s pre=$e(pre,1,$l(pre)-1),pst=$e(pst,2,32000)
 s ok=0 i "&"[$e(pre,$l(pre)) s ok=1,pre=$e(pre,1,$l(pre)-1)
 i 'ok,"&"[$e(pst) s ok=1,pst=$e(pst,2,32000)
 i 'ok q
 s line=pre_pst
 q
 ;
where1 ; for each word in predicate
 i ":<:>:'>:'<:]:']:"[(":"_x_":") d trans s x=newx
 s line=line_x ;d subvar^%mgsqlc
 q
 ;
where2 q  ; selected elements need reseting to null for unique query in hos
 n i,x,com
 s com="" f i=1:1:outsel q:'$d(^mgtmp($j,"sel",qnum,i))  s x=^(i) i x'["(" s reset=reset_com_x,com=","
 i $l(reset) s reset=" "_"s"_" ("_reset_")="""""
 q
 ;
trans s newx=x,other=^mgtmp($j,"wher",qnum,i+1) i other="(" q
 s typ="" i $d(typ(other)) s typ=typ(other)
 i typ="" s:other?.1"-".n.1"."1n.n typ="numeric" s:$e(other)=$c(34) typ="string" i typ="" q
 i typ="string" s test=$s(x="<":"']",x=">":"]",1:"") i test'="" s newx=test q
 i typ="numeric"!(typ="float") s test=$s(x="[":">",x="'[":"'>",1:"") i test'="" s newx=test q
 q
 ;
sqinc ; include subqueries into body of parents where predicate
 n i,subq,x,cmnd,relist,l
 s relist=0
 f i=1:1 q:'$d(^mgtmp($j,"wher",qnum,i))  s x=^(i) i x[%z("dq") s subq=$p(x,%z("dq"),2),cmnd=^(i-1) d sqinc1
 i relist s l=0,i="" f  s i=$o(^mgtmp($j,"wher",qnum,i)) q:i=""  s x=^(i) k ^(i) s l=l+1,^(l)=x
 q
 ;
sqinc1 ; include subquery
 n v
 i cmnd="exists" k ^mgtmp($j,"wher",qnum,i),^(i-1) s ^(i-2)="$d("_%z("ctg")_"("_%z("cts")_","_","_subq_"))",relist=1 q
 i cmnd="not exists" k ^mgtmp($j,"wher",qnum,i),^(i-1) s ^(i-2)="'$d("_%z("ctg")_"("_%z("cts")_","_subq_"))",relist=1 q
 i cmnd="in" s v=^mgtmp($j,"wher",qnum,i-2) k ^(i),^(i-1) s ^(i-2)="$d("_%z("ctg")_"("_%z("cts")_","_subq_","_v_"))",relist=1 q
 i cmnd="not in" s v=^mgtmp($j,"wher",qnum,i-2) k ^(i),^(i-1) s ^(i-2)="'$d("_%z("ctg")_"("_%z("cts")_","_subq_","_v_"))",relist=1 q
 i $d(unique(subq)),'unique(subq) s ^mgtmp($j,"wher",qnum,i)="$o("_%z("ctg")_"("_%z("cts")_","_subq_","_""""""_"))" q
 i $d(unique(subq)),unique(subq) s ^mgtmp($j,"wher",qnum,i)=^mgtmp($j,"sel",subq,1) q
 q
 ;
outrec ; set up record for output and test for 'distinct'
 f i=1:1 q:'$d(^mgtmp($j,"sel",qnum,i))  s lvar=$p(^mgtmp($j,"sel",qnum,i),%z("dsv"),2) i $l(lvar) d
 . n i
 . f i=1:1 q:'$d(^mgtmp($j,"e",lvar,i))  s line=^(i) d addline^%mgsqlc(grp,.line)
 . d subvar1^%mgsqlc
 . s lvar=$p($p(lvar,")",1),"(",2) i $l(lvar) d subvar1^%mgsqlc
 . q
 i $d(sql("union",qnum)) s x="" f  s x=$o(uvar(0,qnum,x)) q:x=""  s line=" "_"s"_" "_x_"="_uvar(0,qnum,x) d addline^%mgsqlc(grp,.line)
 i $d(sql("union",qnum)) s ret=%z("pv")_"(""u"")" s line=" "_"s"_" "_ret_"="_$s(tag(qnum)?1"@".e:$e(tag(qnum),2,999),1:""""_tag(qnum)_"""") s tag(qnum)="@"_ret d addline^%mgsqlc(grp,.line)
 i qnum'=1,$d(sql("union",qnum)) s line=" "_"g"_" "_%z("dl")_%z("pt")_"du"_%z("dl") d addline^%mgsqlc(grp,.line)
 i qnum=1,$d(sql("union",1)) s line=%z("dl")_%z("pt")_"du"_%z("dl")_" ;" d addline^%mgsqlc(grp,.line)
 ;
 s rec="",recc="",rdel="",rdelc=""
 f i=1:1 q:'$d(^mgtmp($j,"outsel",qnum,i))  s x=^(i) d outrec2
 i $l($g(ord)) s rec=recc
 i $g(^mgtmp($j,"sel",qnum))'="distinct"!$d(gvar(qnum)) q
 s line=" s "_rec d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("vck")_"="_recc_","_%z("vckcrc")_"="_"$zcrc("_%z("vck")_",7)" d addline^%mgsqlc(grp,.line)
 s line=" i $d("_%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_","_"""x""_"_%z("vck")_")) g "_tag(qnum)
 ; condition for coping with log selects
 s line=" s "_%z("vckcrcdef")_"=0,"_%z("vnx")_"="""" f  s "_%z("vnx")_"=$o("_%z("ctg")_"("_%z("cts")_","_"""d"","_%z("vckcrc")_","_%z("vnx")_")) q:"_%z("vnx")_"=""""  i $g("_%z("ctg")_"("_%z("cts")_",""d"","_%z("vckcrc")_","_%z("vnx")_"))="_%z("vck")_" s "_%z("vckcrcdef")_"=1 q"
 d addline^%mgsqlc(grp,.line)
 s line=" i "_%z("vckcrcdef")_" g "_tag(qnum)
 d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_","_"""x""_"_%z("vck")_")"_"=""""" d addline^%mgsqlc(grp,.line)
 s ktmp=1
 q
 ;
outrec1 ; substitute physical variables
 n line
 s line=rec d subvar^%mgsqlc s rec=line
 q
 ;
outrec2 ; output record
 i x[%z("dsv")&(x["(")&$d(gvar(qnum)) s x=0
 s recc=recc_rdelc_x,rdelc="_"_$c(34)_"~"_$c(34)_"_" d outrec1
 s rec=rec_rdel_"%d("_i_")="_x,rdel=","
 d outrec1
 q
 ;
out ; set up output to intermediate file
 i qnum=1,$d(update("update")) d main^%mgsqlcu q
 i qnum=1,$d(update("delete")) d main^%mgsqlcd q
 i qnum=1,$d(update("insert")) d main^%mgsqlci q
 i qnum=1,$d(create("index")) d crind^%mgsqlc5 q
 i $d(gvar(qnum)) s line=" g "_tag(qnum) d addline^%mgsqlc(grp,.line) q
 i $d(unique(qnum)),$d(term(qnum)) s line=term(qnum)_" g "_$s($d(endsq(qnum)):%z("dl")_%z("pt")_qnum_"x"_%z("dl"),1:tagout) d addline^%mgsqlc(grp,.line)
 i unique(qnum),qnum'=1 s line=" g "_tag(qnum) d addline^%mgsqlc(grp,.line) q
 ;;;i qnum=1,unique(1)=1,'$d(gvar(1)) s line=" g "_tag(qnum) d addline^%mgsqlc(grp,.line) q
 i $d(ord),$l(ord),qnum=1 g out2
 i qnum=1 g out1
 d outsq
 s x="" i $d(^mgtmp($j,"sqcom",qnum)) s x=^(qnum)
 i x="exists"!(x="not exists") s line=" g "_tagx d addline^%mgsqlc(grp,.line) q
 s line=" g "_tag(qnum) d addline^%mgsqlc(grp,.line)
 q
 ;
outsq ; output from inner query
 i $d(^mgtmp($j,"v",qnum)) d outsqv q
 s x=^mgtmp($j,"sel",qnum,1)
 s line=" s:"_x_"="""" "_x_"="" """ d addline^%mgsqlc(grp,.line)
 ; add data
 s line=" s "_%z("ctg")_"("_%z("cts")_","_qnum_","_x_")=""""" d addline^%mgsqlc(grp,.line)
 q
 ;
outsqv ; output view from inner query
 n %kv,i,cname,com,vnum,del,alias
 s vnum=qnum
 s del="$c(1)"
 s alias=$g(^mgtmp($j,"v",qnum))
 s %kv(1)=%z("dsv")_alias_"."_"line-no"_%z("dsv")
 s tk=%z("ctg")_"("_%z("cts")_","_qnum
 f i=1:1 q:'$d(%kv(i))  s tk=tk_","_%kv(i)
 s tk=tk_")"""
 s td="",com="" f i=1:1 q:'$d(^mgtmp($j,"outsel",vnum,i))  s cname=$g(^(i)) s td=td_com_cname,com="_"_del_"_"
 ; add data
 s line=" s "_line_")="_td d addline^%mgsqlc(grp,.line)
 q
 ;
out1 ; output from outer query - take data as it comes
 s %data=1,ptag=$g(tag(qnum)) d line^%mgsqlc3
 k rdel,rec
 q
 ;
out2 ; output is 'ordered'
 s com="",ordsub="" f i=1:1 q:'$d(order(i))  d out21
 s line=" s "_%z("pv")_"n="_%z("pv")_"n+1" d addline^%mgsqlc(grp,.line)
 d linel s line=" s "_%z("ctg")_"("_%z("cts")_","_"""x"",1,"_ordsub_","_%z("pv")_"n"_")="_"sqlcnt(0)" d addline^%mgsqlc(grp,.line)
 s line=" g "_tag(qnum) d addline^%mgsqlc(grp,.line)
 k rdel,rec
 q
 ;
out21 ; set up order
 s x=$p(order(i),"~",1),y=$p(order(i),"~",2)
 s ordsub=ordsub_com_y,com=","
 s line=" s "_y_"=$s("_x_"="""":"" "",1:"_x_")" d addline^%mgsqlc(grp,.line)
 q
 ;
linel ; split long lines
 n del,i,pre,psp,rx,nx
 s del="_""~""_",rx=rec,nx=0
 s line=line_" s sqlcnt(0)=""""" d addline^%mgsqlc(grp,.line)
linel1 i $l(rx)<200 g linel2
 f i=1:1 s pre=$p(rx,del,1,i),pst=$p(rx,del,i+1,9999) q:pst=""  i $l(pre)>200 q
 s nx=nx+1,line=line_" s sqlcnt(0)=sqlcnt(0)"_$s(nx=1:"_",1:del)_pre d addline^%mgsqlc(grp,.line)
 s rx=pst g linel1
linel2 ; output line
 i $l(rx) s nx=nx+1,line=line_" s sqlcnt(0)=sqlcnt(0)"_$s(nx=1:"_",1:del)_rx d addline^%mgsqlc(grp,.line)
 q
 ;
order ; determine order in which data will come out
 i $d(rev(alias)),rev(alias) d order3 q
 i qnum'=1!(tnum'=1)!$d(gvar(qnum))!$d(sql("union",1)) q
 k dir i '$d(ord) q
 i '$l(ord) q
 i $l(ord,",")>$l(z,",") q
 s ok=1,kno=1
 f i=1:1:$l(z,",") s y=$p(z,",",i) d order1 i 'ok q
 i 'ok k dir q
 k ord,order
 q
 ;
order1 ; check if order is in keeping with required order
 i y'[%z("dsv") q
 s x=$p(ord,",",kno),dir=$p(x,"~",2),x=$p(x,"~",1) i x="" q
 s x=^mgtmp($j,"sel",qnum,x) i z'[x s ok=0 q
 i x=y s kno=kno+1
 i x'=y d order2 i 'ok q
 ;
 i x=y d  i 'ok q
 . n link,or
 . s link=$o(^mgtmp($j,"pre",qnum,y,""))
 . i link'="" s or=$o(^mgtmp($j,"pre",qnum,y,link)) i $l(or) s ok=0 q
 . q
 ;
 s dir=$s(dir="desc":"$zp",1:"$o")
 s dir(x)=dir
 q
 ;
order2 ; check if 'leading' subscript is uniquely fixed
 n link,op,cnst,or
 s link=$o(^mgtmp($j,"pre",qnum,y,"")) i link="" s ok=0 q
 s or=$o(^mgtmp($j,"pre",qnum,y,link)) i $l(or) s ok=0 q
 s op=^mgtmp($j,"pre",qnum,y,link,1,"op"),cnst=^("cnst") i op'="="!(cnst[%z("dsv")) s ok=0 q
 s link=$o(^mgtmp($j,"pre",y,link)) i $l(link) s ok=0 q
 q
 ;
order3 ; reverse entire order of sequence
 f i=1:1:$l(z,",") s y=$p(z,",",i) i y[%z("dsv") s dir(y)="$zp"
 q
 ;
dist q  ; optimise distinct clause if possible
 n dn
 i $d(^mgtmp($j,"from",1,2)) q
 f i=1:1:outsel q:'$d(^mgtmp($j,"sel",qnum,i))  s x=^(i),dn("x",x)=""
 f i=1:1:$l(z,keyd) s y=$p(z,keyd,i) i y[%z("dsv") q:'$d(dn("x",y))  k dn("x",y) s dn=i
 i $d(dn("x")) q
 i dn=$l(z,keyd) s ^mgtmp($j,"sel",qnum)=""
 i dn<$l(z,keyd),'$d(^mgtmp($j,"sel",qnum,outsel+1)) s z=$p(z,",",1,dn),^mgtmp($j,"sel",qnum)=""
 q
 ;
delrec ; delete selected record
 q
 n %tagz,%tagi,%tdlm,%refile,tname,alias,dtyp,key,dat
 s alias=$o(%delrec(0,"")) i alias="" q
 i '$d(^mgtmp($j,"from","x",qnum,alias)) q
 s tname=$p(^mgtmp($j,"from",qnum,^mgtmp($j,"from","x",qnum,alias)),"~",1)
 s %tagz=%z("dl")_"delete"_qnum_alias_%z("dl"),%tagi=%z("pt")_"i",%tdlm=%z("dl")
 k dtyp d xfid^%mgsqlct
 s line=" k %do,%dn,%dx" d addline^%mgsqlc(grp,.line)
 f i=1:1 q:'$d(xfid(0,i))  s cname=xfid(0,i,1) i cname?1a.e d data^%mgsqlcd
 s %refile=0 d kill^%mgsqlci
 s line=%tagz_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlc3" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlc3 ;(CM) sql compiler ; 27 apr 2003  12:14 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc3") q
 ;
endsq ; code to be executed on leaving a sub-query
 i '$d(endsq(qnum)) g endsqx
 s line=%z("dl")_%z("pt")_qnum_"x"_%z("dl")
 ;;;i qnum=1,unique(1) d uniout^%mgsqlc g endsqx
 i $d(gvar(qnum)) d regrp g endsqx
 d endsq1
 i qnum'=1 s line=line_" q" d addline^%mgsqlc(grp,.line) g endsqx
 i qnum=1,$d(ord),$l(ord) d reord g endsqx
 s line=line_" g "_%z("dl")_%z("pt")_$s($d(sql("union",qnum)):nxtun_"s",1:"x")_%z("dl") d addline^%mgsqlc(grp,.line)
endsqx i qnum=1,$d(eof("l")) s line=%z("dl")_%z("pt")_"d"_%z("dl")_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;
endsq1 ; unique result but expected as a list
 n com
 i qnum=1 q
 i 'unique(qnum) q
 s com=^mgtmp($j,"sqcom",qnum)
 i com'["in",com'["exists" q
 s line=line_" ;" d addline^%mgsqlc(grp,.line)
 d outsq^%mgsqlc2
 q
 ;
regrp ; reorganise data for 'group by' clause
 s line=line_" s (",com="",i=1
 f i=1:1 q:'$d(order(i))  s line=line_com_$p(order(i),"~",2),com=","
 s line=line_")=""""" d addline^%mgsqlc(grp,.line)
 i sort2 s line=" k "_%z("ctg")_"("_%z("cts")_","_"""x2"")"_" s "_%z("pv")_"n=0" d addline^%mgsqlc(grp,.line)
 s i=0,(keyo,como)=""
 f i=1:1 q:'$d(order(i))  d reord1
 s line=" s "_%z("vdata")_"="_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_como_keyo_")" d addline^%mgsqlc(grp,.line)
 s x="" f  s x=$o(sqfun(qnum,x)) q:x=""  s fun="" f  s fun=$o(sqfun(qnum,x,fun)) q:fun=""  d regrp1
 i $d(hav) d hav
 f i=1:1 q:'$d(^mgtmp($j,"outsel",qnum,i))  s item=^mgtmp($j,"outsel",qnum,i),line=" s "_item_"=$p("_%z("vdata")_",""~"","_i_")" d addline^%mgsqlc(grp,.line)
 ;s line=" s "_%z("pv")_"d=$p("_%z("pv")_"d"_",""~"",1,"_^mgtmp($j,"outsel",qnum)_")" d addline^%mgsqlc(grp,.line)
 i sort2 d sort2
 i qnum=1 s %data=0,ptag=tag d line
 i qnum'=1 d
 . s tag(qnum)=tag
 . i $d(^mgtmp($j,"v",qnum)) d  q
 . . f i=1:1 q:'$d(^mgtmp($j,"outsel",qnum,i))  s line=" s "_$g(^(i))_"="_"$p("_%z("pv")_"d"_",""~"","_i_")" d addline^%mgsqlc(grp,.line)
 . . d outsq^%mgsqlc2
 . . s line=" g "_tag(qnum) d addline^%mgsqlc(grp,.line)
 . . q
 . s line=" s "_^mgtmp($j,"sel",qnum,1)_"="_%z("pv")_"d" d addline^%mgsqlc(grp,.line)
 . d outsq^%mgsqlc2
 . q
 q
 ;
regrp1 ; set aggregate(s) into their relevant group
 n funtyp
 s funtyp=$p(fun,"_",1)
 i funtyp="avg"!(funtyp="min") s line=" s $p("_%z("pv")_"d,""~"","_sqfun(qnum,x,fun)_")=$p($p("_%z("pv")_"d,""~"","_sqfun(qnum,x,fun)_"),""#"",1)"
 d addline^%mgsqlc(grp,.line)
 q
 ;
hav ; set up test for 'having' clause
 s line=""
 f i=1:1 q:'$d(hav(i))  s x=hav(i) d hav1 s line=line_x
 i line="" q
 s line=" i '("_line_") g "_tag d addline^%mgsqlc(grp,.line)
 q
 ;
hav1 ; process individual element in 'having' clause
 i x'[%z("dsv") q
 s x=$p(x,%z("dsv"),2),fun=$p(x,"(",1),x=$p($p(x,"(",2,999),")",1)
 s x="$p("_%z("vdata")_",""~"","_sqfun(qnum,x,fun)_")"
 q
 ;
reord ; reorder data for 'order by' clause
 s line=line_" s (",com=""
 f i=1:1 q:'$d(order(i))  s line=line_com_$p(order(i),"~",2),com=","
 s line=line_","_%z("pv")_"n)=""""" d addline^%mgsqlc(grp,.line)
 s (keyo,como)="" f i=1:1:$l(ord,",") d reord1
 s tag=%z("dl")_%z("pt")_qnum_"o"_(i+1)_%z("dl"),ptag=%z("dl")_%z("pt")_qnum_"o"_i_%z("dl")
 s line=tag_" s "_%z("pv")_"n=$o("_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_keyo_","_%z("pv")_"n))"_" i "_%z("pv")_"n="""" g "_ptag d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("vdata")_"="_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_keyo_","_%z("vdata")_")" d addline^%mgsqlc(grp,.line)
 s %data=0,ptag=tag d line
 q
 ;
reord1 ; for each grouped attribute
 s dir="$o" i qnum=1,$d(ord),$l(ord) s dir=$p($p(ord,",",i),"~",2),dir=$s(dir="desc":"$zp",1:"$o")
 s x=$p(order(i),"~",2)
 s keyo=keyo_como_x,como=","
 s tag=%z("dl")_%z("pt")_qnum_"o"_i_%z("dl")
 s ptag=$s(i=1:$s(sort2:%z("dl")_%z("pt")_qnum_"on2"_%z("dl"),1:tagout),i>1:%z("dl")_%z("pt")_qnum_"o"_(i-1)_%z("dl"),1:"")
 s line=tag_" s "_x_"="_dir_"("_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_keyo_")) i "_x_"="""""
 i i=1,qnum'=1 s line=line_" q" d addline^%mgsqlc(grp,.line) q
 s line=line_" g "_ptag d addline^%mgsqlc(grp,.line)
 q
 ;
sort2 ; perform secondary sort
 s (keyo,com)=""
 f i=1:1 q:'$d(ord(i))  s seln=$p($p(ord,",",i),"~",1),v1=order2(i),v2=$p(v1,"~",2),v1=$p(v1,"~",1),keyo=keyo_com_v2,com=",",line=" s ("_v1_","_v2_")=$p("_%z("pv")_"d,""~"","_seln_") i "_v2_"="""" s "_v2_"="" """ d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("pv")_"n="_%z("pv")_"n+1" d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("ctg")_"("_%z("cts")_","_"""x2"","_qnum_","_keyo_","_%z("pv")_"n)="_%z("pv")_"d" d addline^%mgsqlc(grp,.line)
 s line=" g "_tag d addline^%mgsqlc(grp,.line)
 s line=%z("dl")_%z("pt")_qnum_"on2"_%z("dl")_" s ("_keyo_","_%z("pv")_"n)=""""" d addline^%mgsqlc(grp,.line)
 s (keyo,como)="" f i=1:1:$l(ord,",") d sort21
 s tag=%z("dl")_%z("pt")_qnum_"on2"_(i+1)_%z("dl"),ptag=%z("dl")_%z("pt")_qnum_"on2"_i_%z("dl")
 s line=tag_" s "_%z("pv")_"n=$o("_%z("ctg")_"("_%z("cts")_","_"""x2"","_qnum_","_keyo_","_%z("pv")_"n))"_" i "_%z("pv")_"n="""" g "_ptag d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("vdata")_"="_%z("ctg")_"("_%z("cts")_","_"""x2"","_qnum_","_keyo_","_%z("pv")_"n)" d addline^%mgsqlc(grp,.line)
 q
 ;
sort21 ; for each grouped attribute in secondary sort
 s dir="$o" i qnum=1,$d(ord),$l(ord) s dir=$p($p(ord,",",i),"~",2),dir=$s(dir="desc":"$zp",1:"$o")
 s x=$p(order2(i),"~",2)
 s keyo=keyo_como_x,como=","
 s tag=%z("dl")_%z("pt")_qnum_"on2"_i_%z("dl")
 s ptag=$s(i=1:tagout,i>1:%z("dl")_%z("pt")_qnum_"on2"_(i-1)_%z("dl"),1:"")
 s line=tag_" s "_x_"="_dir_"("_%z("ctg")_"("_%z("cts")_","_"""x2"","_qnum_","_keyo_"))"_" i "_x_"="""""
 i i=1,qnum'=1 s line=line_" q" d addline^%mgsqlc(grp,.line) q
 s line=line_" g "_ptag d addline^%mgsqlc(grp,.line)
 q
 ;
line ; output a line of sql data
 s %d=$s(%data:rec,1:%z("pv")_"d")
 s line=line_" s "_%z("vrc")_"="_%z("vrc")_"+1" d addline^%mgsqlc(grp,.line)
 s outsel=^mgtmp($j,"outsel",qnum)
 f i=1:1:outsel s line=line_" s %zo("_%z("vrc")_","_i_")="_^mgtmp($j,"outsel",qnum,i) d addline^%mgsqlc(grp,.line)
 s line=line_" s "_%z("vok")_"=$$ss^%mgsqlz(.%zi,.%zo,"_%z("vrc")_")" d addline^%mgsqlc(grp,.line)
 s line=line_" g "_ptag d addline^%mgsqlc(grp,.line) q
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlc4" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlc4 ;(CM) sql compiler - restrictions ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc4") q
 ;
dep ; look for (bad) dependencies and bind sub-queries if necessary
 n i,sqvar,qnum1,subvar
 s ok=1
 f i=2:2 s sqvar=$p(other,%z("dsv"),i) q:sqvar=""  d got i 'ok q
 i 'ok q
 f  q:other'[%z("dq")  s qnum1=$p(other,%z("dq"),2) d gotsq q:'ok  s other=$p(other,%z("dq"),1)_subvar_$p(other,%z("dq"),3,999)
 i 'ok q
 q
 ;
got ; check that data restricted upon is available
 n i,ii,alias,cname,eno,sqvar1
 s sqvar1=sqvar,alias=$p(sqvar,".",1),cname=$p(sqvar,".",2)
 i $l(alias) d got1 q
 q
 ;
got1 ; look for evaluation of one alias
 i qnum>1,'$d(^mgtmp($j,"from","x",qnum,alias)) q  ; coorelated sq, must be ok
 i '$d(got("f",alias)),'$d(got("a",sqvar1)) s ok=0 q
 q
 ;
gotsq ; look for availability of data from subquery
 n alias1,sqvar1,notgot,cmax,x
 s subvar=""
 s cmax=0,x="" f  s cmax=$o(corel(qnum,x)) q:x=""  s cmax=x
 i cmax>0,qnum1=cmax,corel(qnum,qnum1)'=1 s ok=0 q
 s alias1="" f  s alias1=$o(corel(qnum,qnum1,alias1)) q:alias1=""  i '$d(got("f",alias1)) s notgot(alias1)=""
 s alias1="" f  s alias1=$o(notgot(alias1)) q:alias1=""!'ok  s sqvar1="" f  s sqvar1=$o(corel(qnum,qnum1,alias1,sqvar1)) q:sqvar1=""  i '$d(got("a",sqvar1)) s ok=0 q
 i 'ok q
 s subvar=^mgtmp($j,"sel",qnum1,1)
 q
 ;
pre ; preset subscript and determine stop condition(s)
 k pre(y),nopas(y)
 s lo=":]:>:'<:",hi=":']:<:'>:",cond=lo_"="_hi
 s preop=$s(dir="$zp":":=:']:<:'>:",1:":=:]:>:'<:")
 s postop=$s(dir="$zp":":=:]:>:'<:",1:":=:']:<:'>:")
 s sqlv=$p(y,%z("dsv"),2),cname=$p(sqlv,".",2)
 s other="" f ii=tnum-1:-1:1 s alias1=$p(^mgtmp($j,"from",qnum,ii),"~",2) i $d(joinx(qnum,cname,alias1)),'$d(^mgtmp($j,"from","z",qnum,"pass",alias1)) s other=%z("dsv")_alias1_"."_cname_%z("dsv") q
 i $l(other) s op="=",link=0 d pre1 g prex
 s link="" f  s link=$o(^mgtmp($j,"pre",qnum,y,link)) q:link=""  f iii=1:1 q:'$d(^mgtmp($j,"pre",qnum,y,link,iii))  s op=^(iii,"op"),other=^("cnst") d pre1,addpre
prex i 'con s link="" f  s link=$o(pre(y,"post",link)) q:link=""  i '$d(pre(y,"pre",link)) s pre(y,"pre",link)=" "_"s"_" "_y_"=""""",pre(y,"pre","nostrt")=""
 i 'con,'$d(pre(y,"pre",1)) s pre(y,"pre",1)=" "_"s"_" "_y_"=""""",pre(y,"pre","nostrt")="" i $d(pre(y,"pre",2)) s pre(y,"pre",1)=pre(y,"pre",2) k pre(y,"pre",2)
 k pre(y,"link")
 q
 ;
pre1 ; evaluate restriction
 s line="" ;g cm
 d dep i 'ok q
 g cm
 i other[%z("dsv"),$l($p($p(other,%z("dsv"),2),".",1)) i count=1,tnum=1,qnum=1 q
 i other[%z("dsv"),other["(" d gotsq i 'ok s nopas=0 q
 i other[%z("dsv"),other'["(" s okf=0 f ii=2:2 s zz=$p(other,%z("dsv"),ii) q:zz=""  d got
 i other[%z("dsv"),other'["(",'okf k zz,okf,otf,tnummx q
cm k zz,okf,otf,tnummx
 i op="=",'con s line=" "_"s"_" "_y_op_other,type="pre",nopas=1 d addpre q
 i op="=",con s line=" "_"i"_" "_y_"<"_other_"!("_other_"]"_y_")",strt=other,%k="%k",type="pre",nopas=1 d addpre s line=" "_"i"_" "_y_"'"_op_other,type="post",nopas=0 d addpre q
 s nopas=0
 i postop[(":"_op_":") g post
 ;
preset ; set up starting point for subscript
 s type="pre" i con g presetc ; concatenated keys
 i op=">"!(op="<") s line=" "_"s"_" "_y_"="_other q
 i op="]" s line=" "_"s"_" "_y_"="_other q
 d sort
 s typ(other)=typ
 ; cmtaaa
 i op="'<",typ="string" d  q
 . i other?.1"-".n.1"."1n.n s line=" "_"s"_" "_y_"="_other_"-0.00001" q
 . s line=" "_"s"_" "_y_"="_$e(other,1,$l(other)-2)_$c($a(other,$l(other)-1)-1)_$c(34) q
 . q
 i op="'<",typ="numeric"!(typ="float") s line=" "_"s"_" "_y_"="_other_"-0.00001" q
 i op="'<",typ="mixed" s line=" "_"s"_":"_other_"?.1""-"".n.1"".""1n.n "_y_"="_other_"-0.00001 "_"s"_":"_other_"'?.1""-"".n.1"".""1n.n "_y_"="_"$e"_"("_other_",1,"_"$l"_"("_other_")-1)_"_"$c"_"("_"$a"_"("_"$e"_"("_other_","_"$l"_"("_other_")))-1)_""~""" q
 i op="']"!(op="'>"),typ="string" s line=" "_"s"_" "_y_"="_$e(other,1,$l(other)-2)_$c($a(other,$l(other)-1)+1)_$c(34) q
 i op="']"!(op="'>"),typ="numeric"!(typ="float") s line=" "_"s"_" "_y_"="_other_"+0.00001" q
 i op="']"!(op="'>"),typ="mixed" s line=" "_"s"_":"_other_"?.1""-"".n.1"".""1n.n "_y_"="_other_"+0.00001 "_"s"_":"_other_"'?.1""-"".n.1"".""1n.n "_y_"="_"$e"_"("_other_",1,"_"$l"_"("_other_")-1)_"_"$c"_"("_"$a"_"("_"$e"_"("_other_","_"$l"_"("_other_")))+1)" q
 q
 ;
presetc ; starting point and pre-test for concatenated keys
 s strt=""
 i op=">"!(op="<")!(op="]") s line=" "_"i"_" "_y_"'"_op_other,strt=other,%k="%k_""~""" q
 d sort
 s typ(other)=typ
 i op="'<" s line=" "_"i"_" "_y_"<"_other,strt=other,%k="%k" q
 i op="']"!(op="'>") s line=" "_"i"_" "_y_"'"_$e(op,2)_other,strt=other,%k="%k" q
 q
 ;
post ; set up stop condition for subscript
 s type="post"
 d sort
 s typ(other)=typ
 i typ="string" s line=" "_"i"_" "_$s(op="<":y_"="_other_"!("_y_"]"_other_")",op="'>":y_"]"_other,op="']":y_"]"_other,op=">":y_"']"_other,op="]":y_"']"_other,op="'<":y_"'="_other_","_y_"']"_other,1:"") q
 i typ="numeric"!(typ="float") s line=" "_"i"_" "_$s(op="<":y_"'<"_other,op="'>":y_">"_other,op="']":y_"="_other_"!("_y_"]"_other_")",op=">":y_"'>"_other,op="]":y_"'>"_other,op="'<":y_"'="_other_","_y_"'>"_other,1:"") q
 i typ="mixed",op="]"!(op=">") s line=" "_"k"_" %s "_"s"_" %s("_y_")="""",%xx="_"$o"_"(%s("_other_")) "_"k"_" %s "_"i"_" %xx'="_y q
 i typ="mixed",op="'<" s line=" "_"i"_" "_"$l"_"("_other_") "_"k"_" %s "_"s"_" %s("_y_")="""",%xx="_"$o"_"(%s("_other_"),-1) "_"k"_" %s "_"i"_" %xx="_y q
 i typ="mixed",op="<" s line=" "_"k"_" %s "_"s"_" %s("_y_")="""",%xx="_"$o"_"(%s("_other_"),-1) "_"k"_" %s "_"i"_" %xx'="_y q
 i typ="mixed",op="']"!(op="'>") s line=" "_"i"_" "_"$l"_"("_other_") "_"k"_" %s "_"s"_" %s("_y_")="""",%xx="_"$o"_"(%s("_other_")) "_"k"_" %s "_"i"_" %xx="_y q
 q
 ;
addpre ; add line of code to subscript initialisation array
 n l
 i line="" q
 i '$d(seq(alias)) s ^mgtmp($j,"wexcl",qnum,y_op_other)="",^(other_op_y)=""
 i '$d(pre(y)) s pre(y)=0
 i '$d(pre(y,"link",link)) s l=pre(y)+1,pre(y)=l,pre(y,"link",link)=l
 s l=pre(y,"link",link)
 s pre(y,type,l)=line
 i con,type="pre",$l(strt) s pre(y,"strt",l)=strt,pre(y,"%k",l)=%k
 i nopas s nopas(y,l)=""
 q
 ;
sort ; determine sort of data
 s cname=$p($p(y,%z("dsv"),2),".",2) s %d=$$col^%mgsqld(dbid,tname,cname) k cname s typ=$p(%d,"\",11) i $l(typ) s:other[%z("dev")&(typ="string") typ="mixed" q
 i other?1"""".e s typ="string" q
 i other?.1"-".n.1"."1n.n s typ="numeric" q
 s typ="mixed"
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlc5" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlc5 ;(CM) sql compiler - get data ; 19 jan 2003  4:34 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc5") q
 ;
keyidx ; file key for index
 n y,z,i
 s y=$g(key0(qnum,tnum)) i y="" q
 f i=1:1:$l(y,",") s z=$p($p(y,",",i),%z("dsv"),2) i z'="" s ^mgtmp($j,"get",z)=""
 q
 ;
data ; retrieve required data from file
 n fno,sqat
 d keyidx
 ; cmtaaa
 ;i $d(^mgtmp($j,"from","z",qnum,"def",tnum)) d
 ;. s line=" "_"s"_" "_^mgtmp($j,"from","z",qnum,"def",tnum)_"=1" d addline^%mgsqlc(grp,.line)
 ;. q
 ;
 i $g(^mgtmp($j,"dontgetdata",qnum,tnum))=1 q
 i $d(^mgtmp($j,"from","z",qnum,"pass",alias)) d ojda^%mgsqlc1
 s zglo=glb0(qnum,tnum),zgloz=$s(zglo[%z("dev"):""")",1:"")
 s zkey=key0(qnum,tnum)
 s subt="" i qnum=1,unique(1)=2 s subt=%z("vdef")
 i $d(data(qnum,tnum)) s glo=zglo,key=zkey,dat=%z("vdata"),fail=$s($d(tag(qnum)):" g "_tag(qnum),1:"") d g^%mgsqlci
 s x="" f  s x=$o(data(qnum,tnum,x)) q:x=""  d data1
 i $d(^mgtmp($j,"from","z",qnum,"pass",alias)) d ojdz^%mgsqlc1
 d corel
 q
 ;
data1 ; retrieve data item or just check if in parsed index
 n sm,ssubs,pce
 s ^mgtmp($j,"get",x)=""
 s sqat=x i $l(sqat,".")>2 s sqat=$p(sqat,".",1,2) i $d(data(qnum,tnum,sqat))#10 q
 i key0(qnum,tnum)[(%z("dsv")_sqat_%z("dsv")) q  ; primary key
 s pce=$p(data(qnum,tnum,x),"\",1),sm=$p(data(qnum,tnum,x),"\",3),ssubs=$g(data(qnum,tnum,x,"s"))
 i pce="" s line=" s "_%z("dsv")_sqat_%z("dsv")_"=""""" g data1x
 i sm="d",$l(odel(qnum,tnum)) s line="$p"_"("_%z("vdata")_","_odel(qnum,tnum)_","_pce_")"
 i sm="d",'$l(odel(qnum,tnum)) s line=%z("vdata")
 i sm="s",$l(subt) s line=" s %ds=""""" d addline^%mgsqlc(grp,.line)
 i sm="s" s glo=zglo,key=zkey_","_ssubs,dat="%ds",fail="" d g^%mgsqlci s line="%ds"
 i z[(%z("dsv")_x_%z("dsv")) s line=" "_"i"_" "_line_"'="_%z("dsv")_sqat_%z("dsv")_" "_"s"_" ^sqlerr("_$c(34)_tname_$c(34)_","_z_")="""" "_"g"_" "_tag(qnum)
 i z'[(%z("dsv")_x_%z("dsv")) s line=" "_"s"_" "_%z("dsv")_sqat_%z("dsv")_"="_line
data1x d addline^%mgsqlc(grp,.line)
 q
 ;
corel ; provide calls to correlated sub-queries
 n i,alias,ok,notgot,qnum1,com,sqvar,line,cmax,x
 s qnum1="",line="",com=""
corel1 s qnum1=$o(corel(qnum,qnum1)) i qnum1="" g corelx
 i corel(qnum,qnum1) g corel1
 s alias="" f  s alias=$o(corel(qnum,qnum1,alias)) q:alias=""  i '$d(got("f",alias)) s notgot(alias)=""
 s ok=1 s alias="" f  s alias=$o(notgot(alias)) q:alias=""!'ok  s sqvar="" f  s sqvar=$o(corel(qnum,qnum1,alias,sqvar)) q:sqvar=""  i '$d(got("a",sqvar)) s ok=0 q
 i 'ok g corel1
 s cmax=0,x="" f  s x=$o(corel("x",qnum1,x)) q:x=""  s cmax=x
 i cmax>0,qnum'=cmax g corel1
 s line=%z("dl")_%z("pt")_qnum1_"s"_%z("dl")_com_line,com=",",corel(qnum,qnum1)=1
 g corel1
corelx i $l(line) s line=" d "_line d addline^%mgsqlc(grp,.line)
 q
 ;
crind ; create required index
 s r=create("index"),tname=$p(r,"~",1),idx=$p(r,"~",2)
 s alias=$p(tname," ",2),tname=$p(tname," ",1)
 s ino=idx s %ref=$$ref^%mgsqld(dbid,tname,ino) s ref=%ref_"(",test="",comr="",comt=""
 s ino=idx s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(idx,i))  s (cname,xd)=%ind(idx,i) k %ind(idx,i) s:cname?1a.e xd=%z("dsv")_alias_"."_cname_%z("dsv") s ref=ref_comr_xd,comr="," i xd[%z("dsv") s ino=$$pkey^%mgsqld(dbid,tname) s %def=$$defkdi^%mgsqld(dbid,tname,cname,ino) i '%def s test=test_comt_"$l("_xd_")",comt=","
 i $l(test) s line=" i "_test
 s line=line_" s "_ref_")=""""" d addline^%mgsqlc(grp,.line)
 s line=" g "_tag(qnum) d addline^%mgsqlc(grp,.line)
 k %ind,r,tname,alias,ref,x,xd,test,comr,comt,idx
 q
 ;
klind ; kill off index to be created
 s r=create("index"),tname=$p(r,"~",1),idx=$p(r,"~",2)
 s alias=$p(tname," ",2),tname=$p(tname," ",1)
 s line="",com=""
 s ino=idx s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(idx,i))  s x=%idx(idx,i) k %idx(idx,i) q:x?1a.e  s line=line_com_x,com=","
 i $l(line) s line="("_line_")"
 s ino=idx s %ref=$$ref^%mgsqld(dbid,tname,ino) s line=" k "_%ref_line d addline^%mgsqlc(grp,.line)
 k %ind,r,tname,alias,idx,x
 q
 ;
 
 
]]></Routine>


<Routine name="%mgsqlc6" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlc6 ;(CM) sql compiler - aggregates ; 19 jan 2003  4:34 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc6") q
 ;
prefun ; initialise select functions on data attributes
 i qnum=1,unique(1)=3 d init
 i $d(kiltemp(qnum)) s ktmp=1,line=" k "_%z("ctg")_"("_%z("cts")_","_qnum_")" d addline^%mgsqlc(grp,.line)
 i $d(gvar(qnum)) s ktmp=1,line=" k "_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_")" d addline^%mgsqlc(grp,.line) q
 s kdist=0,killcnt=0
 s x="" f  s x=$o(sqfun(qnum,x)) q:x=""  d prefun1
 ;k kdist,killcnt,sqfun1
 ;i 'unique(qnum) q
 ;s termx=1,x="" f  s x=$o(sqfun(qnum,x)) q:x=""  s nth="" f  s nth=$o(sqfun(qnum,x,"nth",nth)) q:nth=""  s r=sqfun(qnum,x,"nth",nth) s:$p(r,"~",3)="z" termx=0 i $p(r,"~",3)="a" s termx(nth)=x
 ;i termx=1 s nth="" f i=1:1 s nth=$o(termx(nth)) q:nth=""  s term(qnum)=" i "_%z("pv")_"(""x"","_qnum_")="_$p(sqfun(qnum,termx(nth),"nth",nth),"~",2)
 ;k termx i i'=2 k term
 q
 ;
prefun1 ; retrieve each aggregate for attribute
 s fun="" f  s fun=$o(sqfun(qnum,x,fun)) q:fun=""  d prefun2
 q
 ;
prefun2 ; generate line of code to initilalise each specific aggregate
 n z,funtyp,notnull
 s funtyp=$p(fun,"_",1)
 s notnull=0 i $p(fun,"_",2)="notnull" s notnull=1
 s z=%z("dsv")_fun_"("_x_")"_%z("dsv")
 i x'["*" s lvar=x
 i funtyp="count" s:x'["*" line=line_" s "_%z("dsv")_fun_"("_x_")"_%z("dsv")_"=0" i x["*" s line=line_" s "_z_"=0"
 i funtyp="cntd",x'["*",qnum'=1,$d(kdist),'kdist s kdist=1,line=" k "_%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_")" d addline^%mgsqlc(grp,.line)
 i funtyp="cntd",x'["*" s line=" s "_%z("dsv")_"cntd("_x_")"_%z("dsv")_"=0" d addline^%mgsqlc(grp,.line)
 i funtyp="sum" s line=line_" s "_%z("dsv")_fun_"("_x_")"_%z("dsv")_"=0"
 i funtyp="avg" s line=line_" s "_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"=0,"_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"=0"
 i funtyp="max" s line=line_" s "_%z("dsv")_fun_"("_x_")"_%z("dsv")_"="""""
 i funtyp="min" s line=line_" s "_%z("dsv")_fun_"("_x_")"_%z("dsv")_"="""","_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")_"=0"
 d addline^%mgsqlc(grp,.line)
 q
 ;
updfun ; update aggregates
 s ordsub=""
 i $d(gvar(qnum)) d ggroup
 s x="" f  s x=$o(sqfun(qnum,x)) q:x=""  s fun="" f  s fun=$o(sqfun(qnum,x,fun)) q:fun=""  d updfun1
 i $d(gvar(qnum)) d ugroup
 k gvaru
 q
 ;
updfun1 ; generate line of code to update specific aggregate
 n z,funtyp,nulltest
 i $d(kiltemp(qnum)) s ktmp=1,line=" k "_%z("ctg")_"("_%z("cts")_","_qnum_")" d addline^%mgsqlc(grp,.line)
 s funtyp=$p(fun,"_",1),nulltest="" i $p(fun,"_",2)="notnull" s nulltest=" "_"i"_" $l("_%z("dsv")_x_%z("dsv")_")"
 s z=%z("dsv")_fun_"("_x_")"_%z("dsv")
 ;
 i funtyp="count",$d(index(0,alias,"a")) s nulltest=""
 ;
 i funtyp="count",$d(index(0,alias,"a")) s line=nulltest_" "_"s"_" "_z_"="_z_"+"_%z("dsv")_x_%z("dsv") d addline^%mgsqlc(grp,.line) q
 i funtyp="count",x'["*" s line=nulltest_" "_"s"_" "_z_"="_z_"+1" d addline^%mgsqlc(grp,.line) q
 i funtyp="count",x["*" s line=" "_"s"_" "_z_"="_z_"+1" d addline^%mgsqlc(grp,.line) q
 i funtyp="cntd",x'["*" s ktmp=1
 i funtyp="cntd",x'["*" d cntd q
 i funtyp="sum" s line=nulltest_" "_"s"_" "_z_"="_z_"+"_%z("dsv")_x_%z("dsv") d addline^%mgsqlc(grp,.line) q
 i funtyp="avg" s line=nulltest_" "_"s"_" "_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"="_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"+1,"_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"="_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"+"_%z("dsv")_x_%z("dsv")_","_z_"="_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"/"_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv") d addline^%mgsqlc(grp,.line)
 i funtyp="max" s line=nulltest_" "_"k"_" %s s:$l("_%z("dsv")_x_%z("dsv")_") %s("_%z("dsv")_x_%z("dsv")_")="""" s:$l("_z_") %s("_z_")="""" s "_z_"=$o(%s(""""),-1) k %s" d addline^%mgsqlc(grp,.line) q
 i funtyp="min" s line=nulltest_" s:'$l("_%z("dsv")_x_%z("dsv")_") "_z_"="""","_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")_"=1 i '"_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")_" k %s s %s("_%z("dsv")_x_%z("dsv")_")="""" s:$l("_z_") %s("_z_")="""" s "_z_"=$o(%s("""")) k %s" d addline^%mgsqlc(grp,.line) q
 i $d(gvar(qnum)) q
 q
 ;
cntd ; count distinct
 n tag,notnullx
 s notnullx="" i $l(nulltest) s notnullx="{notnull}"
 s tag=ldx_sqt_"cntd"_notnullx_x_ldx
 i $l(nulltest) s line=" i '$l("_%z("dsv")_x_%z("dsv")_") g "_tag d addline^%mgsqlc(grp,.line)
 s ref=%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_$s($l(ordsub):","_ordsub,1:"")_","_""""_%z("dsv")_notnullx_x_%z("dsv")_""""_","_%z("dsv")_x_%z("dsv")_")"
 s line=" s:'$l("_%z("dsv")_x_%z("dsv")_") "_%z("dsv")_x_%z("dsv")_"="" "" i $d("_ref_") g "_tag d addline^%mgsqlc(grp,.line)
 s line=" s "_ref_"=""""" d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("dsv")_fun_"("_x_")"_%z("dsv")_"="_%z("dsv")_fun_"("_x_")"_%z("dsv")_"+1" d addline^%mgsqlc(grp,.line)
 s line=tag_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;
ggroup ; retrieve data for current update on 'grouped' items
 k gvaru s gvaru=0
 s tk0=""",""""x"""","_qnum
 s ordsub="",com=""
 f i=1:1 q:'$d(order(i))  d out21^%mgsqlc2
 ;
 s line=" s "_%z("vdata")_"=$g("_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_ordsub_"))" d addline^%mgsqlc(grp,.line)
 ;
 ;s gvaru=gvaru+1,gvaru(gvaru)=" s "_%z("pv")_"d="_recc
 s x="" f  s x=$o(sqfun(qnum,x)) q:x=""  s fun="" f  s fun=$o(sqfun(qnum,x,fun)) q:fun=""  d ggroup1
 ;s gvaru=gvaru+1,gvaru(gvaru)=$c(1)_tk0_$c(1)_%z("pv")_"d"
 k rec0,rec
 q
 ;
ggroup1 ; retrieve data for specific function
 n z,ref,funtyp
 s funtyp=$p(fun,"_",1)
 s z=%z("dsv")_fun_"("_x_")"_%z("dsv")
 s line=" s "_%z("vdatax")_"=$p("_%z("vdata")_",""~"","_sqfun(qnum,x,fun)_")" d addline^%mgsqlc(grp,.line)
 i funtyp="count"!(funtyp="cntd")!(funtyp="sum")!(funtyp="max") s line=" s "_z_"="_%z("vdatax")_" i "_%z("vdata")_"="""" s "_z_"=0"
 i funtyp="avg" s line=" s:"_%z("vdata")_"'="""" "_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"=$p("_%z("vdatax")_",""#"",2),"_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"=$p("_%z("vdatax")_",""#"",3) s:"_%z("vdata")_"="""" "_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"=0,"_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"=0"
 i funtyp="min" s line=" s:"_%z("vdata")_"'="""" "_z_"=$p(%d,""#"",1),"_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")_"=$p(%d,""#"",2) s:"_%z("vdata")_"="""" "_z_"="""","_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")_"=0"
 d addline^%mgsqlc(grp,.line)
 ; code to reset updated aggregates
 q
 ;s gvaru=gvaru+1
 ;s gvaru(gvaru)=" s $p("_%z("vdatax")_",""~"","_sqfun(qnum,x,fun)_")="
 ;i funtyp="count"!(funtyp="cntd")!(funtyp="sum")!(funtyp="max") s gvaru(gvaru)=gvaru(gvaru)_z
 ;i funtyp="min" s gvaru(gvaru)=gvaru(gvaru)_z_"_""#""_"_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")
 ;i funtyp="avg" s gvaru(gvaru)=gvaru(gvaru)_z_"_""#""_"_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"_""#""_"_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")
 ;q
 ;
ugroup ; update goups
 s line=" s "_%z("vdata")_"="_recc d addline^%mgsqlc(grp,.line)
 s x="" f  s x=$o(sqfun(qnum,x)) q:x=""  s fun="" f  s fun=$o(sqfun(qnum,x,fun)) q:fun=""  d ugroup1
 ;s gvaru=gvaru+1,gvaru(gvaru)=$c(1)_tk0_$c(1)_%z("pv")_"d"
 s line=" ; set the record" d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_ordsub_")="_%z("vdata") d addline^%mgsqlc(grp,.line)
 q
 ;
ugroup1 ; update group for specific function
 n funtyp,z
 ;s gvaru=gvaru+1
 s funtyp=$p(fun,"_",1)
 s z=%z("dsv")_fun_"("_x_")"_%z("dsv")
 i funtyp="count"!(funtyp="cntd")!(funtyp="sum")!(funtyp="max") s line=" s $p("_%z("vdata")_",""~"","_sqfun(qnum,x,fun)_")="_z
 i funtyp="min" s line=" s $p("_%z("vdata")_",""~"","_sqfun(qnum,x,fun)_")="_z_"_""#""_"_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")
 i funtyp="avg" s line=" s $p("_%z("vdata")_",""~"","_sqfun(qnum,x,fun)_")="_z_"_""#""_"_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"_""#""_"_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")
 d addline^%mgsqlc(grp,.line)
 q
 ;
init ; initialise select statement for unique queries
 n %noinc,line,lvar,pvar,com,x1,j
 s %noinc=1
 s (line,com)="" f j=1:1:outsel s x1=^mgtmp($j,"sql","sel",qnum,j) i x1[%z("dsv"),x1'["(" s line=line_com_x1,com="," i $l(line)>200 s line=" s ("_line_")=""""",com="" d addline^%mgsqlc(grp,.line)
 i $l(line) s line=" s ("_line_")=""""" d addline^%mgsqlc(grp,.line)
 k j,x1
 q
 ;
]]></Routine>


<Routine name="%mgsqlcd" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlcd ;(CM) sql compiler - delete ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlcd") q
 ;
main ; start
 s %tagz=tag(1),%tagi=%z("pt")_"i",%tdlm=%z("dl")
 s tname=update("delete"),alias=$p($p(tname," ",2),":",1),tname=$p(tname," ",1)
 k dtyp d xfid^%mgsqlct
 s line=" "_"k"_" %do,%dn,%dx" d addline^%mgsqlc(grp,.line)
 s inop=$$pkey^%mgsqld(dbid,tname)
 f i=1:1 q:'$d(xfid(inop,i))  s cname=xfid(inop,i,1) i cname?1a.e d data
 s %refile=0 d kill^%mgsqlci
 s line=" "_"g"_" "_%tagz d addline^%mgsqlc(grp,.line)
exit ; exit
 k upd,key,nkey,nkeyt,okey,okeyt,pkey,pref,idx,apc,cde,z
 q
 ;
data ; determine values for delete and set r.i. interface
 d dtyp^%mgsqlct
 s key("o",cname)="%do("_dtyp(cname)_")"
 s line=" "_"s"_" "_key("o",cname)_"="_%z("dsv")_alias_"."_cname_%z("dsv") d addline^%mgsqlc(grp,.line)
 q
 ;
hilev ; kill file off at high level
 n n,alias
 s tname=$p(update("delete")," ",1),alias=$p(update("delete")," ",2) i alias="" s alias=tname
 s ^mgtmp($j,"sqlupd",tname)="~1"
 d xfid^%mgsqlct
 s ino="" f i=0:0 s ino=$o(xfid(ino)) q:ino=""  d hilev1
hilev3 ; link
 s line=" "_"k"_" %do" d addline^%mgsqlc(grp,.line)
 s ino=$$pkey^%mgsqld(dbid,tname) f i=1:1 q:'$d(xfid(ino,i))  s cname=xfid(ino,i,1) i cname?1a.e q:'$d(update("attx",cname))  s val=update("attx",cname),key=key_com_val,com="," i val[%z("dev") s n=$p($$col^%mgsqld(dbid,tname,cname),"\",5) i $l(n) s line=" "_"s"_" %do("_n_")="_val d addline^%mgsqlc(grp,.line)
 q
 ;
hilev1 ; kill off single index
 s (line,key,keyt,com,comt)=""
 i ino=$$pkey^%mgsqld(dbid,tname) f i=1:1 q:'$d(xfid(ino,i))  s cname=$g(xfid(ino,i,1)) i cname?1a.e s ^mgtmp($j,"get",alias_"."_cname)=""
 f i=1:1 q:'$d(xfid(ino,i))  s cname=xfid(ino,i,1) s:cname'?1a.e key=key_com_cname,com="," i cname?1a.e q:'$d(update("attx",cname))  s val=update("attx",cname),key=key_com_val,com="," i val[%z("dev") s keyt=keyt_comt_"$l"_"("_val_")",comt=","
 i $l(keyt) s line=" "_"i"_" "_keyt
 i $l(key) s key="("_key_")"
 s line=line_" "_"k"_" "_xfid(ino)_key d addline^%mgsqlc(grp,.line)
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlci" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlci ;(CM) sql compiler - insert ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlci") q
 ;
main ; start
 s %tagz=$s('$d(sql(1,1)):tagout,1:tag(1)),%tagi=%z("pt")_"i" ;,%tdlm=%z("dl")
 s (tname,alias)=update("insert")
 k dtyp d xfid^%mgsqlct
 f i=1:1 q:'$d(update("att",i))  d data
 s %refile=1 d set
 i $d(sql(1,1)) s line=" "_"g"_" "_tag(1) d addline^%mgsqlc(grp,.line)
 ;
exit ; exit
 k upd,null,key,nkey,nkeyt,okey,okeyt,pkey,pref,idx,apc,cde,z
 q
 ;
data ; determine values for update
 s cname=update("att",i)
 d dtyp^%mgsqlct
 s (y,var)=update("val",i)
 ;i y?.1"."1a.e s var=%z("dsv")_y_%z("dsv")
 i y?1":"1a.e s var=%z("dev")_y_%z("dev")
 i $d(xfidx(cname)) s (key("o",cname),key("n",cname))=var
 i '$d(xfidx(cname)) s dat("n",cname)=var
 q
 ;
 ;  key("o",cname)=val : must supply
 ;  key("n",cname)=val : supply all/partial/none
 ;  dat("o",cname)=val : optional
 ;  dat("n",cname)=val : optional
 ;  %refile         : flag for forced refiling of all indices
 ;  %tagi           : reserved label prefix for indices etc
 ;  %tdlm           : reserved label delimiter
 ;  %tagz           : label for exit
 ;
index ; generate physical index references
 s ino=""
index1 s ino=$o(xfid(ino)) i ino="" q
 s pst="",typo="o",typn="n"
 s (zo,to)="" i %set s (zn,tn,zx,tx)=""
 s (com,ando,andn)="" f kno=1:1 q:'$d(xfid(ino,kno))  d index2 s com=","
 s pkey("o",ino)=zo,subt("o",ino)=to
 i %set s pkey("n",ino)=zn,subt("n",ino)=tn,pkey("x",ino)=zx,subt("x",ino)=tx
 g index1
 ;
index2 ; process single key element
 s zo=zo_com i %set s zn=zn_com,zx=zx_com
 s com1="" f ano=1:1 q:'$d(xfid(ino,kno,ano))  d index3 s com1="_"""_","_"""_"
 q
 ;
index3 ; process a single key attribute
 s cname=xfid(ino,kno,ano)
 i cname'?1a.e s pvar=cname g index4
 i '$d(dtyp(cname)) d dtyp^%mgsqlct
 i $d(xfidx(cname)),$d(key(typo,cname)) s pvar=key(typo,cname) g index4
 i '$d(dat(typo,cname)) s dat(typo,cname)="%d"_pst_"("_dtyp(cname)_")"
 s pvar=dat(typo,cname)
index4 s zo=zo_com1_pvar
 i cname?1a.e,'$d(xfidx(cname)) s to=to_ando_"$l"_"("_pvar_")",ando=","
 i '%set q
 i cname'?1a.e s pvar=cname g index5
 i $d(xfidx(cname)) s:'$d(key(typn,cname)) key(typn,cname)=key(typo,cname) s pvar=key(typn,cname) g index5
 i '$d(dat(typn,cname)) s dat(typn,cname)=dat(typo,cname)
 s pvar=dat(typn,cname)
index5 s xvar=$s(cname?1a.e&'$d(xfidx(cname)):"%dx"_pst_"("_dtyp(cname)_")",1:pvar)
 s zn=zn_com1_pvar,zx=zx_com1_xvar
 i cname?1a.e,'$d(xfidx(cname)) s tn=tn_andn_"$l"_"("_pvar_")",tx=tx_andn_"$l"_"("_xvar_")",andn=","
 q
 ;
char ; get file characteristics
 s %retr=1,%onel=0 q
 i %upd q
 s sc=$$data^%mgsqld(dbid,tname,.%data)
 s %sep=0,%all=1 s cname="" f  s cname=$o(%data(cname)) q:cname=""  s %d=%data(cname) s:'$d(dat("n",cname)) %all=0 s ano=ano+1,data($p(%d,"\",1))=cname i $p(%d,"\",3)="s" s %sep=1
 i '$l($o(xfid(0))),%all,'%sep s %retr=0
 i ano<10,%all,'%sep s %onel=1
 q
 ;
elim ; eliminate indices not affected by update
 s ino=$$pkey^%mgsqld(dbid,tname) f  s ino=$o(pkey("n",ino)) q:ino=""  i pkey("n",ino)=pkey("o",ino) k pkey("n",ino),pkey("o",ino)
 s cname="" f  s cname=$o(dat("n",cname)) q:cname=""  i $d(dat("o",cname)),dat("n",cname)=dat("o",cname) k dat("n",cname),dat("o",cname)
 q
 ;
getold ; get old data
 n agg,or,getno
 k out
 k ^mgtmp($j,"got")
 s get="y" ;$p(^%mguser("sys"),"~",10)
 s line="",or="",cname="" f  s cname=$o(key("o",cname)) q:cname=""  i cname?1a.e s or(key("o",cname))="",line=line_or_"'"_"$l"_"("_key("o",cname)_")",or="!"
 i %set s cname="" f  s cname=$o(key("n",cname)) q:cname=""  i cname?1a.e,'$d(or(key("n",cname))) s line=line_or_"'"_"$l"_"("_key("n",cname)_")",or="!"
 i $l(line) s line=" "_"i"_" "_line_" "_"g"_" "_%tagz d addline^%mgsqlc(grp,.line)
 d getold2
 s getno=0
 s inop=$$pkey^%mgsqld(dbid,tname),ino="" f  s ino=$o(pkey("o",ino)) q:ino=""  i ino'=inop d getold0
 q
 ;
getold0 ; get all attibutes involved in indices
 f i=1:1 q:'$d(xfid(ino,i))  f ii=1:1 q:'$d(xfid(ino,i,ii))  s cname=xfid(ino,i,ii) i cname?1a.e d getold1
 ;f i=1:1 q:'$d(xfid(ino,"a",i))  s cname=$p(xfid(ino,"a",i),"~",2) i cname?1a.e d getold1
 q
 ;
getold1 ; get all old attribute values
 n i,ii
 i $d(xfidx(cname))!$d(^mgtmp($j,"got",cname)) q
 s ^mgtmp($j,"got",cname)=""
 i '$d(dtyp(cname)) d dtyp^%mgsqlct
 s pvar="%d("_dtyp(cname)_")"
 i '$d(dtyp(cname,"e")) q
 s r=dtyp(cname,"e"),smeth=$p(r,"\",3),pce=$p(r,"\",1)
 s out(pce,pvar)=""
 s ino=$$pkey^%mgsqld(dbid,tname)
 i smeth="d" s line=" "_"s"_" "_pvar_"="_"$p"_"(%d,"_dlm_","_pce_")"
 i smeth="s" s line=" "_"s"_" "_pvar_"="_"$g"_"("_xfid(ino)_"("_pkey("o",ino)_","_$$seps^%mgsqld(dbid,tname,cname)_"))"
 d addline^%mgsqlc(grp,.line)
 q
 ;
getold2 ; get old data record
 s ino=$$pkey^%mgsqld(dbid,tname)
 i get="n" s line=" "_"s"_" %def="_"$d"_"("_xfid(ino)_"("_pkey("o",ino)_"))" d addline^%mgsqlc(grp,.line) s line=" "_"s"_" %d="""" "_"i"_" %def#10 "_"s"_" %d="_xfid(ino)_"("_pkey("o",ino)_")" d addline^%mgsqlc(grp,.line)
 i get="y" s line=" "_"s"_" %d="_"$g"_"("_xfid(ino)_"("_pkey("o",ino)_"))" d addline^%mgsqlc(grp,.line)
 q
 ;
killold ; kill old data record for index
 i '$d(pkey("o",ino)) q
 i $d(xfid(ino,"t")) q
 s subt="" i $l(subt("o",ino)) s subt=subt("o",ino)
 s glo=xfid(ino),key=pkey("o",ino)
 i '$d(xfid(ino,"t")) d k
 i $d(xfid(ino,"t")) s dat="""""" d s
 i '%set q
 i '%upd!(ino=$$pkey^%mgsqld(dbid,tname)) q
 s subt="" i $l(subt("x",ino)) s subt=subt("x",ino)
 s glo=xfid(ino),key=pkey("x",ino)
 i '$d(xfid(ino,"t")) d k
 i $d(xfid(ino,"t")) s dat="""""" d s
 q
 ;
getnew ; get indexed data associated with new keys
 k ^mgtmp($j,"got")
 s subt="",dat="%dx",glo=xfid(0),key=pkey("n",0),zgloz="",fail="" d g
 s ino=$$pkey^%mgsqld(dbid,tname) f  s ino=$o(pkey("o",ino)) q:ino=""  f i=1:1 q:'$d(xfid(ino,i))  f ii=1:1 q:'$d(xfid(ino,i,ii))  s cname=xfid(ino,i,ii) i cname?1a.e d getnew1
 q
 ;
getnew1 ; get individual data item
 n i,ii
 i $d(xfidx(cname))!$d(^mgtmp($j,"got",cname)) q
 s ^mgtmp($j,"got",cname)=""
 i '$d(dtyp(cname)) d dtyp^%mgsqlct
 s pvar="%dx("_dtyp(cname)_")"
 i '$d(dtyp(cname,"e")) q
 s r=dtyp(cname,"e"),smeth=$p(r,"\",3),pce=$p(r,"\",1)
 i smeth="d" s line=" "_"s"_" "_pvar_"="_"$p"_"(%dx,"_dlm_","_pce_")"
 i smeth="s" s line=" "_"s"_" "_pvar_"="_"$g"_"("_xfid(0)_"("_pkey("n",0)_","_$$seps^%mgsqld(dbid,tname,cname)_"))"
 d addline^%mgsqlc(grp,.line)
 q
 ;
setnew ; set new record for data/index
 i '$d(pkey("n",ino)) q
 i $d(xfid(ino,"t")) q
 i inop=$$pkey^%mgsqld(dbid,tname)
 i ino=inop,%onel d setnew3 q
 i ino=inop s cname="" f  s cname=$o(dat("n",cname)) q:cname=""  d setnew1
 i ino=inop,%upd k out d setnew2
 s subt="" i $l(subt("o",ino)) s subt=subt("n",ino)
 s glo=xfid(ino),key=pkey("n",ino),dat=$s(ino=$$pkey^%mgsqld(dbid,tname):"%d",1:"""""")
 d s
 q
 ;
setnew1 ; set all new attribute values
 i '$d(dtyp(cname)) d dtyp^%mgsqlct
 s var=dat("n",cname)
 i '$d(dtyp(cname,"e")) q
 s r=dtyp(cname,"e"),smeth=$p(r,"\",3),pce=$p(r,"\",1)
 i $l(var)<250,$d(out(pce,var)) q
 i smeth="d" s line=" "_"s"_" $p(%d,"_dlm_","_pce_")="_var
 i smeth="s" s line=" "_"s"_" "_xfid(ino)_"("_pkey("n",ino)_","_$$seps^%mgsqld(dbid,tname,cname)_")="_var
 d addline^%mgsqlc(grp,.line)
 q
 ;
setnew2 ; for cases where primary key has potentially changed
 s cname="",com="" f  s cname=$o(key("o",cname)) q:cname=""  s line=line_com_key("n",cname)_"="_key("o",cname),com=","
 i $l(line) s line=" "_"i"_" "_line_" "_"g"_" "_%tdlm_%tagi_%tdlm d addline^%mgsqlc(grp,.line)
 s line=" "_"s"_" %s=""""" d addline^%mgsqlc(grp,.line)
 s line=%tdlm_%tagi_1_%tdlm_" "_"s"_" %s=$o("_xfid(inop)_"("_pkey("o",inop)_",%s)) "_"i"_" %s="""" "_"g"_" "_%tdlm_%tagi_2_%tdlm d addline^%mgsqlc(grp,.line)
 s line=" "_"s"_" %xx="_xfid(inop)_"("_pkey("o",inop)_",%s)" d addline^%mgsqlc(grp,.line)
 s subt="",glo=xfid(inop),key=pkey("o",inop)_",%s" d k
 s subt="",glo=xfid(inop),key=pkey("n",inop)_",%s",dat="%xx" d s
 s line=" "_"g"_" "_%tdlm_%tagi_1_%tdlm d addline^%mgsqlc(grp,.line)
 s line=%tdlm_%tagi_2_%tdlm_" ;" d addline^%mgsqlc(grp,.line)
 d killold
 s line=%tdlm_%tagi_%tdlm_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;
setnew3 ; cram entire update into one line
 s (line,com)="" f  s cname=$o(key("o",cname)) q:cname=""  i cname?1a.e s line=line_com_"$l"_"("_key("o",cname)_")",com=","
 i $l(line) s line=" "_"i"_" "_line
 s line=line_" "_"s"_" "_xfid(ino)_"("_pkey("n",ino)_")="
 i '$d(dat("n")) s line=line_"""""" d addline^%mgsqlc(grp,.line)
 s com="" f i=1:1 q:'$d(data(i))  s cname=data(i),line=line_com_$s($d(dat("n",cname)):dat("n",cname),1:""""""),com="_"_dlm_"_"
 d addline^%mgsqlc(grp,.line)
 q
 ;
set ; set a file reference
 s %set=1,^mgtmp($j,"sqlupd",tname)="~1"
 d index
 s ino=$$pkey^%mgsqld(dbid,tname)
 s %upd=($g(pkey("o",ino))'=$g(pkey("n",ino)))
 i '%upd,'%refile d elim
 d char
sete ; set new
 i %retr d getold
 i %upd d getnew
 s inop=$$pkey^%mgsqld(dbid,tname)
 s ino=inop d setnew
 f  s ino=$o(pkey("n",ino)) q:ino=""  i ino'=inop d killold,setnew
 k %data,data,pkey,subt,zn,zo,tn,to,andn,ando,com,com1,out,ltst
 q
 ;
kill ; kill an entity reference
 s %set=0,^mgtmp($j,"sqlupd",tname)="~1"
 d index
kille ; exit
 d getold
 s ino="" f  s ino=$o(pkey("o",ino)) q:ino=""  d killold
 k %data,data,pkey,subt,zn,zo,tn,to,andn,ando,com,com1,out,ltst
 q
 ;
g ; get command
 s line=$s($l(subt):" i "_subt,1:"")_" "_"s"_" "_dat_"="_"$g"_"("_glo_"("_key_")"_zgloz_")" d addline^%mgsqlc(grp,.line)
 q
 ;
gd ; get command with failed definition rejection
 s line=" "_"s"_" "_%z("vdef")_"="_"$d"_"("_glo_"("_key_")"_zgloz_")" s:$l(fail) line=line_" "_"i"_" '"_%z("vdef")_fail d addline^%mgsqlc(grp,.line)
 s line=" "_"s"_" "_dat_"="""" "_"i"_" "_%z("vdef")_"#10 "_"s"_" "_dat_"="_glo_"("_key_")"_zgloz d addline^%mgsqlc(grp,.line)
 q
 ;
s ; set command
 s line=$s($l(subt):" "_"i"_" "_subt,1:"")_" "_"s"_" "_glo_"("_key_")="_dat d addline^%mgsqlc(grp,.line)
 q
 ;
k ; kill command
 s line=$s($l(subt):" "_"i"_" "_subt,1:"")_" "_"k"_" "_glo_"("_key_")" d addline^%mgsqlc(grp,.line)
 q
 ;
dbg ; set up referential actions audit trail
 n arg,args,i
 s line=""
 i '$d(^mgtmp($j,"ra-audit")) q
 s line=^("ra-audit")
 s line=line_",%k(0)="""_glo_""""
 s arg=key s args=$$arg^%mgsqle(arg,.args)
 f i=1:1:args s line=line_",%k("_i_")="_args(i)
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlct" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlct ;(CM) sql compiler - get table details ; 19 jan 2003  7:12 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlct") q
 ;
getf ; get file particulars for each alias
 s con=0
 f tnum=1:1 q:'$d(^mgtmp($j,"from",qnum,tnum))  s tname=$p(^mgtmp($j,"from",qnum,tnum),"~",1),alias=$p(^mgtmp($j,"from",qnum,tnum),"~",2) d getf1 i $l(error) q
 i $l(error) q
 q
 ;
getf1 ; get file particulars for alias alias (fid)
 n x,y
 i tname?@("1"""_%z("dq")_"""1n.n1"""_%z("dq")_"""") d getfv q
 s ino=$$pkey^%mgsqld(dbid,tname) i $d(^mgtmp($j,"from","i",ino,alias)) s ino=^mgtmp($j,"from","i",ino,alias)
 s %d=$$tab^%mgsqld(dbid,tname) s r=%d,%ref=$$ref^%mgsqld(dbid,tname,.ino) s glb=%ref i glb="^sqlspool" s %qid=$p(tname,"(",1) d spl s glb=%spl
 s odel=$p(r,"\",1)
 i odel?1n.n,odel>31,odel<127 s odel=""""_$c(odel)_""""
 i odel?1n.n,odel<32!odel>126 s odel="$char("_odel_")"
 s odel(qnum,tnum)=odel
 s glb(qnum,tnum)=glb
 s sc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 ;
 s (z,com)="" f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) s:x?1a.e x=%z("dsv")_alias_"."_x_%z("dsv") s z=z_com_x,com=","
 s ^mgtmp($j,"key",qnum,tnum)=z
 i ino=$$pkey^%mgsqld(dbid,tname) s key0(qnum,tnum)=^mgtmp($j,"key",qnum,tnum),glb0(qnum,tnum)=glb
 i ino'=0 d getf2
 f i=1:1 q:'$d(^mgtmp($j,"sel",qnum,i))  s x=$p(^mgtmp($j,"sel",qnum,i),%z("dsv"),2)  d getf11
 s y="" f  s y=$o(^mgtmp($j,"from","z",qnum,"join",y)) q:y=""  i $d(^mgtmp($j,"from","z",qnum,"join",y,alias)) s x=alias_"."_y d getf11
 s cname="" f  s cname=$o(^mgtmp($j,"join",qnum,alias,cname)) q:cname=""  d
 . s %d=$$item^%mgsqld(dbid,tname,cname),%s=$$seps^%mgsqld(dbid,tname,cname)
 . s data(qnum,tnum,alias_"."_at)=%d
 . s data(qnum,tnum,alias_"."_at,"s")=%s
 . q
 i $l(error) q
 k ino
 q
 ;
getf11 ; process data item to be retrieved/derived
 i x="*" q
 s cname=x,ext="",f=""
 i x["." s cname=$p(x,".",2),f=$p(x,".",1)
 i f'=alias,f'=alias_"g" q
 s %d=$$item^%mgsqld(dbid,tname,cname),%s=$$seps^%mgsqld(dbid,tname,cname)
 d remap^%mgsqlv2
 i (%d'="")!%defm s data(qnum,tnum,$p(x,".",1,2))=%d,data(qnum,tnum,$p(x,".",1,2),"s")=%s
 q
 ;
getf2 ; get details for primary key (for indexed search)
 n ino
 s ino=$$pkey^%mgsqld(dbid,tname)
 s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) s (key0(qnum,tnum),com)="" f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) s:x?1a.e x=%z("dsv")_alias_"."_x_%z("dsv") s key0(qnum,tnum)=key0(qnum,tnum)_com_x,com=","
 s %ref=$$ref^%mgsqld(dbid,tname,ino) s glb0(qnum,tnum)=%ref
 q
 ;
getfv ; emulate a proper file for dynamic views
 n %k,i,vnum,cname,com
 ;b
 s vnum=$p(tname,%z("dq"),2)
 s ino=$$pkey^%mgsqld(dbid,tname)
 s %k(1)="$j"
 s %k(2)="0"
 s %k(3)=vnum
 s %k(4)=%z("dsv")_alias_"."_"line-no"_%z("dsv")
 s %k="",com="" f i=1:1 q:'$d(%k(i))  s %k=%k_com_%k(i),com=","
 s (key0(qnum,tnum),^mgtmp($j,"key",qnum,tnum))=%k
 s (glb(qnum,tnum),glb0(qnum,tnum))=%z("ctg")
 s odel(qnum,tnum)="$c(1)"
 ; get details for view
 f i=1:1 q:'$d(^mgtmp($j,"v",vnum,i))  s cname=$g(^(i)) s data(qnum,tnum,alias_"."_at)=i_"\\d\",data(qnum,tnum,alias_"."_at,"s")=i
 q
 ;
spl ; reference for sqlspool
 n arc
 s arc=$$get^%mgsql(%qid,"arc")
 i arc="" s %spl="^[$p(%iv(""uci""),"","",1),$p(%iv(""uci""),"","",2)]sqlspool"
 i arc'="" s %spl="^["""_$p(arc,",",1)_""","""_$p(arc,",",2)_"""]sqlspool"
 q
 ;
xfid ; retrieve all indices and superclass for file fid
 k xfid
 s rc=$$ind^%mgsqld(dbid,tname,.%ind) s ino=$$pkey^%mgsqld(dbid,tname) i (ino="")!'$d(%ind(ino)) g xfidx
 s ino="" f  s ino=$o(%ind(ino)) q:ino=""  s xfid(ino)=%ind(ino) k %ind(ino) d xfid1
 s %d=$$tab^%mgsqld(dbid,tname) s dlm=$c(34)_$c($p(%d,"\",1)+0)_$c(34)
xfidx k %ind
 q
 ;
xfid1 ; retrieve data for index
 s sc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 s xfidx=0 f i=1:1 q:'$d(%ind(ino,i))  s cname=%ind(ino,i),xfid(ino,i,1)=cname s:ino=$$pkey^%mgsqld(dbid,tname)&(cname?1a.e) xfidx=xfidx+1,xfidx(cname)=""
 i $d(%ind(ino,"t")) s xfid(ino,"t")=""
 k %ind(ino)
 q
 ;
dtyp ; get attribute details
 i cname'?1a.e q
 i $d(dtyp(cname)) q
 s %d=$$col^%mgsqld(dbid,tname,cname) s dtyp(cname)=$p(%d,"\",5)
 i $d(xfidx(cname)) q
 s %d=$$item^%mgsqld(dbid,tname,cname) i %d'="" s dtyp(cname,"e")=%d
 q
 ;
]]></Routine>


<Routine name="%mgsqlcu" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlcu ;(CM) sql compiler update ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlcu") q
 ;
main ; start
 s %tagz=tag(1),%tagi=%z("pt")_"i",%tdlm=%z("dl")
 s tname=update("update"),alias=$p(tname," ",2),tname=$p(tname," ",1)
 k dtyp d xfid^%mgsqlct
 s line=" "_"k"_" %do,%dn,%dx" d addline^%mgsqlc(grp,.line)
 s %kupd=0,cname="" f i=0:0 s cname=$o(xfidx(cname)) q:cname=""  i $d(update("set",cname)) s %kupd=1
 f i=1:1 q:'$d(xfid(0,i))  s cname=xfid(0,i,1) i cname?1a.e d key
 s cname="" f i=0:0 s cname=$o(update("set",cname)) q:cname=""  i cname?1a.e,'$d(xfidx(cname)) d dat
 s %refile=0 d set^%mgsqlci
 s line=" "_"g"_" "_%tagz d addline^%mgsqlc(grp,.line)
exit ; exit
 k upd,key,nkey,nkeyt,okey,okeyt,pkey,pref,idx,apc,cde,z
 q
 ;
key ; determine values for keys in update
 d dtyp^%mgsqlct
 s key("o",cname)="%do("_dtyp(cname)_")"
 s line=" "_"s"_" "_key("o",cname)_"="_%z("dsv")_alias_"."_cname_%z("dsv") d addline^%mgsqlc(grp,.line)
 i '$d(update("set",cname)) s line=" "_"s"_" "_"%dn("_dtyp(cname)_")="_key("o",cname) d addline^%mgsqlc(grp,.line)
 i '%kupd q
 s key("n",cname)="%dn("_dtyp(cname)_")"
 s var=key("n",cname) d setto
 q
 ;
dat ; determine values for update and set r.i. interface
 d dtyp^%mgsqlct
 s dat("o",cname)="%do("_dtyp(cname)_")"
 s line=" "_"s"_" "_dat("o",cname)_"="_%z("dsv")_alias_"."_cname_%z("dsv") d addline^%mgsqlc(grp,.line)
 s dat("n",cname)="%dn("_dtyp(cname)_")"
 s var=dat("n",cname) d setto
 q
 ;
setto ; reconstruct set-to statement
 n i
 i '$d(update("set",cname)) s line=" "_"s"_" "_var_"="_"%do("_dtyp(cname)_")" d addline^%mgsqlc(grp,.line) q
 f i=1:1 q:'$d(update("set",cname,"zcode",i))  s line=update("set",cname,"zcode",i) d setto1
 q
 ;
setto1 ; add to line
 n i
 s pn=0 i line[%z("dsv") f i=0:0 s pn=pn+2,x=$p(line,%z("dsv"),pn) q:x=""  i x["**set**" s line=$p(line,%z("dsv"),1,pn-1)_var_$p(line,%z("dsv"),pn+1,999) s pn=pn-2
 d addline^%mgsqlc(grp,.line)
 q
 ;
 
]]></Routine>


<Routine name="%mgsqld" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqld ;(CM) data model access points ; 14 aug 2002  4:08 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqld") q
 ;
dbid(dbid) ; schema list
 k dbid
 s dbid="" f  s dbid=$$nxtdbid(dbid) q:dbid=""  s dbid(dbid)=""
 q 1
 ;
nxtdbid(dbid) ; next schema
 n dbid1
 s dbid1=$o(^mgsqld(0,dbid))
 q dbid1
 ;
nxttname(dbid,tname) ; next table
 s tname=$o(^mgsqld(0,dbid,"t",tname))
 q tname
 ;
col(dbid,tname,cname) ; column details
 n %d,type,type1,ano,sm
 s %d=$g(^mgsqld(0,dbid,"t",tname,"tc",cname))
 s type=$p(%d,"\",2)
 s type1="number" i type["varchar" s type1="string"
 s $p(%d,"\",11)=type1
 q %d
 ;
dtype(dbid,tname,cname)
 n %d,type
 i dbid=""!(tname="")!(cname="") q ""
 s %d=$g(^mgsqld(0,dbid,"t",tname,"tc",cname))
 s type=$p(%d,"\",2)
 q type
 ;
tab(dbid,tname) ; table details
 n %d
 s %d=$g(^mgsqld(0,dbid,"t",tname,"t")) i %d="" q %d
 q %d
 ;
pkey(dbid,tname) ; primary key name
 n %d,%pkey
 s %d=$g(^mgsqld(0,dbid,"t",tname,"t"))
 s %pkey=$p(%d,"\",2)
 q %pkey
 ;
ind(dbid,tname,%ind) ; entity indices
 k %ind
 s ino="" f  s ino=$o(^mgsqld(0,dbid,"t",tname,"ti",ino)) q:ino=""  s rc=$$ind1(dbid,tname,ino,.%ind)
 q 1
 ;
ind1(dbid,tname,ino,%ind) ; entity index
 k %ind(ino)
 s %ind(ino)=$$ref(dbid,tname,ino)
 q 1
 ;
ref(dbid,tname,ino) ; entity physical reference for index
 s %ref=$g(^mgsqld(0,dbid,"t",tname,"ti",ino))
 q %ref
 ;
key(dbid,tname,ino,%ind) ; entity index key
 n i
 f i=1:1 q:'$d(^mgsqld(0,dbid,"t",tname,"ti",ino,i))  s %ind(ino,i)=$p(^(i),"\",1)
 q 1
 ;
data(dbid,tname,%data) ; entity data
 n %d,cname
 k %data
 s cname="" f  s cname=$o(^mgsqld(0,dbid,"t",tname,"tc",cname)) q:cname=""  s %d=$$item(dbid,tname,cname) s %data(cname)=%d
 q 1
 ;
item(dbid,tname,cname) ; entity data item
 n %d,sm,cno,nnull
 s %d=$g(^mgsqld(0,dbid,"t",tname,"tc",cname)) i %d="" q %d
 q %d
 ;
seps(dbid,tname,cname) ; trailing keys for separately subscripted items
 n pce,smeth,ssubs
 s %d=$$item(dbid,tname,cname),smeth=$p(%d,"\",3),pce=$p(%d,"\",1)
 s ssubs="" i smeth="s" s ssubs=$g(^mgsqld(0,dbid,"t",tname,"tc",cname,"s"))
 i ssubs="" s ssubs=pce
 q ssubs
 ;
defk(dbid,tname,cname) ; item defined in entity primary key
 n i,ino
 s %defk=0
 s ino=$$pkey(dbid,tname) i ino="" q
 f i=1:1 q:'$d(^mgsqld(0,dbid,"t",tname,"ti",ino,i))  i $g(^(i))=cname s %defk=1 q
 q %defk
 ;
defd(dbid,tname,cname) ; item defined in entity data
 s %defd=$d(^mgsqld(0,dbid,"t",tname,"tc",cname))
 q %defd
 ;
defkdi(dbid,tname,cname,ino) ; item defined in specific entity index
 n i
 s %def=0
 f i=1:1 q:'$d(^mgsqld(0,dbid,"t",tname,"ti",ino,i))  i $g(^(i))=cname s %def=1 q
 q %def
 ;
indexr(dbid,tname,ino,xsub) ; retrieve index details
 k xsub
 s tname=id
 s rc=$$ind1(dbid,tname,ino,.%ind) s ino=0 f  s ino=$o(%ind(ino)) q:ino=""  s xsub(ino)=%ind(ino) d indexr1
 q 1
 ;
indexr1 ; key + aggregates
 n y,z
 s rc=$$key(dbid,tname,ino,.%ind)
 s (xsub(ino,"k"),com)="" f i=1:1 q:'$d(%ind(ino,i))  s y=%ind(ino,i),xsub(ino,i)=y,xsub(ino,"k")=xsub(ino,"k")_com_y,com=","
 q 1
 
indexw(dbid,tname,ino,%ind)   ; write index details
 n i,%indo
 k ^mgsqld(0,dbid,"t",tname,"ti",ino)
 s ^mgsqld(0,dbid,"t",tname,"ti",ino)=%ind(ino)
 f i=1:1 q:'$d(%ind(ino,i))  s ^mgsqld(0,dbid,"t",tname,"ti",ino,i)=%ind(ino,i)
 q 1
 ;
nxtpname(dbid,pname) ; next proedure
 s pname=$o(^mgsqld(0,dbid,"p",pname))
 q pname
 ;
prc(dbid,pname) ; process details
 n %d
 s %d=$g(^mgsqld(0,dbid,"p",pname,"p")) i %d="" q %d
 q %d
 ;
pdata(dbid,pname,%data) ; process data
 n %d,cname
 k %data
 s cname="" f  s cname=$o(^mgsqld(0,dbid,"p",pname,"pc",cname)) q:cname=""  s %d=$$pitem(dbid,pname,cname) s %data(cname)=%d
 q 1
 ;
pitem(dbid,pname,cname) ; process data item
 n %d,sm,cno,nnull
 s %d=$g(^mgsqld(0,dbid,"p",pname,"pc",cname)) i %d="" q %d
 q %d
 ;
ctable(dbid,tname,cols) ; create table
 n idx,idxx,col,i,ii,in,cname,ano,ano1,atu,pk,glo,dlm,olddata,cno,sm,type,typeu,nnull,cons,consu,subs
 s glo=$g(tname("global")) i $e(glo,1)'="^" s glo="^"_glo
 s dlm=$g(tname("delimiter")) s dlm=$a(dlm)
 i glo="" s glo="^"_tname
 i dlm="" s dlm=35
 s rc=$$data(0,tname,.olddata)
 s rc=$$dtable(dbid,tname)
 f i=1:1 q:'$d(cols(i))  d
 . s cname=$p(cols(i)," ",1),atu=$$lcase^%mgsqls(cname) i atu="constraint" d  q
 . . s pk=$p(cols(i)," ",2),idx=$p($p(cols(i),"(",2),")",1)
 . . s idx(pk)=glo
 . . f ii=1:1:$l(idx,",") s cname=$p(idx,",",ii),idx(pk,ii)=cname,idxx(pk,cname)=ii
 . . q
 . q
 s ano=0
 f i=1:1 q:'$d(cols(i))  d
 . s nnull=0
 . s cname=$p(cols(i)," ",1),atu=$$lcase^%mgsqls(cname) i atu="constraint" q
 . s type=$p(cols(i)," ",2),typeu=$$lcase^%mgsqls(type)
 . f ii=3:1:$l(cols(i)," ") s name=$p(cols(i)," ",ii) d
 . . i name="" q
 . . s name=$$lcase^%mgsqls(name)
 . . i name="not",$$lcase^%mgsqls($p(cols(i)," ",ii+1))="null" s nnull=1
 . . i name="separate" s cols(i,name)="" d  i ($l(subs,"""")#2) s cols(i,name)=$$rstring^%mgsqlp(subs)
 . . . n n,x
 . . . s subs=""
 . . . s x=$p(cols(i)," ",ii+1,999)
 . . . i $e(x)="(" s x=$e(x,2,999) f n=1:1 s subs=$p(x,")",1,n) q:($l(subs,"""")#2)
 . . . i subs'="" q
 . . . f n=1:1 s subs=$p(x," ",1,n) q:($l(subs,"""")#2)
 . . . q
 . . i name="derived" s cols(i,name)=$p(cols(i)," ",ii+1)
 . . q
 . s cons=$p(cols(i)," ",3,999),consu=$$lcase^%mgsqls(cons)
 . s nnull=0 i consu["not null" s nnull=1
 . s ano1=0 i '$d(idxx(pk,cname)) s ano=ano+1,ano1=ano
 . s cno=$p($g(olddata(cname)),"\",5)+0 i 'cno s cno=$$cno()
 . s sm="d" i $d(cols(i,"separate")) s sm="s"
 . s col(cname)=ano1_"\"_typeu_"\"_sm_"\"_nnull_"\"_cno
 . s name="" f  s name=$o(cols(i,name)) q:name=""  s col(cname,name)=cols(i,name)
 . q
 ;b
 s ^mgsqld(0,dbid,"t",tname,"t")=dlm_"\"_pk
 s cname="" f  s cname=$o(col(cname)) q:cname=""  d
 . s ^mgsqld(0,dbid,"t",tname,"tc",cname)=col(cname)
 . s name="" f  s name=$o(col(cname,name)) q:name=""  s ^mgsqld(0,dbid,"t",tname,"tc",cname,$e(name,1))=col(cname,name)
 . q
 s in="" f i=1:1 s in=$o(idx(in)) q:in=""  d
 . s ^mgsqld(0,dbid,"t",tname,"ti",in)=idx(in)
 . f i=1:1 q:'$d(idx(in,i))  s ^mgsqld(0,dbid,"t",tname,"ti",in,i)=$$rstring^%mgsqlp(idx(in,i))
 q 1
 ;
dtable(dbid,tname) ; delete table
 k ^mgsqld(0,dbid,"t",tname)
 q 1
 ;
cindex(dbid,tname,ino,cols) ; create index
 n %ind
 s glo=$g(tname("global")) i $e(glo,1)'="^" s glo="^"_glo
 i glo="" s glo="^"_tname_ino
 s %ind(ino)=glo
 f i=1:1 q:'$d(cols(i))  s %ind(ino,i)=$$rstring^%mgsqlp(cols(i))
 s rc=$$indexw^%mgsqld(dbid,tname,ino,.%ind)
 q 1
 ;
cproc(dbid,pname,cols) ; create procedure
 n idx,idxx,col,i,ii,in,cname,ano,ano1,atu,pk,rou,dlm,olddata,cno,sm,type,typeu,nnull,cons,consu
 s rou=$p(pname,"_",2)_"^"_$p(pname,"_",1),dlm=35
 s rc=$$dproc(dbid,pname)
 s ano=0
 f i=1:1 q:'$d(cols(i))  d
 . s cname=$p(cols(i)," ",1),atu=$$lcase^%mgsqls(cname) i atu="constraint" q
 . s type=$p(cols(i)," ",2),typeu=$$lcase^%mgsqls(type)
 . s cons=$p(cols(i)," ",3,999),consu=$$lcase^%mgsqls(cons)
 . s nnull=0 i consu["not null" s nnull=1
 . s ano=ano+1
 . s cno=0
 . s sm="d"
 . s col(cname)=ano_"\"_typeu_"\"_sm_"\"_nnull_"\"_cno
 . q
 s ^mgsqld(0,dbid,"p",pname,"p")=dlm_"\"_rou
 s cname="" f  s cname=$o(col(cname)) q:cname=""  s ^mgsqld(0,dbid,"p",pname,"pc",cname)=col(cname)
 q 1
 ;
dproc(dbid,tname) ; delete table
 k ^mgsqld(0,dbid,"p",pname)
 q 1
 ;
cno() ; next column name number
 l +^mgsqld(0)
 s x=$g(^mgsqld(0))+1,^mgsqld(0)=x
 l -^mgsqld(0)
 q x
 ;
 
]]></Routine>


<Routine name="%mgsqle" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqle ;(CM) SQL : Embedded expressions ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqle") q
 ;
ex(outv,ex,word,code,sqlfn,error) ; 'ex' expression
 n i,en,fn,fun,ops
 s en=0,fn=0,error=""
 s ops=$$ops(.ops)
 d word^%mgsqle1(en,.ex,.word,.sqlex,.ops,.error) i $l(error) g exe
 d vrfy^%mgsqle1(en,.word,.ops,.error) i $l(error) g exe
 d brac^%mgsqle1(en,.word,.ops,.error) i $l(error) g exe
 f i=1:1 q:'$d(word(en,i))  s fun=word(en,i) i fun[%z("df") s fun=$p(fun,%z("df"),2),fn=$$fun(fun,.sqlfn,.ops,.error) s word(en,i)=%z("df")_fn_%z("df") i $l(error) q
 i $l(error) g exe
 d comp^%mgsqle2(en,outv,.word,.sqlfn,.sqlex,.code,.error)
exe ; exit
 q
 ;
where(ex,word,error) ; validate sql 'where' predicate
 n en,ops
 s en=0,error=""
 s ops=$$ops(.ops)
 d word^%mgsqle1(en,.ex,.word,.sqlex,.ops,.error) i $l(error) g wheree
 d vrfy^%mgsqle1(en,.word,.ops,.error) i $l(error) g wheree
 d brac^%mgsqle1(en,.word,.ops,.error) i $l(error) g wheree
wheree ; exit
 q
 ;
arg(arg,args) ; produce argument list from arguments string
 n pn,an,i,str,obr,cbr,chr,arg1
 k args s pn=0,an=0
arg1 s pn=pn+1 i pn>$l(arg,",") g argx
 s arg1=$p(arg,",",pn)
 f i=pn+1:1 q:i>$l(arg,",")!($l(arg1,"""")#2)  s arg1=arg1_","_$p(arg,",",i),pn=pn+1
 i arg1["(" s str=arg1_","_$p(arg,",",pn+1,999),(obr,cbr)=0 f i=1:1 s chr=$e(str,i) q:chr=""  i $l($e(str,1,i),"""")#2 s:chr="(" obr=obr+1 s:chr=")" cbr=cbr+1 i chr=",",obr=cbr q
 i arg1["(" s arg1=$e(str,1,i-1),pn=pn+$l(arg1,",")-1
 s an=an+1,args(an)=arg1
 g arg1
argx s args=an
 q args
 ;
ops(ops) ; operator list
 n i,op
 s ops=":*:/:\:#:-:+:=:is:'=:<>:!=:?:'?:>:<:'>:'<:>=:<=:'>=:'<=:[:'[:]:']:_:':in:not in:like:not like:exists:not exists:between:not between:and:&:or:!:"
 f i=2:1:$l(ops,":") s op=$p(ops,":",i) i op'="" s ops(op)=i
 q ops
 ;
oper(ops,props,neops) ; get list of valid operators
 n x
 s ops=$$ops(.x)
 ; list of operators which may be translated into physical restrictions
 s props=":=:>:<:'>:'<:>=:<=:'>=:'<=:]:']:"
 ; list of operators which may be used to exclude null only
 s neops=":'=:[:"
 s ops("=")="=",ops("'=")="'="
 s ops(">")="<",ops("<")=">"
 s ops("'>")="'<",ops("'<")="'>"
 s ops(">=")="<=",ops("<=")=">="
 s ops("]")="<",ops("']")="'<"
 s ops("+")="-",ops("-")="+"
 s ops("*")="/",ops("/")="*"
 q ops
 ;
fun(fun,sqlfn,ops,error) ; decompose function fun (number fn)
 n funlin,pars,fn
 s fn=0
 s fun=$$fun1(fun)
 i fun'?1"{a}".e s error="invalid function "_fun,error(5)="HY000" q fn
fun2 i fun'["{a}" g funx
 s funlin=$p(fun,"{a}",$l(fun,"{a}")),fn=$i(sqlfn)
 s wrd=$$funlin(funlin,.error) i $l(error) g funx
 s fun=$p(fun,"{a}",1,$l(fun,"{a}")-1)_%z("df")_fn_%z("df")_$e(funlin,$l(wrd)+1,999),sqlfn(fn)=wrd
 s pars=$p(wrd,"(",2,999),pars=$e(pars,1,$l(pars)-1)
 d pars(funlin,pars,.sqlfn,fn,.ops,.error) i $l(error) g funx
 g fun2
funx ; exit
 q fn
 ;
fun1(fun) ; insert leading delimiter '{a}' for each nested function
 n i,pn,pre,post
 s pn=0
fun11 s pn=pn+1 i pn>$l(fun,"(") q fun
 s pre=$p(fun,"(",1,pn),post=$p(fun,"(",pn+1,999)
 i pre=""!(post="")!(pre=fun)!'($l(pre,"""")#2) g fun11
 f i=$l(pre):-1:0 i " ,("[$e(pre,i) q
 s fun=$e(pre,1,i)_"{a}"_$e(pre,i+1,999)_"("_post
 g fun11
 ;
pars(funlin,pars,sqlfn,fn,ops,error) ; get parameter list for function
 n select,pn,parn,par,i
 s select=0 i funlin?1"$s(".e s select=1
 s pn=0,parn=0
pars1 s pn=pn+1 i pn>$l(pars,",") g parsx
 s par=$p(pars,",",pn)
 f i=pn+1:1 q:i>$l(pars,",")!($l(par,"""")#2)  s par=par_","_$p(pars,",",i),pn=pn+1
 i select s select("a",2)=$p(par," : ",2,999),par=$p(par," : ",1)
pars11 s parn=parn+1
 d pars2(par,parn,.sqlfn,fn,.ops,.error) i $l(error) g parsx
 i select,$d(select("a",2)) s par=select("a",2) k select("a") g pars11
 g pars1
parsx ; exit
 q
 ;
pars2(par,parn,sqlfn,fn,ops,error) ; validate/bracket expression for parameter
 n en,ex,pn,word
 i par="" q  ; niladic
 s en="f"
 i par?1u1":"1a.e s word(en,1)=par,entpar(par)="" g pars3
 s ex(1)=par d word^%mgsqle1(en,.ex,.word,.sqlex,.ops,.error) i $l(error) q
 d vrfy^%mgsqle1(en,.word,.ops,.error) i $l(error) q
 d brac^%mgsqle1(en,.word,.ops,.error) i $l(error) q
pars3 f i=1:1 q:'$d(word(en,i))  s sqlfn(fn,"p",parn,i)=word(en,i)
 k word(en)
 q
 ;
funlin(funlin,error) ; extract function & parameters wrd from funlin
 n obr,cbr,chr,i,wrd
 s (obr,cbr)=0 f i=1:1:$l(funlin) s chr=$e(funlin,i) i "()"[chr,$l($e(funlin,1,i),"""")#2 s:chr="(" obr=obr+1 s:chr=")" cbr=cbr+1 i obr=cbr q
 s wrd=$e(funlin,1,i)
 i 'obr!(obr'=cbr) s error="error in function "_wrd,error(5)="HY000" q wrd
 q wrd
 ;
 
 
]]></Routine>


<Routine name="%mgsqle1" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqle1 ;(CM) SQL : Bracket expression in word array ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqle1") q
 ;
sqlex(ctx,sqlex,var) ; sql variables in expression
 i $d(sqlex(ctx,"x",var)) q
 s sqlex=$i(sqlex(ctx,"e"))
 s sqlex(ctx,"e",sqlex)=var,sqlex(ctx,"x",var)=sqlex
 q
 ;
exbr(tmp,ops,error) ; extract individual bracketed sub-statements and set in temporary array
 n sn,i,ok,wn1,wn2
 s sn=0
exbr1 i '$d(tmp("x",0,"(")) g exbrx
 s ok=0,wn1="" f  s wn1=$o(tmp("e",0,wn1)) q:wn1=""!ok  i tmp("e",0,wn1)="(" s wn2=wn1 f  s wn2=$o(tmp("e",0,wn2)) q:wn2=""  q:tmp("e",0,wn2)="("  i tmp("e",0,wn2)=")" s ok=1 q
 s wn1=wn1-1
 i 'ok s error="error in bracketing",error(5)="HY000" q
 s sn=sn+1,wn=0 s tmp("e",0,wn1)="{{"_sn_"{{" k tmp("x",0,"(",wn1)
 f  s wn1=$o(tmp("e",0,wn1)),wrd=tmp("e",0,wn1)  k tmp("e",0,wn1) d tmpxk(.tmp,0,wrd,wn1) q:wn1=wn2  s wn=wn+1,tmp("e",sn,wn)=wrd d tmpxs(.tmp,sn,wrd,wn,.ops)
 g exbr1
exbrx ; tidy up holes in primary expression (if necessary)
 i '$d(tmp("e",1)) q
 k tmp("x",0) s wn="" f i=1:1 s wn=$o(tmp("e",0,wn)) q:wn=""  s wrd=tmp("e",0,wn) k tmp("e",0,wn) s tmp("e",0,i)=wrd d tmpxs(.tmp,0,wrd,i,.ops)
 q
 ;
oper(tmp,ops,error) ; for each sub-statement parse operator string in order of precedence
 n sn,op,opn
 f sn=0:1 q:'$d(tmp("e",sn))  f opn=1:1:$l(ops,":") s op=$p(ops,":",opn) i op'="",op'="'" d oper1(.tmp,sn,op,.ops,.error)
 q
 ;
oper1(tmp,sn,op,ops,error) ; find all occurances of current operator in sub-statement
 n wn
 i '$d(tmp("x",sn,op)) q
 s wn="" f  s wn=$o(tmp("x",sn,op,wn)) q:wn=""  d obr(.tmp,sn,wn),cbr(.tmp,sn,wn)
 q
 ;
cbr(tmp,sn,wn) ; insert 'closed' bracket
 n obr,cbr,x,wrd
 s (obr,cbr)=0
 i '$d(tmp("e",sn,wn+1,"o")) f x=wn+1:1 q:'$d(tmp("e",sn,x))  s wrd=tmp("e",sn,x) s:$d(tmp("e",sn,x,"o")) obr=obr+tmp("e",sn,x,"o") s:$d(tmp("e",sn,x,"c")) cbr=cbr+tmp("e",sn,x,"c") i obr=cbr,ops'[(":"_wrd_":"),$d(tmp("e",sn,x+1)),tmp("e",sn,x+1)'=op q
 i $d(tmp("e",sn,wn+1,"o")) f x=wn+1:1 q:'$d(tmp("e",sn,x))  s wrd=tmp("e",sn,x) s:$d(tmp("e",sn,x,"o")) obr=obr+tmp("e",sn,x,"o") s:$d(tmp("e",sn,x,"c")) cbr=cbr+tmp("e",sn,x,"c") i obr>0,obr=cbr,$d(tmp("e",sn,x,"c")),$d(tmp("e",sn,x+1)),tmp("e",sn,x+1)'=op q
 i '$d(tmp("e",sn,x)) s x=x-1
 s tmp("e",sn,x,"c")=$s($d(tmp("e",sn,x,"c")):tmp("e",sn,x,"c")+1,1:1),wn=x
 q
 ;
obr(tmp,sn,wn) ; insert 'open' bracket
 n obr,cbr,x,wrd
 s (cbr,obr)=0
 i '$d(tmp("e",sn,wn-1,"c")) s x=wn-1
 i $d(tmp("e",sn,wn-1,"c")) f x=wn-1:-1:1 s:$d(tmp("e",sn,x,"c")) cbr=cbr+tmp("e",sn,x,"c") s:$d(tmp("e",sn,x,"o")) obr=obr+tmp("e",sn,x,"o") i cbr>0,cbr=obr q
 i '$d(tmp("e",sn,x)) q
 i $d(tmp("e",sn,x-1)),tmp("e",sn,x-1)="'" s x=x-1
 s tmp("e",sn,x,"o")=$s($d(tmp("e",sn,x,"o")):tmp("e",sn,x,"o")+1,1:1)
 q
 ;
asm(en,tmp,word) ; re-assemble complete statement from processed sub-statements
 n sn1,wn,wn1
 s sn1=0,wn1=0,wn=0
 d asm1(en,.tmp,.word,.wn,sn1,wn1)
 q
 ;
asm1(en,tmp,word,wn,sn1,wn1) ; assemble statement
 n wrd,i
asm11 s wn1=wn1+1 i '$d(tmp("e",sn1,wn1)) q
 s wrd=tmp("e",sn1,wn1)
 i $d(tmp("e",sn1,wn1,"o")) f i=1:1:tmp("e",sn1,wn1,"o") s wn=wn+1,word(en,wn)="("
 i $e(wrd,1,2)="{{" d asm2(en,.tmp,.word,.wn,wrd)
 i $e(wrd,1,2)'="{{" s wn=wn+1,word(en,wn)=wrd
 i $d(tmp("e",sn1,wn1,"c")) f i=1:1:tmp("e",sn1,wn1,"c") s wn=wn+1,word(en,wn)=")"
 g asm11
 ;
asm2(en,tmp,word,wn,wrd) ; swap out to nested sub expression
 n sn1,wn1
 s sn1=$p(wrd,"{{",2)
 s wn1=0
 d asm1(en,.tmp,.word,.wn,sn1,wn1)
 q
 ;
brac(en,word,ops,error) ; bracket expression in word array
 n i,tmp,wrd
 f i=1:1 q:'$d(word(en,i))  s wrd=word(en,i),tmp("e",0,i)=wrd d tmpxs(.tmp,0,wrd,i,.ops) k word(en,i)
 d exbr(.tmp,.ops,.error) i $l(error) g brace
 d oper(.tmp,.ops,.error)
 d asm(en,.tmp,.word)
brace ; exit
 q
 ;
word(en,ex,word,sqlex,ops,error) ; generate word array from expression lines en(1->n)
 n lin,ln
 s lin="" f ln=1:1 q:'$d(ex(ln))  s lin=lin_ex(ln)
 d word1(lin,.word,.fun,.sqlex,.ops,.error)
 d type(en,.word,.sqlex)
 q
 ;
word1(lin,word,fun,sqlex,ops,error) ; decompose line lin
 n pn,wn,i,wrd,wrd1,wrduc,nwrd,obr,cbr,like,mpm,in,between,extvar,ok,in,like,mpm,between
 f  q:$e(lin)'=" "  s lin=$e(lin,2,999)
 s pn=0,wn=0,in="",like="",mpm="",between=""
word2 s pn=pn+1 i pn>$l(lin," ") q
 s wrd=$p(lin," ",pn)
 f i=pn+1:1 q:i>$l(lin," ")!($l(wrd,"""")#2)  s wrd=wrd_" "_$p(lin," ",i),pn=pn+1
 s obr=0 f i=1:1:$l(wrd) q:$e(wrd)'="("  s obr=obr+1,wrd=$e(wrd,2,999) i $d(in) q
 i wrd="" s cbr=0 g word3
 s wrduc=$$ucase^%mgsqls(wrd)
 i wrd="missing_value" s wrd="$$mv^%mgsqls()"
 i wrd="current_date" s wrd="$$cdate^%mgsqls()"
 i wrd="current_time" s wrd="$$ctime^%mgsqls()"
 i wrd="current_timestamp" s wrd="$$ts^%mgsqls()"
 i wrd?1"$"1a.e1"("1e.e s wrd=$$func(lin,.pn,wrd,.error) i $l(error) q
 i wrd?1"$$"1a.e1"("1e.e s wrd=$$func(lin,.pn,wrd,.error) i $l(error) q
 i wrd?1a.a1"("1e.e1")".e s wrd1=$p(wrd,")",1)_")" d sqlex(0,.sqlex,wrd1) s wrd=%z("dsv")_wrd1_%z("dsv")_$p(wrd,")",2,999)
 s cbr=0 f i=$l(wrd)-1:1 q:$e(wrd,$l(wrd))'=")"  s wrd=$e(wrd,1,$l(wrd)-1),cbr=cbr+1 i $d(in) q
 i wrd=""!(wrd[%z("df"))!(wrd[%z("dev"))!(wrd[%z("dsv"))!(wrd[%z("dq")) g word3
 i wrd?1"{"1a.e,wrd=lin d sqlex(1,.sqlex,wrd) s wrd=%z("dev")_wrd_%z("dev") g word3
 ; translate logical operators into physical equivalents
 i wrduc="is" s nwrd=$$ucase^%mgsqls($p(lin," ",pn+1)) i nwrd="not" s wrd=wrd_" "_nwrd,wrduc=wrduc_" "_nwrd,pn=pn+1
 i wrduc="not" s nwrd=$$ucase^%mgsqls($p(lin," ",pn+1)) i nwrd="like"!(nwrd="in")!(nwrd="exists")!(nwrd="after")!(nwrd="before")!(nwrd="null") s wrd=wrd_" "_nwrd,wrduc=wrduc_" "_nwrd,pn=pn+1
 i like'="" s like=$$like^%mgsqle2(.wrd,.error) q:$l(error)  g word3
 i wrd="like"!(wrd="not like") s like=wn
 i mpm'="" s mpm=$$mpm^%mgsqle2(.wrd,.error) q:$l(error)  g word3
 i wrd="?"!(wrd="'?") s mpm=wn
 i in'="" s in=$$in^%mgsqle2(en,.wrd,.word,.wn,obr,cbr,.error) q:$l(error)  g word2
 i wrd="in"!(wrd="not in"),$p(lin," ",pn+1)'[%z("dq") s in=wn
 i between'="" s between=$$between^%mgsqle2(en,.wrd,.word,.wn,obr,cbr,.error) q:$l(error)  g word2
 i wrd="between"!(wrd="not between") s between=wn
 i wrduc="is" s wrd="=" g word3
 i wrduc="is not" s wrd="'=" g word3
 i wrduc="null" s wrd="""""" g word3
 i wrd="<>"!(wrd="!=") s wrd="'=" g word3
 s wrd=$s(wrd=">=":"'<",wrd="<=":"'>",wrd="and":"&",wrd="or":"!",wrd="not":"'",wrd="like":"?",wrd="not like":"'?",1:wrd)
 i $d(ops(wrd)) g word3
 i wrd?1"""".e1"""",($l(wrd,"""")#2) g word3
 i wrd[%z("ds") g word3
 i wrd?.1"-".n.1"."1n.n g word3
 i $e(wrd)="[" s wrd=$e(wrd,2,999)
 i $e(wrd,$l(wrd))="]" s wrd=$e(wrd,1,$l(wrd)-1)
 i wrd?1a.e1"."1a.e!(wrd?.1"."1a.e) s extvar=0,ok=$$word4(wrd) i ok d sqlex(0,.sqlex,wrd) s wrd=%z("dsv")_wrd_%z("dsv") g word3
 i wrd?1a.e1"."1"{".e1"}"1"."1a.e d sqlex(0,.sqlex,wrd) s wrd=%z("dsv")_wrd_%z("dsv") g word3
 i wrd?1":"1a.e s wrd=$p(wrd,":",2,999),extvar=1,ok=$$word4(wrd) i ok d sqlex(1,.sqlex,wrd) s wrd=%z("dev")_wrd_%z("dev") g word3
 s error="invalid item "_wrd,error(5)="HY000" q
word3 ; valid word found
 f i=1:1:obr s wn=wn+1,word(en,wn)="("
 i wrd="exists"!(wrd="not exists") s wn=wn+1,word(en,wn)=1
 i $l(wrd) s wn=wn+1,word(en,wn)=wrd
 f i=1:1:cbr s wn=wn+1,word(en,wn)=")"
 g word2
 ;
word4(wrd) ; validate sql variable wrd
 n ok,wrd1
 s ok=0,wrd1=wrd
 s wrd1=$tr(wrd1,"-_","")
 f  q:wrd1'["."  s wrd1=$p(wrd1,".",1)_$p(wrd1,".",2,999)
 i 'extvar,wrd1["$" s wrd1=$p(wrd1,"$",1)_$p(wrd1,"$",2,999)
 i wrd1[";" s wrd1=$p(wrd1,";",1)_$p(wrd1,";",2,999)
 i wrd1?1a.an s ok=1 q ok
 q ok
 ;
func(lin,pn,wrd,error) ; extract function
 n lin1,spcn,funlin
 s spcn=$l(wrd," ")-1
 s funlin=wrd_" "_$p(lin," ",pn+1,999)
 s lin1=$e(funlin,$l(wrd)+1,999)
 s lin1=$p(lin1," ",1) i lin1'?.")" s error="error in syntax after function "_wrd,error(5)="HY000" q wrd
 s wrd=%z("df")_wrd_%z("df")_lin1,pn=pn+$l(wrd," ")-1-spcn
 q wrd
 ;
vrfy(en,word,ops,error) ; verify statement in word array
 n wn,wtyp,lwtyp,obr,cbr,wrd,wrd1
 s wn=0,(wtyp,lwtyp)="",(obr,cbr)=0
vrfy1 s wn=wn+1 i '$d(word(en,wn)) g vrfyx
 s wrd=word(en,wn)
 i wrd="(" s obr=obr+1 g vrfy1
 i wrd=")" s cbr=cbr+1 g:cbr'>obr vrfy1 s error="error in bracketing",error(5)="HY000" q
 i wrd="'" s wrd1="" s:$d(word(en,wn+1)) wrd1=word(en,wn+1) i wrd1'[%z("dev"),wrd1'[%z("dsv"),wrd1'[%z("df"),wrd1'="(" s error="the 'not' operator must preceed a variable or sub-expression",error(5)="HY000" q
 i wrd="'" g vrfy1
 s wtyp=$s($d(ops(wrd)):"o",1:"c")
 i wtyp="o",lwtyp'="c" s error=$$error(en,.word,wn,"an operator must be preceeded by a constant"),error(5)="HY000" q
 i wtyp="c",$l(lwtyp),lwtyp'="o" s error=$$error(en,.word,wn,"a constant must be preceeded by an operator"),error(5)="HY000" q
 i '$l(lwtyp),wtyp'="c" s error=$$error(en,.word,wn,"the first word in an expression should be a constant"),error(5)="HY000" q
 s lwtyp=wtyp
 g vrfy1
vrfyx ; line verification complete
 i lwtyp'="c" s error=$$error(en,.word,wn,"the last word in an expression should be a constant"),error(5)="HY000" q
 i cbr'=obr s error="the number of open and closed brackets should be equal",error(5)="HY000" q
 q
 ;
error(en,word,wn,error) ; form helpful error message
 n x,y,i
 s x="" f i=wn-5:1:wn+5 i $d(word(en,i)) s y=word(en,i) s:y[%z("dsv") y=$p(y,%z("dsv"),2) s:y[%z("dev") y=$p(y,%z("dev"),2) s x=x_" "_y
 s error=error_":"_x
 q error
 ;
type(en,word,sqlex) ; work out pointer to data type
 n var,wrd
 s var="" f  s var=$o(sqlex(1,"x",var)) q:var=""  i '$d(sqlex(1,"type",var)) d type1(var)
 q
 ;
type1(en,word,var) ; find variable in expression
 n wn,i,wrd,alias,tname,cname,qnum,ok
 f wn=1:1 q:'$d(word(en,wn))  i word(en,wn)[%z("dev"),$p(word(en,wn),%z("dev"),2)=var q
 i '$d(word(en,wn)) q
 s ok=0 f i=wn:1:1 q:'$d(word(en,i))  s wrd=word(en,i) q:wrd="&"!(wrd="!")  i wrd[%z("dsv") s wrd=$p(wrd,%z("dsv"),2) i wrd?1a.e1"."1a.e s ok=1 q
 i ok g type2
 s ok=0 f i=wn:-1:1 s wrd=word(en,i) q:wrd="&"!(wrd="!")  i wrd[%z("dsv") s wrd=$p(wrd,%z("dsv"),2) i wrd?1a.e1"."1a.e s ok=1 q
 i ok g type2
 q
type2 ; file type
 s alias=$p(wrd,".",1),cname=$p(wrd,".",2)
 s ok=0 f qnum=1:1 q:'$d(^mgtmp($j,"from","x",qnum))  i $d(^mgtmp($j,"from","x",qnum,alias)) s tname=$p(^mgtmp($j,"from",qnum,^mgtmp($j,"from","x",qnum,alias)),"~",1),ok=1 q
 i ok s sqlex(1,"type",var)=tname_"."_cname
 q
 ;
tmpxs(tmp,sn,wrd,wn,ops) ; set node in snx array
 i $l(wrd)>32 q
 i '$d(ops(wrd)),wrd'="(",wrd'=")" q
 s tmp("x",sn,wrd,wn)=""
 q
 ;
tmpxk(tmp,sn,wrd,wn) ; remove node from snx array
 i $l(wrd)>32 q
 k tmp("x",sn,wrd,wn)
 q
 ;
]]></Routine>


<Routine name="%mgsqle2" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqle2 ;(CM) SQL : Compile code for an expression ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqle2") q
 ;
comp(en,outv,word,sqlfn,sqlex,code,error) ; compile expression
 n wrdl
 d lines(en,.word,.wrdl)
 d code(en,.wrdl,.sqlfn,.sqlex,outv,.code)
compe ; exit
 q
 ;
addline(code,line) ; add line of code
 s code($i(code))=line
 q
 ;
lines(en,word,wrdl) ; translate word array into line arrays for coding
 n wrd,lno,wno,wno1,obr,cbr
 s lno=0
lines1 s (wno,obr)=0,cbr=""
 f  s wno=$o(word(en,wno)) q:wno=""  s wrd=word(en,wno) q:wrd=")"  i wrd="(" s obr=wno
 k word(en,obr)
 s lno=lno+1
 s cbr=wno i $l(cbr) s word(en,cbr)=%z("de")_lno_%z("de")
 s wno1=0,wno=obr
 f  s wno=$o(word(en,wno)) q:wno=""!(wno=cbr)  s wno1=wno1+1,wrdl(lno,wno1)=word(en,wno) k word(en,wno)
 i obr=0 q
 g lines1
 ;
code(en,wrdl,sqlfn,sqlex,outv,code) ; generatate code for each line
 n ln,exp,expx,offs,tmp,line
 s ln=0,expx="",offs=$l(outv)+9
code1 s ln=ln+1 i '$d(wrdl(ln)) g code3
 s exp=$$line(ln,.wrdl,.sqlfn,.sqlex,.code,.error) i $l(error) q
 f  q:exp'[%z("de")  d code2(en,.exp,.tmp,offs)
 s tmp(ln)=exp
 g code1
code3 ; insert line(s) into routine
 s ln=ln-1
 s tmp(ln)=" "_"s"_" "_%z("dsv")_outv_%z("dsv")_"="_tmp(ln)
 s ln="" f  s ln=$o(tmp(ln)) q:ln=""  s line=tmp(ln) d addline(.code,line)
 q
 ;
code2(en,exp,tmp,offs) ; try to insert sub-lines into current line
 n ln
 s ln=$p(exp,%z("de"),2)
 i ($l(exp)+$l(tmp(ln))+offs)<240 s exp=$p(exp,%z("de"),1)_"("_tmp(ln)_")"_$p(exp,%z("de"),3,999) k tmp(ln) q
 s exp=$p(exp,%z("de"),1)_%z("pv")_"("_ln_")"_$p(exp,%z("de"),3,999)
 s tmp(ln)=" "_"s"_" "_%z("pv")_"("_ln_")="_tmp(ln)
 q
 ;
line(ln,wrdl,sqlfn,sqlex,code,error) ; process individual line
 n wno,wrd,exp
 s wno=0,exp=""
line1 s wno=wno+1 i '$d(wrdl(ln,wno)) q exp
 s wrd=wrdl(ln,wno)
 f  q:wrd'[%z("df")  s wrd=$$fun(wrd,.sqlfn) q:$l(error)
 i error'="" q exp
 i wrd?1a.u1"."1a.e!(wrd?1a.u1"("1a.e1")") d sqlex^%mgsqle1(0,.sqlex,wrd) s wrd=%z("dsv")_wrd_%z("dsv")
 s exp=exp_wrd
 g line1
 ;
fun(wrd,sqlfn) ; generate code for in-line functions
 n code,fn,pre,post
 s code=""
 s pre=$p(wrd,%z("df"),1),post=$p(wrd,%z("df"),3,999)
 s fn=$p(wrd,%z("df"),2)
 s fun=sqlfn(fn),fun=$p(fun,"(",1)
 i fun?1"$"1a.e s code=$$m(.sqlfn,fn)
 i fun?1"$$"1a.e s code=$$ext(.sqlfn,fn)
 s code=pre_code_post
 q code
 ;
ext(sqlfn,fn) ; generate code for m extrinsic function
 n line,sub,i,com
 s line=fun_"("
 s sub=fun_"("
 s com="" f i=1:1 q:'$d(sqlfn(fn,"p",i))  s sub=sub_com_sqlfn(fn,"p",i,1),com=","
 s sub=sub_")"
 s line=sub
 ;b
 q line
 ;
m(sqlfn,fn) ; m function
 n line,sub,i,com
 s line=fun_"("
 s sub=fun_"("
 s com="" f i=1:1 q:'$d(sqlfn(fn,"p",i))  s sub=sub_com_sqlfn(fn,"p",i,1),com=","
 s sub=sub_")"
 s line=sub
 q line
 q
 ;
in(en,wrd,word,wn,obr,cbr,error) ; form expression for sql style 'in'
 n arg,i,op,andor,eq,obr1,cbr1,x,dlm,pre,post,arg,args,var,spc
 i obr'=1,'cbr s error="incorrect bracketing around arguments of the 'in' operator",error(5)="HY000" g inx
 s op=word(en,wn)
 i op="in" s andor="or",eq="="
 i op="not in" s andor="and",eq="'="
 s arg=wrd s args=$$arg^%mgsqle(arg,.args)
 s (obr1,cbr1)=0,var="",spc="" f wn=wn-1:-1:1 s x=word(en,wn) s:x="(" obr1=obr1+1 s:x=")" cbr1=cbr1+1 s var=x_spc_var,spc=" " i obr1=cbr1 s wn=wn-1 q
 s x="",dlm="" f i=1:1:args s x=x_dlm_var_" "_eq_" "_args(i),dlm=" "_andor_" "
 s x="( "_x_" )",pre=$p(lin," ",1,pn),post=$p(lin," ",pn+1,999)
 s lin=pre_" "_x i $l(post) s lin=lin_" "_post
inx ; exit
 q ""
 ;
between(en,wrd,word,wn,obr,cbr,error) ; form expression for sql style 'between'
 n arg,i,op,andor,eq1,eq2,obr1,cbr1,x,dlm,pre,post,arg,args,var,spc
 i obr'=1,'cbr s error="incorrect bracketing around arguments of the 'between' operator",error(5)="HY000" g betweenx
 s op=word(en,wn)
 i op="between" s andor="and",eq1=">=",eq2="<="
 i op="not between" s andor="or",eq1="<",eq2=">"
 s arg=wrd s args=$$arg^%mgsqle(arg,.args) i args<2 s error="the 'between' operator takes two arguments",error(5)="HY000" g betweenx
 s (obr1,cbr1)=0,var="",spc="" f wn=wn-1:-1:1 s x=word(en,wn) s:x="(" obr1=obr1+1 s:x=")" cbr1=cbr1+1 s var=x_spc_var,spc=" " i obr1=cbr1 s wn=wn-1 q
 s x="( "_var_" "_eq1_" "_args(1)_" "_andor_" "_var_" "_eq2_" "_args(2)_" )",pre=$p(lin," ",1,pn),post=$p(lin," ",pn+1,999)
 s lin=pre_" "_x i $l(post) s lin=lin_" "_post
betweenx ; exit
 q ""
 ;
like(wrd,error) ; form expression for sql style pattern-match
 n wrd1,chr,i
 i wrd'?1""""1e.e1"""",wrd'[%z("ds") s error="invalid 'like' argument "_wrd,error(5)="HY000" q ""
 s wrd1=$e(wrd,2,$l(wrd)-1),wrd=""
 f i=1:1:$l(wrd1) s chr=$e(wrd1,i) s wrd=wrd_$s(chr="_":"1e",chr="%":".e",1:1_$c(34)_chr_$c(34))
 q ""
 ;
mpm(wrd,error) ; form expression for m style pattern-match
 n cn,chr,pchr,x,i
 s cn=0,chr=""
mpm1 s pchr=chr,cn=cn+1 i cn>$l(wrd) g mpmx
 s chr=$e(wrd,cn)
 i chr="."!(chr?1n) f i=cn+1:1 s x=$e(wrd,i) q:x'?1n&(x'=".")  s cn=cn+1,chr=chr_x
 i chr?1u f i=cn+1:1 s x=$e(wrd,i) q:x'?1u  s cn=cn+1,chr=chr_x
 i chr?1a.u f i=1:1:$l(chr) s x=$e(chr,i) i "acelnpu"'[x s error="invalid pattern "_x_" in pattern match "_wrd,error(5)="HY000" q
 i $e(error) g mpmx
 i chr="""" f i=cn+1:1:$l(wrd) s x=$e(wrd,i) q:x'=""""&($l(chr,"""")#2)  s cn=cn+1,chr=chr_x
 i chr["""",'($l(chr,"""")#2) s error="invalid element "_chr_" in pattern match "_wrd,error(5)="HY000" g mpmx
 i pchr="",chr?.n.1".".n g mpm1
 i pchr'="",pchr?.n.1".".n,chr?1a.u!(chr["""") g mpm1
 i pchr'="",pchr?1a.u!(pchr[""""),chr?.n.1".".n g mpm1
 s error="invalid pattern match "_wrd,error(5)="HY000"
mpmx i chr'?1a.u,chr'["""" s error="invalid pattern match "_wrd,error(5)="HY000"
 q ""
 ;
 
]]></Routine>


<Routine name="%mgsqln" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqln ;(CM) MGSQL odbc ; 17 dec 2003  3:15 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqln") q
 ;
main ; start
 s $zt="loope^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":loope^%mgsqln"
 k ^mgtmp($j)
 d logevent^%mgsqls("Process: "_$j,"Initialize Connection","ODBC")
 s data=$$v^%mgsql()
 d send(data,$l(data),0,"c",1)
loop ; next command
 s $zt="loope^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":loope^%mgsqln"
 s dbid=$$schema^%mgsql("")
 s stmt=$$read(.head,.cmnd,.size,.data)
 ;d logevent^%mgsqls("stmt="_stmt_"; cmnd="_cmnd_"; data="_data,"start","ODBC")
 i cmnd="i" d info g loop
 i cmnd="a" d typ^%mgsqln2  g loop
 i cmnd="s" d sql g loop
 i cmnd="b" d prp g loop
 i cmnd="t" d tab^%mgsqln1 g loop
 i cmnd="h" d col^%mgsqln1 g loop
 i cmnd="n" d stt^%mgsqln1 g loop
 i cmnd="k" d pky^%mgsqln1 g loop
 i cmnd="m" d fky^%mgsqln1 g loop
 i cmnd="p" d prc^%mgsqln1 g loop
 i cmnd="q" d pcc^%mgsqln1 g loop
 i cmnd="f" d fetch g loop
 d logerror^%mgsqls("MGSQL: bad message: "_cmnd,"ODBC Error")
 g loop
loope ; error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d logerror^%mgsqls("MGSQL:loop: "_error,"M Exception")
 d send(error,$l(error),0,"e",0)
 q
 ;
acc(user,dbid,tname,context,error,info) ; see if access is allowed
 s error=""
 q 1
 ;
base() ; get base for chunk headers
 q 10
 q
 ;
info ; information
 n nv
 s $zt="infoe^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":infoee^%mgsqln"
 d logevent^%mgsqls(data,"Information","ODBC")
 d nv(data,.nv)
 s uci=$g(nv("UCI"))
 s %user=$g(nv("User"))
 i uci'="" s rc=$$cuci^%mgsqls(uci)
 s data=""
 s data=data_"mgv="_$$v^%mgsql()_$c(13,10)
 s data=data_"$zv="_$zv_$c(13,10)
 s data=data_$c(13,10)
 d send(data,$l(data),0,"i",1) ; send data
 q
infoe ; error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d logerror^%mgsqls("MGSQL:info: "_error,"M Exception")
 d send(error,$l(error),0,"e",0)
 q
 ;
prp ; prepare sql
 n at,tname,r,sn,dtyp,i,x,line
 s $zt="prpe^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":prpe^%mgsqln"
 k ^mgsqls($j,stmt)
 d sqline(data,.line)
 d logarray^%mgsqls(.line,"prp() array","ODBC")
 s error=""
 d sql1 i $l(error) g sqlerror
 d send(line,$l(line),0,"b",0) ; send data
 q
prperror ; prepare sql error
 d logerror^%mgsqls(error,"SQL Error")
 d send(error,$l(error),0,"e",0)
 q
prpe ; error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d logerror^%mgsqls("MGSQL:prp: "_error,"M Exception")
 d send(error,$l(error),0,"e",0)
 q
 q
 ;
sql ; sql
 n %zi,%zo,at,tname,r,sn,dtyp,i,x,line,param
 s $zt="sqle^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":sqle^%mgsqln"
 d sqline(data,.line,.param)
 ;d logarray^%mgsqls(.line,"sql()","ODBC")
 s error=""
 d sql1 i $l(error) g sqlerror
 i $d(info("sp")) d  g sql2
 . s ok=-1
 . s %zo("routine")=rou
 . s %zi("stmt")=stmt
 . s rc=$$so^%mgsqlz()
 . s @("ok=$$"_rou_"(.%zi,.%zo)")
 . s rc=$$sc^%mgsqlz()
 . q
 m %zi=param("i")
 s %zo("routine")=rou,%zi("stmt")=stmt,@("ok=$$exec^"_rou_"(.%zi,.%zo)")
 i $d(%zo("error")) s error=$g(%zo("error")),error(5)="HY000" g sqlerror
sql2 ; 
 d send(line,$l(line),0,"s",0) ; send data
 q
sqlerror ; sql error
 d logerror^%mgsqls(error,"SQL Error")
 i $g(error(5))="" s error(5)="HY000"
 d send(":"_$g(error(5))_":"_error,$l(error),0,"e",0)
 q
sqle ; error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d logerror^%mgsqls("MGSQL:sql: "_error,"M Exception")
 d send(error,$l(error),0,"e",0)
 q
 ;
sql1 ; sql - process/compile and fire off routine
 n %txt,i,cname,dtyp,qid,lvar,res,n,type,qid,x,sqlcnt,sn,com,info
 s error=""
 k ^mgsqls($j,stmt)
 s rou=$$main^%mgsqlx(dbid,.line,.info,.error)
 i $l(error) q
 s qid=$g(info("qid"))
 s x="" f  s x=$o(^mgsqlx(1,dbid,qid,"t",x)) q:x=""  i '$$acc(%user,"0",x,0,.error,.%user) s error="No Permission",error(5)="42000" q
 i $l(error) q
 s line="" f i=1:1 q:'$d(^mgsqlx(1,dbid,qid,"out",i))  d
 . s r=$g(^(i))
 . s cname=$p(r,"~",1)
 . s tname=$p(r,"~",2)
 . s dtyp=$p(r,"~",8)
 . i cname["(" d  q
 . . s ag=$p(cname,"("),cname=$p($p(cname,"(",2,999),")",1)
 . . i cname["." s cname=$p(cname,".",2)
 . . s ag=$$trim^%mgsqln(ag)
 . . s cname=$$trim^%mgsqln(cname)
 . . i cname="" s cname="col_"_i
 . . s cname=ag_"-"_cname
 . . s cname=$tr(cname,":","")
 . . q
 . i cname["." s cname=$p(cname,".",2)
 . i cname="" s cname="xxx"
 . s line=line_i_"~"_cname_"~"_cname_"~"_tname_$c(13,10)
 . q
 s sn=i-1,line=line_$c(13,10)
 q
 ;
fetch ; get data
 n eod,rn,cn,val
 s $zt="fetche^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":fetche^%mgsqln"
 s rn=$i(^mgsqls($j,stmt,0,-10))
 i '$d(^mgsqls($j,stmt,0,rn)) s line="",eod=1 g fetchx
 s line="",eod=0
 f cn=1:1 q:'$d(^mgsqls($j,stmt,0,rn,cn))  d
 . s val=$g(^mgsqls($j,stmt,0,rn,cn))
 . s line=line_$$esize($l(val),4,$$base())_val
 . q
fetchx ; dispatch result
 d send(line,$l(line),stmt,"f",eod) ; send data
 q
fetche ; error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d logerror^%mgsqls("MGSQL:fetch: "_error,"M Exception")
 d send(error,$l(error),0,"e",0)
 q
 ;
read(head,cmnd,size,data) ; read
 s $zt="reade^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":reade^%mgsqln"
 s cmnd="",data="",size=0
 s head=$$recv(14,0)
 i head="" g reade
 s size=$$dsize($e(head,1,4),4,$$base())
 s cmnd=$e(head,14)
 s stmt=$$dsize($e(head,10,13),4,$$base())
 i 'size q stmt
 s data=$$recv(size,0)
 q stmt
reade ; error
 d logerror^%mgsqls($$error^%mgsqls(),"read error")
 q 0
 ;
recv(len,timeout)
 n data,get,got,x,y
 s data="",get=len,got=0
 f  r x#get s y=$l(x),data=data_x,got=got+y,get=get-y i got=len q
 q data
 ;
send(data,len,stmt,type,eod) ; send data
 n head
 s len=$l(data)
 s head=$$esize(len,4,$$base())_"0000"_$$esize(stmt,4,$$base())_eod_type
 i $$isydb^%mgsqls() g sendy
 w head_data d flush^%mgsqls()
 q
sendy ; yottadb
 w head_data
 q
 ;
esize(dsize,len,base)
 q $c(dsize#256)_$c(((dsize\256)#256))_$c(((dsize\(256**2))#256))_$c(((dsize\(256**3))#256))
 n esize
 s esize=+dsize f  q:$l(esize)=4  s esize="0"_esize
 q esize
 ;
dsize(esize,len,base)
 q ($a(esize,4)*(256**3))+($a(esize,3)*(256**2))+($a(esize,2)*256)+$a(esize,1)
 s dsize=+esize
 q dsize
 ;
nv(data,nv) ; name/value pairs
 n i,ii,n,v
 f i=1:1:$l(data,$c(13,10)) s r=$p(data,$c(13,10),i) s n=$p(r,"=",1),v=$p(r,"=",2,9999) i n'="" s nv(n)=v
 q
 ;
sqline(sql,line,param)
 n i,x,y,ln
 s ln=0
 f i=1:1:$l(sql,$c(10))  s x=$p(sql,$c(10),i) s y=$p(x,$c(13),1) d
 . i y="" q
 . i y?1"$:iv"1n.n.e s param("i",$p(y,":",2))=$p(y,":",5) q
 . s ln=ln+1,line(ln)=y
 . q
 q
 ;
oname(cname) ; name
 s cname=$tr(cname,"-","_")
 q at
 ;
op(op,type,val) ; operation
 s res=val ; q res
 s $zt="ope^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":ope^%mgsqln"
 i '$d(%sql("op",stmt,op,type)) q res
 s in=val x %sql("op",stmt,op,type) s res=$g(out1)
 ; double decode ???
 i res="",in'="" s res=in
 q res
ope ; error
 q res
 ;
test ; test
 k
 s %user="cm"
 s stmt=0
 ;s nv("sql")="select * from patient1 a"
 ;s nv("sql")="create table patient (num int not null, name varchar(255), address varchar(255), constraint pk_patient primary key (num))"
 s nv("sql")="select a.num, a.name from patient a"
 ;s nv("sql")="insert into patient (num, name) values (100003, ""verna hammond"")"
 ;s nv("sql")="update patient a set a.address = ""alvie"" where a.num = 100002"
 s data=$g(nv("sql"))
 ;d sql
 ;s data="tablename=admission"_$c(13,10)_$c(13,10)
 s data="tablename=patient"_$c(13,10)_$c(13,10)
 d col^%mgsqln1
 f i=1:1 q:'$d(^mgsqls($j,i,0))  w !,$g(^(0))
 q
 ;
 ; +not_ydb
accept(port) ; Concurrent TCP service (Cache, M21, MSM)
 s $zt="accepth^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":accepth^%mgsqln"
 d logevent^%mgsqls("cmcmcm try "_$g(port),"title","ODBC")
 d seterror^%mgsqls("")
 s port=+$g(port)
 i 'port s port=7041
   d logevent^%mgsqls("cmcmcm try a1 "_$g(port),"title","ODBC")
 
 i $$isidb^%mgsqls() s dev="|TCP|"_port
 i $$ism21^%mgsqls() s dev=9050
 i $$ismsm^%mgsqls() d
 . s dev=56
 . ; Determine OS type, NT or not
 . x "s nt=($zb($v(0,-4,2),#F,1)=10)"
 . q
  d logevent^%mgsqls("cmcmcm try a2 "_$g(port),"title","ODBC")
 
 s errors=0
 s timeout=10
 d logevent^%mgsqls("cmcmcm try 1 "_$g(port),"title","ODBC")
accept1 ; Main accept loop
 ; Set up Socket Server
 c dev
  d logevent^%mgsqls("cmcmcm try a1 "_$g(port),"title","ODBC")
 
 i $$isidb^%mgsqls() o dev:(:port:"SA"::8192:8192:10):10 i '$t d logevent^%mgsqls("Server StartUp timed-out","Server","ODBC") g acceptx
 i $$ism21^%mgsqls() d
 . o dev:("TCP"::port):10 i '$t  d logevent^%mgsqls("Server StartUp timed-out","Server","ODBC") g acceptx
 . i $device d logevent^%mgsqls("Unable to establish new listening socket for port "_port_" "_$device,"Server","ODBC") g acceptx
 . q
 i $$ismsm^%mgsqls() q:'nt  d
 . o dev:(:$s(nt:8,1:0)):"TCP"
 . u dev s %lddb=$key
 . u dev:(%lddb) w /SOCKET("",port) s %xddb=$key,lza=$za,lzb=$zb,lzc=$zc
 . q
 u dev
 i $$isidb^%mgsqls() d $zu(125,6,"",0,3,0),$zu(125,6,"",1,3,0)
 i $$ism21^%mgsqls() d
 . w /listen(10)
 . i $device d logerror^%mgsqls("Unable to set queue depth on new listening socket for port "_port_" "_$device,"ODBC Error") g acceptx
 . i $zsocket(dev)="" d logerror^%mgsqls("Aborting server startup for port"_port,"ODBC Error") g acceptx
 . q
accept2 ; Accept connection
 s $zt="accepte^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":accepte^%mgsqln"
 ; For Cache :
 i $$isidb^%mgsqls() d
 . r x
 . d logevent^%mgsqls("Incoming connection from "_$A($ZU(111,0),1)_"."_$A($ZU(111,0),2)_"."_$A($ZU(111,0),3)_"."_$A($ZU(111,0),4)_":"_($A($ZU(111,0),5)*256+$A($ZU(111,0),6))_", starting child server process","Server","ODBC")
 . i $v(0,-2,$ZU(40,0,1))\(2**16)#2 d logevent^%mgsqls("System shutting down","Server","ODBC") G acceptx
 .  d logevent^%mgsqls("cmcmcm try stae"_$g(port),"title","ODBC")
 . j child^%mgsqln(port,port,1,""):(:24):timeout
 . i '$t d logerror^%mgsqls("Unable to start a child process","ODBC Error") w *-2
 ; For M21
 i $$ism21^%mgsqls() d
 . w /wait
 . i $device d logerror^%mgsqls("Problem with listening socket"_$device,"ODBC Error") g acceptx
 . q:$key=""
 . s %MuNsock=$zsocket(dev)
 . d logevent^%mgsqls("Incoming connection from "_$zsocket(dev,%MuNsock,"REMOTEADDRESS")_" starting child server process","Server","ODBC")
 . ; Detach socket and start child process
 . i $s($$Validate^%MuDate($p($p($zv,"(",2),")",1),0)>59470:$zinfo(1,"svector","ostype"),1:1)=1 d
 . . u dev:(::::::%MuNsock)
 . . i $device d
 . . . d logerror^%mgsqls("Unable to detach new socket $device="_$device,"ODBC Error")
 . . . c dev:%MuNsock
 . . . d logerror^%mgsqls("Client socket closed $device="_$device,"ODBC Error")
 . . . g acceptx
 . s ok=1 
 . i $s($$Validate^%MuDate($p($p($zv,"(",2),")",1),0)>59470:$zinfo(1,"svector","ostype"),1:1)=1 j child^%mgsqln(port,%MuNsock,1,"")::timeout i '$T s ok=0
 . i $s($$Validate^%MuDate($p($p($zv,"(",2),")",1),0)>59470:$zinfo(1,"svector","ostype"),1:1)=2 j child^%mgsqln(port,%MuNsock,1,""):(::1:%MuNsock):timeout i '$T s ok=0
 . i 'ok d logerror^%mgsqls("Unable to start a child process","ODBC Error") w !
 . q
 ; For MSM
 i $$ismsm^%mgsqls() d
 . u dev:(%lddb) w /SOCKET("",port) s %xddb=$key,lza=$za,lzb=$zb,lzc=$zc
 . ;
 . ; Check for accept error
 . q:lzc&(lzb=-8)
 . i lzc d logerror^%mgsqls("Error on Server socket - restarting","ODBC Error") g acceptx
 . j child^%mgsqls(port,$zh(%xddb),1,"")::timeout s jobno=$zb
 . i jobno=0 d logerror^%mgsqls("Unable to start a child process","ODBC Error") w !
 . q
 ;
 s errors=0
 g accept2
acceptx ; Exit
 d logevent^%mgsqls("Closing Server","Server","ODBC")
 c dev
 q
 ;
accepte ; Error
 s $zt="accepth^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":accepth^%mgsqln"
 s errors=errors+1
 I $$error^%mgsqls()["INT" h
 d logerror^%mgsqls("Accept Loop - Program Error: "_$$error^%mgsqls(),"ODBC Error")
 i errors>7 d logerror^%mgsqls("Accept Loop - Too many errors - Closing Down","ODBC Error") h
 i $g(dev)'="" u dev
 i $$isidb^%mgsqls() w *-2
 i $$ism21^%mgsqls() w !
 i $$ismsm^%mgsqls() w !
 g accept2
accepth ; Halt
 h
 ;
child(pport,port,conc,uci) ; Child
 s $zt="childe^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":childe^%mgsqln"
 i uci'="" d uci^%mgsqls(uci)
 ; Concurrent service (Cache, M21, MSM)
 i conc d
 . i $$isidb^%mgsqls() d
 . . u $ZU(53)
 . . d $zu(132)  ; Set the principal device
 . . ;u 0:(::"+BDWC"::8192:8192)
 . . u 0:(::"+S"::8192:8192)
 . . q
 . i $$ism21^%mgsqls() d
 . . n %MuSdev
 . . s %MuSdev=9050
 . . ; Attach socket
 . . i $s($$Validate^%MuDate($p($p($zv,"(",2),")",1),0)>59470:$zinfo(1,"svector","ostype"),1:1)=1 o %MuSdev:(:::::port)
 . . i $s($$Validate^%MuDate($p($p($zv,"(",2),")",1),0)>59470:$zinfo(1,"svector","ostype"),1:1)=2 o %MuSdev:(:::::::port)
 . . u %MuSdev
 . . ; Set principal device
 . . i $zinfo(7,"pvector","pridev",%MuSdev)
 . . q
 . i $$ismsm^%mgsqls() d
 . . x "v port+46::$j-$v(272,-4,4):2"
 . . n addr s addr=$v(port+16,-3,0)
 . . s %("ADDRESS")=$v(addr+13,-3,$v(addr+12,-3,1),9)
 . . u 56:$zh(+port)
 . . q
 . q
 ; Non-Concurrent service (Old MUMPS systems - DSM, ISM etc...)
 i 'conc d
 . s ^%MGWSI("TCP_PORT",pport,port)=$j
 . ; Set TCP server child device
 . i $$isidb^%mgsqls() s dev="|TCP|"_port
 . i $$isdsm^%mgsqls() s dev=port
 . ;
 . ; Open TCP server child device
 . i $$isidb^%mgsqls() o dev:(::"S"):10 i '$t d logerror^%mgsqls("Server Child StartUp timed-out","ODBC Error") g childh
 . i $$isdsm^%mgsqls() o dev:(TCPCHAN:BLOCKSIZE=32768)
 . ;
 . ; Use TCP server child device
 . i $$isidb^%mgsqls() u dev
 . i $$isdsm^%mgsqls() u dev
 . q
 ;
 s nato=0
child2 ; Child request loop
 i '($d(nato)#10) s nato=0
child3 ; Read Request
 i 'nato r *x
 i nato r *x:nato i '$t g childh ; No-activity timeout
 i $$ism21^%mgsqls(),$device,$device["EOF" g childh ; Client closed connection
 s buf=$c(x) f  r *x q:x=10!(x=0)  s buf=buf_$c(x)
 i buf="xDBC" g main^%mgsqln
 i buf?1U.E1"HTTP/"1N1"."1N1C s buf=buf_$c(10) g main^%mgsqlw
 g childh
 ;
childe ; Error
 d logerror^%mgsqls($$error^%mgsqls(),"ODBC Error")
 i $$error^%mgsqls()["READ" g childh
 ;
childh ; Halt
 i $$ism21^%mgsqls() i $zinfo(7,"pvector","pridev",0)
 h
 ; -not_ydb
 ;
m ; test
 n a,p,y,t,i,g
 s a=108
 s p=4
 s y=25
 s t=0
 f i=1:1:25 d
 . s t=t+(a*12)
 . s g=t*(p/100)
 . s t=t+g
 . w !,"Year: ",i," (",(a*12*i)," ===> ",t,")"
 . q
 w !,"total: ",t
 q
 ;
]]></Routine>


<Routine name="%mgsqln1" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqln1 ;(CM) MGSQL odbc ; 17 dec 2003  3:15 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqln1") q
 ;
tab ; tables
 n a,tname,r,rn,sn,cn,nv,dtyp,i,x,n,desc,cols
 s $zt="tabe^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":tabe^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,stmt)
 ;d logarray^%mgsqls(.nv,"tab() array","ODBC")
 s error=""
 ; CatalogName=%s\r\nSchemaName=%s\r\nTableName=%s\r\nTableType=%s\r\n\r\n"
 s tname="TABLES"
 s cn=0
 s cn=cn+1,a(cn)="TABLE_CAT"
 s cn=cn+1,a(cn)="TABLE_SCHEM"
 s cn=cn+1,a(cn)="TABLE_NAME"
 s cn=cn+1,a(cn)="TABLE_TYPE"
 s cn=cn+1,a(cn)="REMARKS"
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 i $g(nv("CatalogName"))["%" d  g tab1
 . s rn=0
 . s rn=rn+1
 . s cn=0
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . q
 i $g(nv("SchemaName"))["%" d  g tab1
 . s rn=0
 . s dbid="" f  s dbid=$$nxtdbid^%mgsqld(dbid) q:dbid=""  d
 . . s rn=rn+1
 . . s cn=0
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=dbid
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . q
 . q
 i $g(nv("TableType"))["SYSTEM TABLE" d  g tab1
 . q
 . s rn=0
 . s rn=rn+1
 . s cn=0
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=dbid
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$g(nv("TableType"))
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . q
 i $g(nv("TableType"))["TABLE" d  g tab1
 . s rn=0
 . s dbid="" f  s dbid=$$nxtdbid^%mgsqld(dbid) q:dbid=""  d
 . . s tname="" f  s tname=$$nxttname^%mgsqld(dbid,tname) q:tname=""  d
 . . . s r=$$tab^%mgsqld(dbid,tname) i r="" q
 . . . s desc=$p(r,"\",1)
 . . . s rn=rn+1,cn=0
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=dbid
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=tname
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$g(nv("TableType"))
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=desc
 . . . q
 . . q
 . q
 i $g(nv("TableType"))["VIEW" d  g tab1
 . q
 . s rn=0
 . s rn=rn+1
 . s cn=0
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=dbid
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$g(nv("TableType"))
 . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . q
tab1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"t",1) ; send data
 q
tabe ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:tab: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q
 ;
col ; table columns
 n %d,%data,%ind,%ref,a,cols,col,colx,ord,cname,cname1,tname,r,rc,rn,cn,pkey,sn,dtyp,type,i,x,cname,n,kn,knm,sc,ino,desc,pk,nv
 s $zt="cole^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":cole^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,0,stmt)
 ;d logarray^%mgsqls(.nv,"col() array","ODBC")
 s error=""
 s tname="TABLE_COLUMNS"
 s cn=0
 s cn=cn+1,a(cn)="TABLE_CAT"
 s cn=cn+1,a(cn)="TABLE_SCHEM"
 s cn=cn+1,a(cn)="TABLE_NAME"
 s cn=cn+1,a(cn)="COLUMN_NAME"
 s cn=cn+1,a(cn)="DATA_TYPE"
 s cn=cn+1,a(cn)="TYPE_NAME"
 s cn=cn+1,a(cn)="COLUMN_SIZE"
 s cn=cn+1,a(cn)="BUFFER_LENGTH"
 s cn=cn+1,a(cn)="DECIMAL_DIGITS"
 s cn=cn+1,a(cn)="NUM_PREC_RADIX"
 s cn=cn+1,a(cn)="NULLABLE"
 s cn=cn+1,a(cn)="REMARKS"
 s cn=cn+1,a(cn)="COLUMN_DEF"
 s cn=cn+1,a(cn)="SQL_DATA_TYPE"
 s cn=cn+1,a(cn)="SQL_DATETIME_SUB"
 s cn=cn+1,a(cn)="CHAR_OCTET_LENGTH"
 s cn=cn+1,a(cn)="ORDINAL_POSITION"
 s cn=cn+1,a(cn)="IS_NULLABLE"
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 s tname=$g(nv("TableName"))
 i tname="" g col1
 s cname=$g(nv("ColumnName"))
 s knm=0
 s %d=$$tab^%mgsqld(dbid,tname) i %d="" g col1
 s pk=$$pkey^%mgsqld(dbid,tname)
 s sc=$$ind^%mgsqld(dbid,tname,.%ind)
 s sc=$$key^%mgsqld(dbid,tname,pk,.%ind)
 s ord=0,kn="" f  s kn=$o(%ind(pk,kn)) q:kn=""  d
 . s cname1=$g(%ind(pk,kn))
 . i 'cname1?1a.e q
 . s r=$$col^%mgsqld(dbid,tname,cname1)
 . s desc=""
 . s ord=ord+1,knm=ord s col(ord)=cname1,col(ord,"k")=1,col(ord,"d")=desc
 . s colx(cname1)=ord
 . q
 s sc=$$data^%mgsqld(dbid,tname,.%data)
 s cname1="" f  s cname1=$o(%data(cname1)) q:cname1=""  d
 . s r=$g(%data(cname1))
 . s pkey=$g(colx(cname1))+0
 . s ord=$s(pkey:pkey,1:$p(r,"\",1)+knm)
 . ;s r=$$col^%mgsqld(dbid,tname,cname)
 . s desc=""
 . s type=$p(r,"\",2)
 . s col(ord)=cname1,col(ord,"k")=$s(pkey:1,1:0),col(ord,"d")=desc,col(ord,"t")=type
 . s colx(cname1)=ord
 . q
 ;d logevent^%mgsqls("MGSQL:col:"_fid_":"_cname, "col","ODBC")
 i cname="" d  g col1
 . s rn=0
 . f ord=1:1 q:'$d(col(ord))  d
 . . s cname=col(ord)
 . . s rn=rn+1
 . . d col2(dbid,tname,cname,rn,ord,.col)
 . . q
 . q
 f ord=1:1 q:'$d(col(ord))  i $g(col(ord))=cname d  g col1
 . s rn=0
 . d col2(dbid,tname,cname,rn,ord,.col)
 . q
col1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"t",1) ; send data
 q
cole ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:col: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q
 ;
col2(dbid,tname,cname,rn,ord,cdata)
 n cn,type
 s type=$$ucase^%mgsqls($g(col(ord,"t")))
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=dbid
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=tname
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=cname
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid^%mgsqln2(type)
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=type
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="256"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="256"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid^%mgsqln2(type)
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=ord
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="NO"
 q
 ;
stt ; table statistics
 n a,n,nv,tname,r,rn,sn,cn,cols,dtyp,i,x,kn,knx,idx,idxn
 s $zt="stte^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":stte^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,stmt)
 ;d logarray^%mgsqls(.nv,"stt() array","ODBC")
 s error=""
 s tname="TABLE_STATISTICS"
 s cn=0
 s cn=cn+1,a(cn)="TABLE_CAT" ; 1
 s cn=cn+1,a(cn)="TABLE_SCHEM" ; 2
 s cn=cn+1,a(cn)="TABLE_NAME" ; 3
 s cn=cn+1,a(cn)="NON_UNIQUE" ; 4
 s cn=cn+1,a(cn)="INDEX_QUALIFIER" ; 5
 s cn=cn+1,a(cn)="INDEX_NAME" ; 6
 s cn=cn+1,a(cn)="TYPE" ; 7
 s cn=cn+1,a(cn)="ORDINAL_POSITION" ; 8
 s cn=cn+1,a(cn)="COLUMN_NAME" ; 9
 s cn=cn+1,a(cn)="ASC_OR_DESC" ; 10
 s cn=cn+1,a(cn)="CARDINALITY" ; 11
 s cn=cn+1,a(cn)="PAGES" ; 12
 s cn=cn+1,a(cn)="FILTER_CONDITION" ; 13
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 g stt1
stt1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"n",1) ; send data
 q
stte ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:stt: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q
 ;
pky ; table primary key
 n %ind,%ref,a,n,tname,r,rc,sn,kn,sc,rn,cn,nv,cols,dtyp,pk,i,ino,x,n,r,cname,kn
 s $zt="pkye^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":pkye^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,stmt)
 ;d logarray^%mgsqls(.nv,"pky() array","ODBC")
 s error=""
 s tname="TABLE_PRIMARY_KEY"
 s cn=0
 s cn=cn+1,a(cn)="TABLE_CAL" ; 1
 s cn=cn+1,a(cn)="TABLE_SCHEM" ; 2
 s cn=cn+1,a(cn)="TABLE_NAME" ; 3
 s cn=cn+1,a(cn)="COLUMN_NAME" ; 4
 s cn=cn+1,a(cn)="KEY_SEQ" ; 5
 s cn=cn+1,a(cn)="PK_NAME" ; 6
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 s tname=$g(nv("TableName"))
 i tname'="" d  g pky1
 . s n=0
 . s pk=$$pkey^%mgsqld(dbid,tname)
 . s sc=$$ind^%mgsqld(dbid,tname,.%ind)
 . s sc=$$key^%mgsqld(dbid,tname,pk,.%ind)
 . s rn=0,kn=0
 . s n="" f  s n=$o(%ind(pk,n)) q:n=""  d
 . . s r=$g(%ind(pk,n)) i r=""!(r["""")!(r?1n.e) q
 . . s cname=r,kn=kn+1
 . . s rn=rn+1
 . . s cn=0
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=dbid
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=tname
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=cname
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=kn
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=pk
 . . q
 . q
pky1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"k",1) ; send data
 q
pkye ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:pky: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q
 ;
fky ; table foreign key
 n %ind,%ref,a,n,tname,r,rc,sn,kn,sc,rn,cn,nv,cols,dtyp,pk,i,ino,x,n,r,cname,kn
 s $zt="fkye^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":fkye^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,stmt)
 ;d logarray^%mgsqls(.nv,"fky() array","ODBC")
 s error=""
 s tname="TABLE_PRIMARY_KEY"
 s cn=0
 s cn=cn+1,a(cn)="PKTABLE_CAT" ; 1
 s cn=cn+1,a(cn)="PKTABLE_SCHEM" ; 2
 s cn=cn+1,a(cn)="PKTABLE_NAME" ; 3
 s cn=cn+1,a(cn)="PKCOLUMN_NAME" ; 4
 s cn=cn+1,a(cn)="FKTABLE_CAT" ; 5
 s cn=cn+1,a(cn)="FKTABLE_SCHEM" ; 6
 s cn=cn+1,a(cn)="FKTABLE_NAME" ; 7
 s cn=cn+1,a(cn)="FKCOLUMN_NAME" ; 8
 s cn=cn+1,a(cn)="KEY_SEQ" ; 9
 s cn=cn+1,a(cn)="UPDATE_RULE" ; 10
 s cn=cn+1,a(cn)="DELETE_RULE" ; 11
 s cn=cn+1,a(cn)="FK_NAME" ; 12
 s cn=cn+1,a(cn)="PK_NAME" ; 13
 s cn=cn+1,a(cn)="DEFERRABILITY" ; 14
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 s tname=$g(nv("TableName"))
 i tname'="" d  g fky1
 . s n=0
 . s pk=$$pkey^%mgsqld(dbid,tname)
 . s sc=$$ind^%mgsqld(dbid,tname,.%ind)
 . s sc=$$key^%mgsqld(dbid,tname,pk,.%ind)
 . s rn=0,kn=0
 . s n="" f  s n=$o(%ind(pk,n)) q:n=""  d
 . . s r=$g(%ind(pk,n)) i r=""!(r["""")!(r?1n.e) q
 . . s cname=r,kn=kn+1
 . . s rn=rn+1
 . . s cn=0
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=dbid
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=tname
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=cname
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=dbid
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=tname
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=cname
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=kn
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="cascade"
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="cascade"
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=pk
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=pk
 . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 . . q
 . q
fky1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"m",1) ; send data
 q
fkye ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:fky: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q
 ;
prc ; procedures
 ; PROCDURE_TYPE:  SQL_PT_UNKNOWN=0, SQL_PT_PROCEDURE=1, SQL_PT_FUNCTION=2
 n a,cname,pname,tname,r,rn,cn,sn,cols,nv,dtyp,i,x,n,desc,r
 s $zt="prce^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":prce^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,stmt)
 ;d logarray^%mgsqls(.nv,"prc() array","ODBC")
 s error=""
 s tname="PROCEDURES"
 s cn=0
 s cn=cn+1,a(cn)="PROCEDURE_CAT"
 s cn=cn+1,a(cn)="PROCEDURE_SCHEM"
 s cn=cn+1,a(cn)="PROCEDURE_NAME"
 s cn=cn+1,a(cn)="NUM_INPUT_PARAMS"
 s cn=cn+1,a(cn)="NUM_OUTPUT_PARAMS"
 s cn=cn+1,a(cn)="NUM_RESULT_SETS"
 s cn=cn+1,a(cn)="REMARKS"
 s cn=cn+1,a(cn)="PROCEDURE_TYPE"
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 s pname=$g(nv("ProcName"))
 i pname="" d  g prc1
 . s rn=0
 . s dbid="" f  s dbid=$$nxtdbid^%mgsqld(dbid) q:dbid=""  d
 . . s pname="" f  s pname=$$nxtpname^%mgsqld(dbid,pname) q:pname=""  d
 . . . s r=$$prc^%mgsqld(dbid,pname) i r="" q
 . . . s desc=$p(r,"\",1)
 . . . s rn=rn+1,cn=0
 . . . s cn=0
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=pname
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 . . . q
 . . q
 . q
 s r=$$prc^%mgsqld(dbid,pname) i r="" g prc1
 s desc=$p(r,"\",1)
 s rn=1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=pname
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
prc1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"p",1) ; send data
 q
prce ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:prc: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q
 ;
pcc ; procedure columns
 ; PROCDURE_TYPE:  SQL_PT_UNKNOWN=0, SQL_PT_PROCEDURE=1, SQL_PT_FUNCTION=2
 n %data,a,cname,cname1,pname,tname,r,rn,sc,sn,cn,col,cols,colx,nv,ord,dtyp,type,i,x,n,desc,r
 s $zt="pcce^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":pcce^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,stmt)
 ;d logarray^%mgsqls(.nv,"pcc() array","ODBC")
 s error=""
 s tname="PROCEDURE_COLUMNS"
 s cn=0
 s cn=cn+1,a(cn)="PROCEDURE_CAT"
 s cn=cn+1,a(cn)="PROCEDURE_SCHEM"
 s cn=cn+1,a(cn)="PROCEDURE_NAME"
 s cn=cn+1,a(cn)="COLUMN_NAME"
 s cn=cn+1,a(cn)="COLUMN_TYPE"
 s cn=cn+1,a(cn)="DATA_TYPE"
 s cn=cn+1,a(cn)="TYPE_NAME"
 s cn=cn+1,a(cn)="COLUMN_SIZE"
 s cn=cn+1,a(cn)="BUFFER_LENGTH"
 s cn=cn+1,a(cn)="DECIMAL_DIGITS"
 s cn=cn+1,a(cn)="NUM_PREC_RADIX"
 s cn=cn+1,a(cn)="NULLABLE"
 s cn=cn+1,a(cn)="REMARKS"
 s cn=cn+1,a(cn)="COLUMN_DEF"
 s cn=cn+1,a(cn)="SQL_DATA_TYPE"
 s cn=cn+1,a(cn)="SQL_DATETIME_SUB"
 s cn=cn+1,a(cn)="CHAR_OCTET_LENGTH"
 s cn=cn+1,a(cn)="ORDINAL_POSITION"
 s cn=cn+1,a(cn)="IS_NULLABLE"
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 s pname=$g(nv("ProcName"))
 s cname=$g(nv("ColumnName"))
 s sc=$$pdata^%mgsqld(dbid,pname,.%data)
 s cname1="" f  s cname1=$o(%data(cname1)) q:cname1=""  d
 . s r=$g(%data(cname1))
 . s ord=$p(r,"\",1)
 . s desc=""
 . s type=$p(r,"\",2)
 . s col(ord)=cname1,col(ord,"k")=0,col(ord,"d")=desc,col(ord,"t")=type
 . s colx(cname1)=ord
 . q
 i cname="" d  g pcc1
 . s rn=0
 . f ord=1:1 q:'$d(col(ord))  d
 . . s cname=col(ord)
 . . s rn=rn+1
 . . d pcc2(dbid,tname,cname,rn,ord,.col)
 . . q
 . q
 f ord=1:1 q:'$d(col(ord))  i $g(col(ord))=cname d  g col1
 . s rn=0
 . d pcc2(dbid,pname,cname,rn,ord,.col)
 . q
pcc1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"q",1) ; send data
 q
pcce ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:pcc: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q
 ;
pcc2(dbid,pname,cname,rn,ord,cdata)
 n cn,type
 s type=$$ucase^%mgsqls($g(col(ord,"t")))
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=pname
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=cname
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="12"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="VARCHAR"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="256"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="256"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="12"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="NO"
 q
 ;
test ; test harness
 k
 s dbid="mgsql"
 s stmt=0
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName="_$c(13,10)_"TableType=TABLE"_$c(13,10,13,10) d tab
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName=admission"_$c(13,10)_"ColumnName="_$c(13,10,13,10) d col
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName=admission"_$c(13,10)_"ColumnName=dadm"_$c(13,10,13,10) d col
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName="_$c(13,10,13,10) d stt
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName=admission"_$c(13,10,13,10) d pky
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName=admission"_$c(13,10,13,10) d fky
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"ProcName="_$c(13,10,13,10) d prc
 s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"ProcName=patient_getdata"_$c(13,10)_"ColumnName="_$c(13,10,13,10) d pcc
 m z=^mgsqls($j,stmt)
 q
 
]]></Routine>


<Routine name="%mgsqln2" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqln2 ;(CM) MGSQL odbc ; 17 dec 2003  3:15 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqln2") q
 ;
typ ; data types
 n tname,r,sn,dtyp,i,x
 s $zt="type^%mgsqln2" ; new $ztrap set $ztrap="zgoto "_$zlevel_":type^%mgsqln2"
 d nv^%mgsqln(data,.nv)
 s error=""
 k ^mgsqls($j,stmt)
 s tname="DATA_TYPE"
 s cn=0
 s cn=cn+1,a(cn)="TYPE_NAME"            ;  1
 s cn=cn+1,a(cn)="DATA_TYPE"            ;  2
 s cn=cn+1,a(cn)="COLUMN_SIZE"          ;  3
 s cn=cn+1,a(cn)="LITERAL_PREFIX"       ;  4
 s cn=cn+1,a(cn)="LITERAL_SUFFIX"       ;  5
 s cn=cn+1,a(cn)="CREATE_PARAMS"        ;  6
 s cn=cn+1,a(cn)="NULLABLE"             ;  7
 s cn=cn+1,a(cn)="CASE_SENSITIVE"       ;  8
 s cn=cn+1,a(cn)="SEARCHABLE"           ;  9
 s cn=cn+1,a(cn)="UNSIGNED_ATTRIBUTE"   ; 10
 s cn=cn+1,a(cn)="FIXED_PREC_SCALE"     ; 11
 s cn=cn+1,a(cn)="AUTO_UNIQUE_VALUE"    ; 12
 s cn=cn+1,a(cn)="LOCAL_TYPE_NAME"      ; 13
 s cn=cn+1,a(cn)="MINIMUM_SCALE"        ; 14
 s cn=cn+1,a(cn)="MAXIMUM_SCALE"        ; 15
 s cn=cn+1,a(cn)="SQL_DATA_TYPE"        ; 16
 s cn=cn+1,a(cn)="SQL_DATETIME_SUB"     ; 17
 s cn=cn+1,a(cn)="NUM_PREC_RADIX"       ; 18
 s cn=cn+1,a(cn)="INTERVAL_PRECISION"   ; 19
 ;s tname="data_type"
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 s rn=0
 ;g vchar
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="BIT"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("BIT")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("BIT")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="TINYINT"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("TINYINT")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("TINYINT")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="BIGINT"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("BIGINT")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="19"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("BIGINT")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="LONGVARBINARY"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("LONGVARBINARY")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="2147483647"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="MAX LENGTH"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("LONGVARBINARY")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="VARBINARY"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("VARBINARY")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="4096"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="MAX LENGTH"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("VARBINARY")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="LONGVARCHAR"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("LONGVARCHAR")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="2147483647"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="MAX LENGTH"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("LONGVARCHAR")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="NUMERIC"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("NUMERIC")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="15"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="PRECISION,SCALE"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="15"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("NUMERIC")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="INTEGER"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("INTEGER")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="10"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("INTEGER")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="SMALLINT"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("SMALLINT")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="5"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("SMALLINT")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="DOUBLE"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("DOUBLE")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="15"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("DOUBLE")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="DATE"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("DATE")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="10"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("DATE")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="TIME"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("TIME")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="8"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("TIME")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="TIMESTAMP"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("TIMESTAMP")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="23"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("TIMESTAMP")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
vchar ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="VARCHAR"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("VARCHAR")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="4096"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="MAX LENGTH"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=$$sqltypeid("VARCHAR")
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,stmt,0,rn,cn)=""
 ;
type1 d send^%mgsqln(cols,$l(cols),0,"t",1) ; send data
 q
 ;
type ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:typ: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q
 ;
sqltypeid(type) ; get sql/odbc type ID
 s type=$$ucase^%mgsqls(type)
 i type["VARCHAR" q 12
 i type="TIMESTAMP" q 11
 i type="TIME" q 10
 i type="DATE" q 9
 i type="DOUBLE" q 8
 i type="SMALLINT" q 5
 i type="INTEGER" q 4
 i type="NUMERIC" q 2
 i type="LONGVARCHAR" q -1
 i type="VARBINARY" q -3
 i type="LONGVARBINARY" q -4
 i type="BIGINT" q -5
 i type="TINYINT" q -6
 i type="BIT" q -7
 i type="LONGVARCHAR" q -1
 q 12
 ;
 
]]></Routine>


<Routine name="%mgsqlo" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlo ;(CM) query optimisation procedure ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlo") q
 ;
main ; optimiser
 n qnum,ord,l,sys,eq,rstr,ord,null,rf,file,tname1,r,f,join,joins,lead,trail,rec,wher
 s qnum=0
opt1 s qnum=qnum+1 i '$d(^mgtmp($j,"from",qnum)) d rec g exit
 s wo="",spc="",index=^mgtmp($j,"from","i","x",qnum)
 f i=1:1 q:'$d(^mgtmp($j,"wher",qnum,i))  s wrd=^mgtmp($j,"wher",qnum,i) s:wrd[%z("dsv") wrd=$p(wrd,%z("dsv"),2) s wo=wo_spc_wrd,spc=" "
 d word
 d ent
 s sqlman=0
 d opt^%mgsqlo1
 k jn,rstr,rstrcv,join,file
 g opt1
exit ; exit
 q
 ;
word ; generate word array for sub-query
 f i=1:1 q:'$d(^mgtmp($j,"wher",qnum,i))  s wrd=^mgtmp($j,"wher",qnum,i),word(i)=wrd
 k wrd
 q
 ;
ent ; generate ent array for sub-query
 n alias,slot,done
 k ent,entord
 f i=1:1 q:'$d(^mgtmp($j,"from",qnum,i))  s x=$p(^mgtmp($j,"from",qnum,i),"~",2) i '$d(^mgtmp($j,"from","i",0,x)) s ^mgtmp($j,"from","i",0,x)=0
 f i=1:1 q:'$d(^mgtmp($j,"from",qnum,i))  s alias=$p(^mgtmp($j,"from",qnum,i),"~",2),alias(alias)=i,ent(i)=^mgtmp($j,"from",qnum,i)_"~"_^mgtmp($j,"from","i",0,$p(^mgtmp($j,"from",qnum,i),"~",2))
 s slot=0,alias="" f i=0:0 s alias=$o(%link("ord",qnum,alias)) q:alias=""  s slot=slot+1
 i slot s alias="" f i=0:0 s alias=$o(%link("ord",qnum,alias)) q:alias=""  f i=1:1:slot s entord(i,alias(alias))=""
 s alias="" f i=0:0 s alias=$o(alias(alias)) q:alias=""  i $d(seq(alias)) s slot=slot+1,entord(slot,alias(alias))="",done(alias)=""
 f i=1:1 q:'$d(^mgtmp($j,"from","z",qnum,"ord",i))  s alias=^mgtmp($j,"from","z",qnum,"ord",i) i '$d(done(alias)) s slot=slot+1,entord(slot,alias(alias))="",done(alias)=""
 q
 ;
rec ; record optimisation details for user
 n qnum,fct,key,ino,tname,alias,i,ii
 s ref="^mgsqlx(1,dbid,qid,""opt"""
 k @(ref_")")
 f qnum=1:1 q:'$d(^mgtmp($j,"from",qnum))  d rec11
 q
 ;
rec11 ; process sub-query
 s cum=1 f tnum=1:1 q:'$d(^mgtmp($j,"from",qnum,tnum))  s r=^mgtmp($j,"from",qnum,tnum) d rec1
 q
 ;
rec1 ; return full optimisation details for alias
 n kno,x,y,z,i,nds,nds1,nds2,ndst,pnds,com
 s tname=$p(r,"~",1),alias=$p(r,"~",2),ino=^mgtmp($j,"from","i",0,alias) i ino="" s ino=$$pkey^%mgsqld(dbid,tname)
 s alias(alias)=""
 s kno=0,key="",com="",ndst=1 s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s kno=kno+1 d rec2
 s @(ref_",qnum,tnum)")=tname_"#"_alias_"#"_ino_"#"_key
 q
 ;
rec2 ; record work involved at each level
 s y=%z("dsv")_alias_"."_x_%z("dsv")
 s (nds,nds1,nds2)=$s($d(^mgsqldbs("e",dbid,tname,ino,kno)):$p(^(kno),"~",1),1:0) i kno>1 s nds1=nds,(nds,nds2)=$s(nds>0:$j(nds/pnds,0,0),1:nds)
 s pnds=nds1,nds="~"_nds
 s z="" f ii=0:0 s z=$o(alias(z)) q:z=""  i z'=alias,$d(joinx(qnum,x,z)) s z=1 q
 i z s nds="[1]",nds2=1
 i 'z,$d(rec(y)) s:rec(y)="=" nds="[1]",nds2=1 s:rec(y)'="=" nds="[>"_nds_"<]",nds2=nds2
 i $e(nds)="~" s nds="["_nds_"]"
 s ndst=$s(nds2=1:ndst+1,nds2>1:ndst*nds2,1:ndst),cum=$s(nds2=1:cum+1,nds2>1:cum*nds2,1:cum),key=key_com_x_"#"_cum_"#"_ndst_"#"_nds,com=","
 q
 ;
 
 
]]></Routine>


<Routine name="%mgsqlo1" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlo1 ;(CM) query optimisation procedure ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlo1") q
 ;
opt ; optimise sub query
 s bdel="{b}"
 s ops=$$oper^%mgsqle(.ops,.props,.neops)
 d blks i $l(error) q
 d rstr
 d join
 d indx
 d vrfy
 d optim^%mgsqlo2
 q
 ;
blks ; break where statement into blocks by combinational operators
 n i,no,no1,ln,ln1,wrd,wrd1,op,obr,cbr,ok
 k whr
 s no1=0 f i=1:1 q:'$d(word(i))  s whr(no1,i)=word(i)
 s no=""
blks1 s no=$o(whr(no)) i no="" g blks3
 s ln=""
blks2 s ln=$o(whr(no,ln)) i ln="" g blks1
 s wrd=whr(no,ln) i wrd'="&",wrd'="!" g blks2
 s ln1=$o(whr(no,ln),-1) i '$l(ln1) s error="error in structure of the 'where' statement",error(5)="HY000" q
 s wrd1=whr(no,ln1) i wrd1[bdel g blks21
 s no1=no1+1,whr(no,ln1)=bdel_no1_bdel
 i wrd1'=")" s whr(no1,ln1)=wrd1 g blks21
 s obr=0,cbr=1 f  s ln1=$o(whr(no,ln1),-1) q:ln1=""  s wrd1=whr(no,ln1) s:wrd1="(" obr=obr+1 s:wrd1=")" cbr=cbr+1 k whr(no,ln1) q:obr=cbr  s whr(no1,ln1)=wrd1
blks21 s ln1=$o(whr(no,ln)) i '$l(ln1) s error="error in structure of the 'where' statement",error(5)="HY000" q
 s wrd1=whr(no,ln1) i wrd1[bdel g blks2
 s no1=no1+1,whr(no,ln1)=bdel_no1_bdel
 i wrd1'="(" s whr(no1,ln1)=wrd1 g blks2
 s obr=1,cbr=0 f  s ln1=$o(whr(no,ln1)) q:ln1=""  s wrd1=whr(no,ln1) s:wrd1="(" obr=obr+1 s:wrd1=")" cbr=cbr+1 k whr(no,ln1) q:obr=cbr  s whr(no1,ln1)=wrd1
 g blks2
blks3 ; recombine parts to eliminate branches caused by useless brackets
 s no=""
blks4 s no=$o(whr(no)) i no="" g blksx
 s ln=""
blks5 s ln=$o(whr(no,ln)) i ln="" g blks4
 s wrd=whr(no,ln) i wrd'[bdel g blks5
 s no1=$p(wrd,bdel,2)
 s op="",ln1=$o(whr(no,ln),-1) i $l(ln1) s op=whr(no,ln1)
 i op'="&",op'="!" s ln1=$o(whr(no,ln)) i $l(ln1) s op=whr(no,ln1)
 i op'="&",op'="!" g blks5
 s ok=1,ln1="" f  s ln1=$o(whr(no1,ln1)) q:ln1=""  s wrd1=whr(no1,ln1) i wrd1'[bdel,wrd1'=op s ok=0 q
 i 'ok g blks5
 k whr(no,ln)
 s ln1="" f  s ln1=$o(whr(no1,ln1)) q:ln1=""  s whr(no,ln1)=whr(no1,ln1)
 k whr(no1)
 s ln=""
 g blks5
blksx ;
 q
 ;
rstr ; find useful restrictions
 n orbrn,orn
 s orbrn=0
 s root=$o(whr("")) i '$l(root) q
 s no=root d op i '$l(op) q
 i op="&" s orn=1 d and q
 i op="!" d or q
 s orn=1 d rstr1 q
 q
 ;
rstr1 ; process individual restriction
 n tmp
 d op i '$l(op) q
 i op="&"!(op="!") q
 s (obr,cbr)=0,x=opn f  s x=$o(whr(no,x),-1) q:x=""  s wrd=whr(no,x) s:wrd="(" obr=obr+1 s:wrd=")" cbr=cbr+1 q:obr>cbr  s tmp(0,x)=wrd i obr=cbr q
 s n=0,x="" f  s x=$o(tmp(0,x)) q:x=""  s wrd=tmp(0,x) k tmp(0,x) s n=n+1 s tmp(0,n)=wrd
 s (obr,cbr)=0,n=0,x=opn f  s x=$o(whr(no,x)) q:x=""  s wrd=whr(no,x) s:wrd="(" obr=obr+1 s:wrd=")" cbr=cbr+1 q:cbr>obr  s n=n+1,tmp(1,n)=wrd i obr=cbr q
 s vn=0,cn=1,opc=op d rstr2
 i $d(ops(op)) s vn=1,cn=0,opc=ops(op) d rstr2
 q
 ;
rstr2 ; resolve expression into functional restriction wrt 1 variable
 k tmp(5) f i=1:1 q:'$d(tmp(cn,i))  s tmp(5,i)=tmp(cn,i)
 i neops[(":"_op_":") d rstr4 q
 i $d(tmp(vn,1)),'$d(tmp(vn,2)) s sqvar=tmp(vn,1) i sqvar[%z("dsv") d rstr3 q
 q
 ;
rstr3 ; find dependancies in constant
 s sqvar=$p(sqvar,%z("dsv"),2) i sqvar'?1a.e1"."1a.e q
 f andn=1:1 q:'$d(rstr(orbrn,sqvar,orn,andn))
 s n="",cnst=""
rstr31 s n=$o(tmp(5,n)) i n="" g rstr32
 s (wrd,wrd1)=tmp(5,n)
 s var="" i wrd[%z("dsv") s var=$p(wrd,%z("dsv"),2)
 i var?1a.e1"."1a.e s rstr(orbrn,sqvar,orn,andn,"dep",var)=""
 s cnst=cnst_wrd
 g rstr31
rstr32 ; file restriction
 s rstr(orbrn,sqvar,orn,andn,"op")=opc
 s rstr(orbrn,sqvar,orn,andn,"cnst")=cnst
 i cnst'[%z("dev") q
 s (alias,tname)=$p(sqvar,".",1),cname=$p(sqvar,".",2)
 i alias'="" s tno=$g(^mgtmp($j,"from","x",qnum,alias)) i tno'="" s tname=$p($g(^mgtmp($j,"from",qnum,tno)),"~",1)
 s ^mgtmp($j,"in",$p(cnst,%z("dev"),2))="~"_tname_"~"_cname
 q
 ;
rstr4 ; evaluate possible not-null restriction
 i orbrn'=0 q
 i '$d(tmp(vn,1))!'$d(tmp(5,1)) q
 i $d(tmp(vn,2))!$d(tmp(5,2)) q
 s sqvar=tmp(vn,1) i sqvar'[%z("dsv") q
 s sqvar=$p(sqvar,%z("dsv"),2) i sqvar'?1a.e1"."1a.e q
 s cnst=tmp(5,1)
 i op="'=",cnst="""""" s notnull(sqvar)=""
 i op="[",cnst?1""""1e.e1"""" s notnull(sqvar)=""
 q
 ;
and ; process and conditions
 s x=""
and1 s x=$o(whr(no,x)) i x="" q
 s wrd=whr(no,x) i wrd'[bdel g and1
 s no1=$p(wrd,bdel,2)
 d and2
 g and1
 ;
and2 ; branch beneath and combination
 n no,x
 s no=no1 d op
 i op="&" q
 i op="!" d or
 d rstr1
 q
 ;
or ; process or conditions
 s orbrn=orbrn+1,orn=0,x=""
or1 s x=$o(whr(no,x)) i x="" q
 s wrd=whr(no,x) i wrd'[bdel g or1
 s no1=$p(wrd,bdel,2)
 d or2
 g or1
 ;
or2 ; branch beneath or combination
 n no,x
 s orn=orn+1
 s no=no1 d op
 i op="&" d and
 i op="!" q
 d rstr1
 q
 ;
op ; extract combinational or comparison operator for group
 n x,wrd,wrd1
 s (op,opn)=""
 s x="" f  s x=$o(whr(no,x)) q:x=""  s wrd=whr(no,x),wrd1=":"_wrd_":" i wrd="!"!(wrd="&")!(neops[wrd1)!(props[wrd1) s op=wrd,opn=x q
 q
 ;
join ; make comprehensive join index
 n jn,cname,alias,sqvar
 s jn=0
 s cname="" f  s cname=$o(^mgtmp($j,"from","z",qnum,"join",cname)) q:cname=""  d
 . s jn=jn+1
 . s alias="" f  s alias=$o(^mgtmp($j,"from","z",qnum,"join",cname,alias)) q:alias=""  d
 . . s sqvar=alias_"."_cname
 . . s jnx(jn,sqvar)=""
 . . q
 . q
 q
 ;
indx ; get all index information
 f i=1:1 q:'$d(ent(i))  s tname=ent(i),alias=$p(tname,"~",2),tname=$p(tname,"~",1) d indx1
 s nofid=i-1
 q
 ;
indx1 ; retrieve index data for file tname
 n i,pkey
 s rc=$$ind^%mgsqld(dbid,tname,.%ind)
 s ino=""
indx2 s ino=$o(%ind(ino)) i ino="" g indxx
 i $d(create("index")),ino=$p(create("index"),"~",2) g indx2
 s sc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 s kno=0,ano=0,pnds=0
indx3 s kno=kno+1 i '$d(%ind(ino,kno)) g indx2
 s cname=%ind(ino,kno) i cname'?1a.e g indx3
 s ano=ano+1,sqvar=alias_"."_cname
 i ino=$$pkey^%mgsqld(dbid,tname) s pkey(cname)=""
 s keyat=$d(pkey(cname))
 s notnl=0,%d=$$item^%mgsqld(dbid,tname,cname) i %d'="",$p(%d,"\",4) s notnl=1
 i keyat s notnl=1
 i notnl s notnull(sqvar)=""
 s (nds,nnds)=0 i $d(^mgsqldbs("e",dbid,tname,ino,ano)) s (nds,nnds)=$p(^(ano),"~",1) s:pnds>0 nnds=$j(nds/pnds,0,0) s pnds=nds
 s indxa("e",alias,ino)=ano,indxa("e",alias,ino,ano)=cname_"~"_keyat_"~"_notnl_"~"_""_"~"_nds_"~"_nnds
 g indx3
indxx k %ind,ino,ano,kno,cname,keyat,notnl,nds,nnds,pnnds
 q
 ;
vrfy ; verify indices for usage
 n alias,cname,sqvar,sqvar1,notnul,ino,kno,jn
 s alias=""
vrfy1 s alias=$o(indxa("e",alias)) i alias="" g vrfyx
 s ino=""
vrfy2 s ino=$o(indxa("e",alias,ino)) i ino="" g vrfy1
 i $d(cuse(alias,ino)) g vrfy2 ; index disqualified already
 s ano=0
vrfy3 s ano=ano+1 i '$d(indxa("e",alias,ino,ano)) g vrfy2
 s r=indxa("e",alias,ino,ano)
 s cname=$p(r,"~",1),notnl=$p(r,"~",3),sqvar=alias_"."_cname
 i notnl g vrfy4
 i $d(notnull(sqvar)) s notnl=1 g vrfy4
 s jn="" f  s jn=$o(jnx(jn)) q:jn=""!notnl  i $d(jnx(jn,sqvar)) s sqvar1=""  f  s sqvar1=$o(jnx(jn,sqvar1)) q:sqvar1=""  i sqvar1'=sqvar,$d(notnull(sqvar1)) s notnl=1 q
vrfy4 i 'notnl s duse(alias,ino)="" g vrfy2
 s $p(indxa("e",alias,ino,ano),"~",3)=notnl,notnull(sqvar)=""
 g vrfy3
vrfyx ;
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlo2" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlo2 ;(CM) query optimisation procedure ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlo2") q
 ;
optim ; optimise sub query
 d comb
 d comp
 q
 ;
comb ; look at combinations
 s optim=1,wkfct2=0
 s ordn=0,ordm=nofid
comb1 d ord i ord="" g combx
 s ok=1 f ordn=1:1:nofid i $d(entord(ordn)) s nrun=$p(ord,"#",ordn) i '$d(entord(ordn,nrun)) s ok=0 q
 i 'ok g comb1
 d comb2
 g comb1
combx s ord="" f  s ord=$o(comb(ord)) q:ord=""  s r=comb(ord),wkfct=$p(r,"~",1),wkfctb=$p(r,"~",2),nodes=$p(r,"~",3) i wkfct=wkfct2 s nds(nodes,wkfctb,ord)=""
 s nodes=$o(nds("")) i $l(nodes) s wkfctb=$o(nds(nodes,""),-1) i $l(wkfctb) s ord=$o(nds(nodes,wkfctb,""))
 i $l(ord),$d(comb(ord)) s inos=$p(comb(ord),"~",4)
 i '$l(ord) s ordn=0 d ord
 i '$l(inos) s dlm="" f i=1:1:ordm s ord=ord_dlm_"0",dlm="#"
 q
 ;
comb2 ; evaluate combination
 n nord,nrun,tname,alias,got
 s (inos,wkfcts,nodess,dlms)=""
 s nord=0,nodes1=0,wkfct1=0,wkfct2=0,wkfctb1=0,wkfctbn1=0
comb21 s nord=nord+1,nrun=$p(ord,"#",nord)
 s alias=ent(nrun),tname=$p(alias,"~",1),alias=$p(alias,"~",2)
 d idx s got("f",alias)=""
 s nodes1=nodes1+nodes,wkfct1=wkfct1+(wkfct/nofid)
 s wkfctb1=wkfctb1+(wkfct/nord),wkfctbn1=wkfctbn1+(1/nord)
 s inos=inos_dlms_ino,wkfcts=wkfcts_dlms_wkfct,nodess=nodess_dlms_nodes,dlms="#"
 i nord<nofid g comb21
comb22 s wkfctb2=$j(wkfctb1/wkfctbn1,"",12)+0
 s wkfct1=$j(wkfct1,"",12)+0
 i wkfct1>wkfct2 s wkfct2=wkfct1
 s comb(ord)=wkfct1_"~"_wkfctb2_"~"_nodes1_"~"_inos_"~"_wkfcts_"~"_nodess
 q
 ;
idx ; select best index (output: ino, dep, sat, nodes, wkfct)
 n use,idx,nds
 s ino="",maxdep=0,maxsat=0
idx1 s ino=$o(indxa("e",alias,ino)) i ino="" g idxx
 i $d(cuse(alias,ino)) g idx1
 i optim,$d(duse(alias,ino)) g idx1
 k got("a",alias)
 s ano=0,nodes=0,rstrto=-1,rstrn=0
idx2 s ano=ano+1 i '$d(indxa("e",alias,ino,ano)) g idx2x
 s r=indxa("e",alias,ino,ano)
 s cname=$p(r,"~",1),nnodes=$p(r,"~",6),sqvar=alias_"."_cname
 d idx3
 s got("a",alias,cname)=""
 i '$d(use(ino,sqvar)) s:rstrto=-1 rstrto=ano-1 s nodes=nodes+nnodes
 i $d(use(ino,sqvar)) s rstrn=rstrn+1
 g idx2
idx2x ; index processed
 s ano=ano-1
 s dep=rstrto/ano,sat=rstrn/ano
 i dep>maxdep s maxdep=dep
 i sat>maxsat s maxsat=sat
 s idx(ino)=dep_"~"_sat_"~"_(nodes+0)
 g idx1
idxx s ino="" f  s ino=$o(idx(ino)) q:ino=""  s r=idx(ino),dep=$p(r,"~",1),sat=$p(r,"~",2) i dep<maxdep,sat<maxsat k idx(ino)
 s ino="" f  s ino=$o(idx(ino)) q:ino=""  s nodes=$p(idx(ino),"~",3),nds(nodes,ino)=""
 s nodes=$o(nds("")) i $l(nodes) s ino=$o(nds(nodes,""))
 i ino="" s ino=$$pkey^%mgsqld(dbid,tname)
 i nodes="" s nodes=0
 s (dep,sat)=0
 i $d(idx(ino)) s r=idx(ino),dep=$p(r,"~",1),sat=$p(r,"~",2)
 s wkfct=(dep+sat)/2
 i optim q
 s sqvar="" f  s sqvar=$o(use(ino,sqvar)) q:sqvar=""  s orn="" f  s orn=$o(use(ino,sqvar,orn)) q:orn=""  s andn="" f  s andn=$o(use(ino,sqvar,orn,andn)) q:andn=""  d idx4
 q
 ;
idx3 ; find/join to a restriction
 n jn
 s jn="",ok=0 f  s jn=$o(jnx(jn)) q:jn=""!ok  i $d(jnx(jn,sqvar)) s sqvar1="" f  s sqvar1=$o(jnx(jn,sqvar1)) q:sqvar1=""  i sqvar1'=sqvar d gotat i ok q
 i ok s use(ino,sqvar,1,1,"op")="=",use(ino,sqvar,1,1,"cnst")=%z("dsv")_sqvar1_%z("dsv") g idx3x
 s orbrn=""
idx31 i $d(use(sqvar)) g idx3x
 s orbrn=$o(rstr(orbrn)) i orbrn="" g idx3x
 s orn=""
idx32 s orn=$o(rstr(orbrn,sqvar,orn)) i orn="" g idx31
 s andn=""
idx33 s andn=$o(rstr(orbrn,sqvar,orn,andn)) i andn="" g idx32
 s ok=1,sqvar1="" f  s sqvar1=$o(rstr(orbrn,sqvar,orn,andn,"dep",sqvar1)) q:sqvar1=""  d gotat i 'ok q
 i 'ok,orbrn'=0 k use(sqvar) g idx31
 i 'ok g idx33
 s use(ino,sqvar,orn,andn,"op")=rstr(orbrn,sqvar,orn,andn,"op")
 s use(ino,sqvar,orn,andn,"cnst")=rstr(orbrn,sqvar,orn,andn,"cnst")
 g idx33
idx3x ;
 q
 ;
idx4 ; file restriction for compiler to use
 s (^mgtmp($j,"pre",qnum,%z("dsv")_sqvar_%z("dsv"),orn,andn,"op"),rec(%z("dsv")_sqvar_%z("dsv")))=use(ino,sqvar,orn,andn,"op")
 s ^mgtmp($j,"pre",qnum,%z("dsv")_sqvar_%z("dsv"),orn,andn,"cnst")=use(ino,sqvar,orn,andn,"cnst")
 q
 ;
gotat ; determine whether sqvar1 is available at this point
 n alias,cname
 s ok=0,alias=$p(sqvar1,".",1),cname=$p(sqvar1,".",2)
 i '$l(alias),'$l(cname) q
 s ok=0 i $d(got("a",alias,cname)) s ok=1 q
 q
 ;
ord ; get next running order
 n i,j,x,y,ok
 s ordn=ordn+1 i ordn=1 g ord1
 s ok=0 f i=ordm:-1:1 d ord2 i ok s $p(ord,"#",i)=x q
 i 'ok s ord="" q
 f j=1:1:i s y($p(ord,"#",j))=""
 f i=i+1:1:ordm f j=1:1 i '$d(y(j)) s $p(ord,"#",i)=j,y(j)="" q
 q
ord1 ; first pass
 f i=1:1:ordm s $p(ord,"#",i)=i
 q
 ;
ord2 ; get next allowed number in series
 n j,y
 f j=1:1:i-1 s y($p(ord,"#",j))=""
 s x=$p(ord,"#",i),ok=0 f j=x+1:1 s:'$d(y(j)) x=j,ok=1 i ok q
 i x>ordm s ok=0
 q
 ;
comp ; interface to compiler
 s optim=0
 k ^mgtmp($j,"from",qnum),^mgtmp($j,"from","x",qnum)
 f ordn=1:1:nofid d comp1
 d comb2
 q
 ;
comp1 ; disallow all indices except chosen one
 n i,r,ino,ino1,alias,tname,nrun,agg,cname
 s nrun=$p(ord,"#",ordn),ino=$p(inos,"#",ordn)
 s alias=ent(nrun),tname=$p(alias,"~",1),alias=$p(alias,"~",2)
 k cuse(alias,ino)
 s ino1="" f  s ino1=$o(indxa("e",alias,ino1)) q:ino1=""  i ino1'=ino s cuse(alias,ino1)=""
 s ^mgtmp($j,"from",qnum,ordn)=tname_"~"_alias,(^mgtmp($j,"from","x",qnum,tname),^mgtmp($j,"from","x",qnum,alias))=ordn,^mgtmp($j,"from","i",0,alias)=ino
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlp" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlp ;(CM) sql language processor ; 14 aug 2002  6:16 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlp") q
 ;
main(sql,line,error) ; entry
 n sql2,wrk
 s error=""
 k ^mgtmp($j,"translate")
main1 ; re-entry
 k ^mgtmp($j,"cmnd")
 ;k wrk,blk,tmp,sql,log,declare
 s error=""
 d cmnd(.sql2)
 d rips(.line,.wrk,.error) i $l(error) g exit
 s qnummax=$$cdel(.sql2,.wrk,.error) i $l(error) g exit
 d main^%mgsqlp1(qnummax,.sql2,.wrk,.sql,.error) i $l(error) g exit
 i $g(sql(1,2))="from "_%z("dq")_2_%z("dq")_" t0" d cog i ok g main1
exit k tmp,blk
 q qnummax
 ;
cmnd(sql2) ; sql2 commands
 n x
 k sql2
 f x="select","from","where","group","having","order","call" s sql2(x)=0
 f x="join","natural","outer","left","right","full","inner","cross","outer","as","on","using" s sql2(x)=1
 f x="exists","not","and","or","like","in","between" s sql2(x)=2
 f x="update","delete","insert","attributes","into","values","set" s sql2(x)=3
 f x="union","intersect","except" s sql2(x)=4
 f x="transaction","create","drop","by","all" s sql2(x)=5
 f x="commit","current_date","current_time","current_timestamp","start","stop" s sql2(x)=7
 f x="cursor","eof","last","notnull","rollback" s sql2(x)=7
 q
 ;
rips(line,wrk,error) ; rip out all literals and comments
 n ln,ln1,ln2,cn,cn1,cn2,char,charp,charn,txt,instring,sno,qno,mrk
 s ln="" f  s ln=$o(line(ln)) q:ln=""  s wrk(ln)=line(ln)
 s sno=0
rips0 k sno(0)
 s instring=0,string=""
 s ln=""
rips1 s ln=$o(wrk(ln)) i ln="" g rips3
 s txt=wrk(ln),char=" ",txt=$tr(txt,"'","""")
 s cn=0
rips2 s cn=cn+1,charp=char,char=$e(txt,cn),charn=$e(txt,cn+1) i char="" g rips1
 i 'instring,(charp_char)=" ;"!((charp_char_charn)=" --") s txt=$e(txt,1,cn-2) k wrk(ln) s:$l(txt) wrk(ln)=txt g rips2 ; remove comment
 i char=$c(34),'instring s sno=sno+1,qno=0,instring=1,sno(0,sno,0,0)=ln,sno(0,sno,0,1)=cn
 i char=$c(34),instring s qno=qno+1
 i char'=$c(34),instring,'(qno#2) s ^mgtmp($j,"string",sno)=string,instring=0,string="" g rips3
 i instring s string=string_char,sno(0,sno,1,0)=ln,sno(0,sno,1,1)=cn
 g rips2
rips3 i instring,'(qno#2) s ^mgtmp($j,"string",sno)=string,instring=0,string=""
 i instring s error="statement contains unterminated literal",error(5)="HY000" g ripsx
 s sno=$o(sno(0,"")) i '$l(sno) g ripsx
 s mrk=%z("ds")_sno_%z("ds")
 s ln1=sno(0,sno,0,0),cn1=sno(0,sno,0,1)
 s ln2=sno(0,sno,1,0),cn2=sno(0,sno,1,1)
 i ln1=ln2 s wrk(ln1)=$e(wrk(ln1),1,cn1-1)_mrk_$e(wrk(ln1),cn2+1,9999) g rips0
 s wrk(ln1)=$e(wrk(ln1),1,cn1-1)_mrk
 s ln=ln1 f  s ln=$o(wrk(ln)) q:ln=""!(ln'<ln2)  s wrk(ln)=""
 s wrk(ln2)=$e(wrk(ln2),cn2+1,9999)
 g rips0
ripsx ; exit
 q
 ;
rstring(line) ; put strings back into line
 f  q:line'[%z("ds")  s line=$p(line,%z("ds"),1)_^mgtmp($j,"string",$p(line,%z("ds"),2))_$p(line,%z("ds"),3,9999)
 q line
 ;
cdel(sql2,wrk,error) ; find and mark main commands
 n ln,lnd,dec,pn,wrd,wrd0,wrd1,pst,pre,txt,txt1,txtn,qnum
 s (qnum,lnd)=0,(dec,txtn)=""
 s ln=""
cdel1 s ln=$o(wrk(ln)) i ln="" g cdelx
 s txt=wrk(ln) d rems i '$l(txt) k wrk(ln) g cdel1
 s txt=$$cdel7(txt)
 s pn=0
cdel2 s pn=pn+1 i pn>$l(txt," ") g cdel1r
 s wrd=$p(txt," ",pn)
 i '$l(wrd) g cdel2 ; this shouldn't happen
 s pre="" f  q:"()"'[$e(wrd,1)  s pre=pre_$e(wrd,1),wrd=$e(wrd,2,9999) i '$l(wrd) q
 s pst="" f  q:"()"'[$e(wrd,$l(wrd))  s pst=$e(wrd,$l(wrd))_pst,wrd=$e(wrd,1,$l(wrd)-1) i '$l(wrd) q
 i wrd="" g cdel2r
 s wrd1=$$lcase^%mgsqls(wrd)
 i $l(wrd1)>128 g cdel2r
 i '$d(sql2(wrd1)) g cdel2r
 s (wrd0,wrd)=wrd1
 i wrd0="transaction" d cdel5 g cdel2
 i wrd0="select" s qnum=qnum+1,wrd=$s(qnum=1:"(",1:"")_%z("dq")_qnum_%z("dq")_%z("dc")_wrd_%z("dc")
 i wrd0'="select",$d(sql2(wrd)),"034"[sql2(wrd) d cdel3(.wrd,.qnum)
 s ^mgtmp($j,"cmnd",qnum,wrd0)=ln
cdel2r s txtn=txtn_" "_pre_wrd_pst
 g cdel2
cdel1r s txtn=$$trim^%mgsqls(txtn) i '$l(txtn) k wrk(ln) g cdel1
 s wrk(ln)=txtn,txtn=""
 g cdel1
cdelx ;
 s qnummax=qnum
 i qnummax s ln=$o(wrk(""),-1) i $l(ln) s wrk(ln)=wrk(ln)_")"
 q qnummax
 ;
cdel3(wrd,qnum) ; process main-line command
 s wrd=%z("dc")_wrd_%z("dc")
 i wrd["update" s wrd=%z("dc")_"from"_%z("dc")_" "_wrd
 i wrd["delete"!(wrd["update") s qnum=qnum+1,wrd=$s(qnum=1:"(",1:"")_%z("dq")_qnum_%z("dq")_%z("dc")_"select"_%z("dc")_" "_wrd
 q
 ;
cdel5 ; transaction processing command
 n cmnd,nam
 s cmnd=$p(txt," ",pn+1),nam=$p(txt," ",pn+2),txt=$p(txt," ",1,pn-1)_" "_$p(txt," ",pn+3,9999),pn=pn-1 d rems
 s cmnd=$$lcase^%mgsqls(cmnd)
 i cmnd'="start",cmnd'="commit",cmnd'="rollback" s error="invalid command '"_cmnd_"' for transaction processing",error(5)="HY000" q
 s sql("txp",0,cmnd)=nam i nam?1":"1a.e s inv($p(nam,":",2,9999))=""
 q
 ;
cdel7(line) ; remove ambiguous syntax
 n dlm,len,pn,pn1,pre,post,post1,obr,cbr,i,c,wrd,wrduc
 s dlm="substring"
 s len=$l(line,dlm)
 i len<2 q line
 s pn=len
cdel71 s pre=$p(line,dlm,1,pn-1),post=$p(line,dlm,pn,9999)
 i post'?." "1"("1e.e g cdel71
 s (obr,cbr)=0 f i=1:1 s c=$e(post,i) s:c="(" obr=obr+1 s:c=")" cbr=cbr+1 i obr,obr=cbr q
 i 'obr g cdel71
 i obr'=cbr g cdel71
 s post1=$e(post,i+1,99999)
 s post=$e(post,1,i)
 f pn1=1:1:$l(post," ") s wrd=$p(post," ",pn1) d
 . s wrduc=$$lcase^%mgsqls(wrd)
 . i wrduc="from"!(wrduc="for") s $p(post," ",pn1)=","
 . q
 s line=pre_dlm_post_post1
 s pn=pn-1 i pn>1 g cdel71
 q line
 ;
rems ; trim and remove surplus spaces from txt
 n pn,wrd,txt1
 i '$l(txt) q
 s txt=$$trim^%mgsqls(txt) i '$l(txt) q
 f pn=1:1:$l(txt," ") s txt1=$p(txt," ",pn+1,9999) i txt1?1" ".e s txt1=$$ltrim^%mgsqls(txt1),txt=$p(txt," ",1,pn)_" "_txt1
 q
 ;
remsc ; remove spaces from comma in context of natural separator
 n pn,wrd,txt1
 f pn=1:1 q:txt'[" "!(pn=$l(txt," "))  s wrd=$p(txt," ",pn) q:wrd=""  s txt1=$p(txt," ",pn+1,9999) i $e(wrd,$l(wrd))=","!($e(txt1,1)=",") s txt=$p(txt," ",1,pn)_$p(txt," ",pn+1,9999),pn=pn-1
 q
 ;
cog ; cognos translations
 s ok=0
 i $g(sql(1,1))'?1"select ".e q
 i $g(sql(2,1))'?1"select min(".e q
 i $g(sql(2,2))'?1"from ".e q
 s sel=$p($g(sql(1,1)),"select ",2)
 s cname=$p($p($g(sql(2,1)),"select min(",2),")",1)
 s sel1="",com="" f i=1:1:$l(sel,",") s x=$p(sel,",",i),sel1=sel1_com_cname_" "_$p(x," ",2),com=","
 k line
 s ok=1
 s line(1)="select distinct "_sel1
 s line(2)=sql(2,2)
 s line(3)="where "_cname_" > -7"
 m ^mgtmp($j,"translate")=line
 ;
 ;s line(1)="select distinct a.lab membercaption3, a.lab usevalue, a.lab membercaption6, a.lab displayvalue"
 ;s line(2)="from lab-test a"
 ;
 ;sql(0,1)=%z("dq"_"1"_%z("dq")
 ;sql(1,1)="select t0.c0 membercaption3,t0.c1 usevalue,t0.c0 membercaption6,t0.c1 displayvalue"
 ;sql(1,2)="from "_%z("dq")_"2"_%z("dq") t0"
 ;sql(1,3)="order by 4 asc"
 ;sql(2,1)="select min(lab-test.lab) c0,lab-test.lab c1"
 ;sql(2,2)="from lab-test lab-test"
 ;sql(2,3)="group by lab-test.lab,lab-test.lab"
 q
 ;
test ; test
 k
 d gvars^%mgsqlv("",.%z)
 g test2
 set line(1)="select  t0.c0 membercaption3 , t0.c1 usevalue , t0.c0 membercaption6 , t0.c1 displayvalue"
 set line(2)="from  ("
 set line(3)="select  min(lab-test.lab) c0 , lab-test.lab c1"
 set line(4)="from  lab-test lab-test"
 set line(5)="group  by lab-test.lab , lab-test.lab) t0"
 set line(6)="order  by 4 asc"
 s qnummax=$$main(.sql,.line)
 k %z
 q
test1 ;
 set line(1)="select a.pat-num,   a.pat-nam"
 set line(2)="into :xxx, :yyy"
 set line(3)="from patient a"
 set line(4)="where a.pat-num > :strt and a.pat-num [ ""xxx"""
 s qnummax=$$main(.sql,.line)
 k %z
 q
test2 ;
 s line(1)="select distinct a.num, a.name from patient a"
 s qnummax=$$main(.sql,.line)
 k %z
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlp1" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlp1 ;(CM) sql language processor ; 14 aug 2002  6:15 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlp1") q
 ;
main(qnummax,sql2,wrk,sql,error) ; entry
 n blk
 d blks(qnummax,.sql2,.wrk,.blk,.error) i $l(error) g exit
 d subs(qnummax,.sql2,.blk,.error) i $l(error) g exit
 d extr(qnummax,.sql2,.blk,.tmp,.error) i $l(error) g exit
 d grpx(qnummax,.sql2,.blk,.tmp,.error) i $l(error) g exit
 d reds(qnummax,.sql2,.blk,.tmp,.error) i $l(error) g exit
 d logb(qnummax,.sql2,.blk,.tmp,.error) i $l(error) g exit
 d sqlb(qnummax,.sql2,.blk,.tmp,.sql,.error) i $l(error) g exit
 d updx(qnummax,.sql2,.blk,.tmp,.sql,.error) i $l(error) g exit
 d puts(qnummax,.sql,.error) i $l(error) g exit
 d unix(qnummax,.sql2,.blk,.sql,.error) i $l(error) g exit
exit ; exit
 q
 ;
blks(qnummax,sql2,wrk,blk,error) ; break query into logic blocks
 n i,x,ln,ln1,lna,lnz,txt,txt1,cn,cn1,cna,cnz,rem,blkno,obr,cbt,lobr,tcbr,char,no,delim,delimb,qnum
 s blkno=1000
 s qnum=qnummax i 'qnum g blks3
blks1 s delim=%z("dq")_qnum_%z("dq")
 s ln="" f  s ln=$o(wrk(ln)) q:ln=""  s txt=wrk(ln) i txt[delim q
 s lobr=0,txt1=$p(txt,delim,1),ln1=ln,cn1=$l(txt1)
 f  s:cn1=0 ln1=$o(wrk(ln1),-1),txt1=$s($l(ln1):wrk(ln1),1:""),cn1=$l(txt1) q:ln1=""  i cn1 s char=$e(txt1,cn1),cn1=cn1-1 q:char'=" "&(char'="(")  s:char="(" lobr=lobr+1,lobr(lobr,0)=ln1,lobr(lobr,1)=cn1+1
 s no=""
blks2 s no=$o(lobr("")) i no="" g blks3
 s lna=lobr(no,0),cna=lobr(no,1)
 d blks4 i $l(error) q
 k tcbr s tcbr=0,txt1=wrk(lnz),ln1=lnz,cn1=cnz
 f  s char=$e(txt1,cn1) s:char="" ln1=$o(wrk(ln1)),txt1=$s($l(ln1):wrk(ln1),1:""),cn1=1,char=$e(txt1,cn1) q:ln1=""  s cn1=cn1+1 q:char'=" "&(char'=")")  s:char=")" tcbr=tcbr+1,tcbr(tcbr,0)=ln1,tcbr(tcbr,1)=cn1-1
 s rem=lobr i tcbr<lobr s rem=tcbr
 s x="" f i=1:1:rem s x=$o(lobr("")) q:x=""  s $e(wrk(lobr(x,0)),lobr(x,1))=" " k lobr(x)
 s x="" f i=1:1:rem s x=$o(tcbr("")) q:x=""  s $e(wrk(tcbr(x,0)),tcbr(x,1))=" " k tcbr(x)
 s blkno=blkno-1,blk=0,delimb=%z("dq")_"b"_blkno_%z("dq")
 i lna=lnz s txt=$e(wrk(lna),cna+1,cnz-1) d blksa s txt1=$e(wrk(lna),1,cna-1)_delimb_$e(wrk(lna),cnz+1,9999) k wrk(lna) i $l(txt1) s wrk(lna)=txt1 g blks21
 s txt=$e(wrk(lna),cna+1,9999) d blksa s txt1=$e(wrk(lna),1,cna-1)_delimb k wrk(lna) i $l(txt1) s wrk(lna)=txt1
 s ln1=lna f  s ln1=$o(wrk(ln1)) q:ln1=""!(ln1'<lnz)  s txt=wrk(ln1) d blksa k wrk(ln1)
 s txt=$e(wrk(lnz),1,cnz-1) d blksa s txt1=$e(wrk(lnz),cnz+1,9999) k wrk(lnz) i $l(txt1) s wrk(lnz)=txt1
blks21 g blks2
blks3 s qnum=qnum-1 i qnum>0 g blks1
 s blkno=0,blk=0,ln=""
 f  s ln=$o(wrk(ln)) q:ln=""  s txt=wrk(ln) d blksa
 q
 ;
blks4 ; mark out scope of logic block
 n ln1,cn1,cn0,txt1,char,obr,cbr,x
 s ln1=lna,txt1=wrk(ln1),cn0=cna
 s obr=0,cbr=0,(lnz,cnz)=0
blks41 f cn1=cn0:1:$l(txt1) s char=$e(txt1,cn1) s:char="(" obr=obr+1 s:char=")" cbr=cbr+1 i obr=cbr s cnz=cn1 q
 i 'cnz s x=$o(wrk(ln1)) i $l(x) s ln1=x,txt1=wrk(ln1),cn0=1 g blks41
 i 'cnz s error="error in the bracketing of sql statements",error(5)="HY000" q
 s lnz=ln1
 q
 ;
blksa ; add line to isolated block
 i txt="" q
 s blk=blk+1,blk(blkno,blk)=txt
 q
 ;
subs(qnummax,sql2,blk,error) ; restructure query wrt (sub) query bodies
 n delim,ok,blkno,ln,txt,qnum
 i 'qnummax q
 s qnum=qnummax
subs1 s delim=%z("dq")_qnum_%z("dq")
 s ok=0,blkno="" f  q:ok  s blkno=$o(blk(blkno)) q:blkno=""  s ln="" f  s ln=$o(blk(blkno,ln)) q:ln=""  s txt=blk(blkno,ln) i txt[delim s ok=1 q
 d subs4
 s qnum=qnum-1 i qnum>0 g subs1
 q
 ;
subs4 ; mark out block for (sub) query
 n ln1,lnz,cn1,cn0,cnz,txt1,char,ok,x,wrd
 s ln1=ln,txt1=blk(blkno,ln1),cn0=$l($p(txt1,delim,1))+1
 s ok=0,cnz=0,lnz=0
subs41 f cn1=cn0:1:$l(txt1) s char=$e(txt1,cn1) s:"{( "'[char lnz=ln1,cnz=cn1 i char="{",$e(txt1,cn1,cn1+$l(%z("dc"))-1)=%z("dc") s wrd=$p($e(txt1,cn1,9999),%z("dc"),2) i $l(wrd),$l(wrd)<128,$d(sql2(wrd)),sql2(wrd)=4 s ok=1 q
 i 'ok s x=$o(blk(blkno,ln1)) i $l(x) s ln1=x,txt1=blk(blkno,ln1),cn0=1 g subs41
 i 'ok s lnz=ln1,cnz=cn1
 s blk(blkno,lnz)=$e(blk(blkno,lnz),1,cnz)_delim_$e(blk(blkno,lnz),cnz+1,9999)
 q
 ;
extr(qnummax,sql2,blk,tmp,error) ; extract all (sub) queries
 n delim,ln,ln1,nodel,insub,txt,txt1,blkno,ok,qnum
 i qnummax=0 g extr4
 s qnum=qnummax
extr1 s delim=%z("dq")_qnum_%z("dq")
 s ok=0,blkno="" f  q:ok  s blkno=$o(blk(blkno)) q:blkno=""  s ln="" f  s ln=$o(blk(blkno,ln)) q:ln=""  s txt=blk(blkno,ln) i txt[delim s ok=1 q
 s insub=0,tmp=0
 s ln=ln-1
extr2 s ln=$o(blk(blkno,ln)) i ln="" g extr4
 s txt1=blk(blkno,ln),nodel=$l(txt1,delim)
 i nodel=3 s txt=$p(txt1,delim,2) d extra q:$l(error)  s txt1=$p(txt1,delim,1)_delim_$p(txt1,delim,3),blk(blkno,ln)=txt1 g extr3
 i nodel=2,'insub s insub=1 s txt=$p(txt1,delim,2) d extra q:$l(error)  s txt1=$p(txt1,delim,1)_delim,blk(blkno,ln)=txt1 g extr2
 i nodel=2,insub s txt=$p(txt1,delim,1) d extra q:$l(error)  s txt1=$p(txt1,delim,2),blk(blkno,ln)=txt1 g extr3
 i insub s txt=blk(blkno,ln) d extra q:$l(error)  k blk(blkno,ln)
 g extr2
extr3 s qnum=qnum-1,tmp=0 i qnum>0 g extr1
extr4 ; add update as 'subquery zero'
 s blkno=0,qnum=0,tmp=0,ln="" f  s ln=$o(blk(blkno,ln)) q:ln=""  s txt=blk(blkno,ln) d extra i $l(error) q
 q
 ;
extra ; add text to temporary (by (sub) query) array
 n i,n
 s txt=$$trim^%mgsqls(txt)
 i '$l(txt) q
 f i=2:2 s n=$p(txt,%z("dq"),i) q:n'?1n.n  i n<qnum s error="error in brackets with respect to sub-statements "_n_" and "_qnum,error(5)="HY000" q
 i $l(error) q
 s tmp=tmp+1,tmp(qnum,tmp)=txt,txt=""
 q
 ;
grpx(qnummax,sql2,blk,tmp,error) ; look out for group/order in wrong place and try to correct
 n ln,grp,ord,move,txt,qnum
 s qnum=0
grpx1 s qnum=qnum+1 i '$d(tmp(qnum)) q
 s ln=0,(grp,ord,move)=0
grpx2 s ln=ln+1 i '$d(tmp(qnum,ln)) g grpx3
 s txt=tmp(qnum,ln)
 i $e(txt,1,5+$l(%z("dc")))=(%z("dc")_"group") s grp=ln
 i $e(txt,1,5+$l(%z("dc")))=(%z("dc")_"order") s ord=ln
 i txt[%z("dq"),(ord!grp) s move=1
 g grpx2
grpx3 i 'move g grpx1
 i grp s tmp(qnum,ln)=tmp(qnum,grp),ln=ln+1 k tmp(qnum,grp)
 i ord s tmp(qnum,ln)=tmp(qnum,ord),ln=ln+1 k tmp(qnum,ord)
 g grpx1
 ;
reds(qnummax,sql2,blk,tmp,error) ; reduce query + logic block
 n blkno,blkno1,ln,qnum,qnum1,txt,txt1,pn,trans
 s blkno="" f  s blkno=$o(blk(blkno)) q:blkno=""  s ln="",blk=0 f  s ln=$o(blk(blkno,ln)) q:ln=""  s txt=blk(blkno,ln) d rems^%mgsqlp k blk(blkno,ln) i $l(txt) s blk=blk+1,blk(blkno,blk)=txt
 s qnum="" f  s qnum=$o(tmp(qnum)) q:qnum=""  s ln="",tmp=0 f  s ln=$o(tmp(qnum,ln)) q:ln=""  s txt=tmp(qnum,ln) d rems^%mgsqlp i $l(txt) s tmp=tmp+1,tmp(qnum,tmp)=txt
 s blkno=""
reds1 s blkno=$o(blk(blkno)) i blkno="" g reds4
 s ln=""
reds2 s ln=$o(blk(blkno,ln)) i ln="" g reds1
 s txt=blk(blkno,ln)
 s pn=0
reds3 s pn=pn+2,blkno1=$p(txt,%z("dq"),pn) i blkno1="" g reds2
 i blkno1'?1"b"1n.n g reds3
 s blkno1=$e(blkno1,2,9999)
 i $d(blk(blkno1,2)) g reds3
 s txt1=blk(blkno1,1) i txt1'[%z("dq")!(txt1[" ") g reds3
 s qnum1=$p(txt1,%z("dq"),2)
 s $p(txt,%z("dq"),pn)=qnum1,trans(blkno1)=qnum1,blk(blkno,ln)=txt k blk(blkno1)
 g reds3
reds4 s qnum=$o(tmp(qnum)) i qnum="" g redsx
 s ln=""
reds5 s ln=$o(tmp(qnum,ln)) i ln="" g reds4
 s txt=tmp(qnum,ln)
 s pn=0
reds6 s pn=pn+2,blkno1=$p(txt,%z("dq"),pn) i blkno1="" g reds5
 i blkno1'?1"b"1n.n g reds6
 s blkno1=$e(blkno1,2,9999)
 i $d(trans(blkno1)) s qnum1=trans(blkno1) g reds61
 i $d(blk(blkno1,2)) g reds6
 s txt1=blk(blkno1,1) i txt1'[%z("dq")!(txt1[" ") g reds6
 s qnum1=$p(txt1,%z("dq"),2)
reds61 s $p(txt,%z("dq"),pn)=qnum1,trans(blkno1)=qnum1,tmp(qnum,ln)=txt k blk(blkno1)
 g reds6
redsx ;
 q
 ;
logb(qnummax,sql2,blk,tmp,error) ; make easy to parse logic blocks
 n ln,txt,txt1,blkno,del,log
 s blkno=""
logb1 s blkno=$o(blk(blkno)) i blkno="" q
 s ln="",log=0,txt=""
logb2 s ln=$o(blk(blkno,ln)) i ln="" d logba g logb1
 s txt1=blk(blkno,ln)
logb3 s del=%z("dc") i $l($p(txt1,%z("dq"),1))<$l($p(txt1,%z("dc"),1)) s del=%z("dq")
 i txt1'[%z("dc"),txt1'[%z("dq") s txt=txt_" "_txt1 g logb2
 i del=%z("dq") s txt=txt_" "_$p(txt1,del,1) d logba s txt=del_$p(txt1,del,2)_del d logba s txt1=$p(txt1,del,3,9999) i txt1="" g logb2
 i del=%z("dc") s txt=txt_" "_$p(txt1,del,1) d logba s txt1=$p(txt1,del,2)_$p(txt1,del,3,9999) i txt1="" g logb2
 g logb3
 ;
logba ; add line to final logic block
 n i,n
 s txt=$$trim^%mgsqls(txt)
 i '$l(txt) q
 s log=log+1,log(blkno,log)=txt,txt=""
 q
 ;
sqlb(qnummax,sql2,blk,tmp,sql,error) ; make easy to parse sql blocks
 n ln,txt,txt1,qnum
 s qnum=-1
sqlb1 s qnum=qnum+1 i '$d(tmp(qnum)) q
 s ln="",sql=0,txt=""
sqlb2 s ln=$o(tmp(qnum,ln)) i ln="" d sqlba g sqlb1
 s txt1=tmp(qnum,ln)
sqlb3 i txt1'[%z("dc") s txt=txt_" "_txt1 g sqlb2
 s txt=txt_" "_$p(txt1,%z("dc"),1) d sqlba
 s txt1=$p(txt1,%z("dc"),2)_$p(txt1,%z("dc"),3,9999) i txt1="" g sqlb2
 g sqlb3
 ;
sqlba ; add line to final array
 n i,n
 f i=2:2 s n=$p(txt,%z("dq"),i) q:n'?1n.n  d sqlba1
 s txt=$$trim^%mgsqls(txt)
 i '$l(txt) q
 s sql=sql+1,sql(qnum,sql)=txt,txt=""
 q
 ;
sqlba1 ; remove redundant brackets from around sub-query link markers
 n pre,pst,len,cn,obr,obr1,cbr,cbr1,br,char
 s pre=$p(txt,%z("dq"),1,i-1),pst=$p(txt,%z("dq"),i+1,9999)
 s len=$l(pre),obr=0 f cn=len:-1 s char=$e(pre,cn) q:char'=" "&(char'="(")  s pre=$e(pre,1,cn-1) i char="(" s obr=obr+1
 s cbr=0 f  s char=$e(pst,1) q:char'=" "&(char'=")")  s pst=$e(pst,2,9999) i char=")" s cbr=cbr+1
 ;ref#19
 ;s br=obr i cbr<obr s br=cbr
 ;i obr=cbr s br=0
 ;s txt=pre_$s(br:" "_$e("((((((((((((",1,br),1:"")_" "_%z("dq")_n_%z("dq")_$s(br:" "_$e("))))))))))))",1,br),1:"")_" "_pst
 s (obr1,cbr1)=0
 i cbr>obr s cbr1=(cbr-obr)
 i obr>cbr s obr1=(obr-cbr)
 s txt=pre_$s(obr1:" "_$e("((((((((((((",1,obr1),1:"")_" "_%z("dq")_n_%z("dq")_$s(cbr1:" "_$e("))))))))))))",1,cbr1),1:"")_" "_pst
 q
 ;
updx(qnummax,sql2,blk,tmp,sql,error) ; now remove update command from body of formatted primary
 n i,x,y,upd,whr,atr,upda
 s (whr,upd,atr)=0,upda=""
 f i=1:1 q:'$d(sql(1,i))  s x=sql(1,i),y=$p(x," ",1) s:y="where" whr=1 s:y="attributes" atr=1 s:y="update" upda=$p(x," ",2,9999) i $l(y),$d(sql2(y)),sql2(y)=3 s upd=upd+1,upd(upd)=x k sql(1,i)
 s x="" f i=1:1 s x=$o(sql(1,x)) q:x=""  s y=sql(1,x) k sql(1,x) s sql(1,i)=y
 f i=1:1 q:'$d(sql(0,i))  s x=sql(0,i),y=$p(x," ",1) i $l(y),$d(sql2(y))!(x[%z("dq")) s upd=upd+1,upd(upd)=x
 k sql(0) f i=1:1 q:'$d(upd(i))  s sql(0,i)=upd(i)
 i atr,'whr k sql(1) f i=1:1 q:'$d(sql(0,i))  i sql(0,i)[%z("dq") k sql(0,i)
 i $d(sql(0,1)),$p(sql(0,1)," ",1)="update",$d(sql(1,2)),$p(sql(1,2)," ",1)="from" s sql(1,2)="from "_upda
 s i=$o(sql(0,""),-1) i i="" q
 s x=sql(0,i) i x'[" " q
 s y=$p(x," ",1) i y[%z("dq") q
 s y=$p(x," ",$l(x," ")) i y'[%z("dq") q
 s sql(0,i)=$p(x," ",1,$l(x," ")-1),sql(0,i+1)=y
 q
 ;
puts(qnummax,sql,error) ; tidy up lines of statement text
 n i,lnd,txt,qnum
 f qnum=0:1 q:'$d(sql(qnum))  f i=1:1 q:'$d(sql(qnum,i))  s txt=sql(qnum,i) d rems^%mgsqlp,remsc^%mgsqlp s sql(qnum,i)=txt ;$$rstring^%mgsqlp(txt)
 q
 ;
unix(qnummax,sql2,blk,sql,error) ; extract work units for old compiler
 n i,ln,blkno,txt,txt1,qnum,qnum1
 s qnum=-1
unix1 s qnum=qnum+1 i '$d(sql(qnum)) q
 s ln=0
unix2 s ln=ln+1 i '$d(sql(qnum,ln)) g unix1
 s txt=sql(qnum,ln)
 i txt'[(%z("dq")_"b") g unix2
 i qnum>0 s error="union, intersect, except operations not supported for sub-queries",error(5)="HY000" q
 s blkno=$e($p(txt,%z("dq"),2),2,9999)
 f blk=1:1 q:'$d(blk(blkno,blk))!$l(error)  s txt1=blk(blkno,blk) f i=2:2 s qnum1=$p(txt1,%z("dq"),i) q:qnum1=""  s sql("union",qnum1)="" i qnum1["b" s error="precedence not supported for set operations",error(5)="HY000" q
 i $l(error) q
 g unix2
 ;
 
]]></Routine>


<Routine name="%mgsqlr" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mqsqlr ;(CM) MGSQL routine management ; 11 feb 2002  2:40 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlr") q
 ;
zname(var) ; get routine name
 i $$isydb^%mgsqls() q "s "_var_"=$p($zposition,""^"",2)"
 q "s "_var_"=$zn"
 ;
zd(rou) ; routine defined
 s $zt="zde^%mgsqlr" ; new $ztrap set $ztrap="zgoto "_$zlevel_":zde^%mgsqlr"
 i $$isydb^%mgsqls() g zdydb
 x "zr  zl @rou"
 q 1
zde ; error
 q 0
zdydb ; yottadb
 n dev
 s dev=$zd_rou_".m"
 o dev:(readonly) s ok=$t
 c dev
 q ok
 ;
zn(rou) ; get next routine
 q ""
 ;
zr(rou) ; delete routine
 i $$isydb^%mgsqls() g zrydb
 x "zr  zs @rou"
 q 1
zrydb ; yottadb
 n dev
 s dev=$zd_rou_".m"
 o dev:(truncate)
 c dev:(delete)
 q 1
 ;
zs(rou,code,mxi) ; save routine
 i $$isydb^%mgsqls() g zsydb
 x "zr  f i=1:1:mxi zi @code zs:i=mxi @rou"
 q 1
zsydb ; yottadb
 n i,dev
 s dev=$zd_rou_".m"
 o dev:(truncate)
 u dev f i=1:1:mxi w @code_$c(10)
 c dev
 zlink dev
 q 1
 ;
  
]]></Routine>


<Routine name="%mgsqls" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqls ;(CM) general utilities ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqls") q
 ;
isydb() ; see if this is yottadb
 i $zv["GT.M" q 1
 q 0
 ;
isidb() ; see if this is an InterSystems database
 i $zv["ISM" q 1
 i $zv["Cache" q 2
 i $zv["IRIS" q 3
 q 0
 ;
ismsm() ; see if this is MSM
 i $zv["MSM" q 1
 q 0
 ;
isdsm() ; see if this is DSM
 i $zv["DSM" q 1
 q 0
 ;
ism21() ; see if this is M21
 i $zv["M21" q 1
 q 0
 ;
error() ; get last error
 i $$isydb() q $zs
 q $ze
 ;
seterror(v) ; Set error
 ; +not_ydb
 s $ze=v
 ; -not_ydb
 q
 ;
uci() ; get uci name
 i $$isydb() q $zg
 x "s uci=$namespace"
 q uci
 ;
cuci(uci) ; change uci
 i $$isydb() q $zg
 x "zn uci"
 q 1
 ;
gtmgr ; restore global
 s dev="/opt/gtm63/cm.go"
 o dev:(readonly)
 u dev f i=1:1 r x q:x=""  s ref=$p(x,$c(1),1),data=$p(x,$c(1),2),@ref=data
 c dev
 q
 ;
flush() ; flush output buffer
 i $$isydb() q
 w *-3
 q
 ;
trim(x) ; trim leading/trailing spaces from text
 q $$ltrim($$rtrim(x))
 ;
ltrim(x) ; trim leading spaces from text
 f  q:$e(x,1)'=" "  s x=$e(x,2,9999)
 q x
 ;
rreplace(x,this,with) ; recursive replace
 f  q:$e(x,1)'[this  s x=$p(x,this,1)_with_$p(x,this,2,9999)
 q x
 ;
rtrim(x) ; trim trailing spaces from text
 n len
 s len=$l(x) f  q:$e(x,len)'=" "  s x=$e(x,1,len-1),len=len-1
 q x
 ;
ucase(x) ; convert string to upper-case
 q $tr(x,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
 ;
lcase(x) ; convert string to lower-case
 q $tr(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz")
 ;
hextodec(x) ; convert hexadecimal to decimal
 n len,d,n,c
 ;w !,">>>",x
 s len=$l(x),x=$$lcase(x)
 s d=0
 f n=len:-1:1 s c=$e(x,n),d=d+(($f("0123456789abcdef",c)-2)*(16**(len-n))) ;w !,c," = ",len," ",n," ",d," ### ",$f("0123456789abcdef",c)-2," ### ",16**(len-n)," === ",($f("0123456789abcdef",c)-2)*(16**(len-n))
 w !
 q d
 ;
urldecode(x) ; URL decode
 n y,cx,xy,i
 s y=""
 f i=1:1:$l(x) s cx=$e(x,i) q:cx=""  d
 . s cy=cx
 . i cx="+" s cy=" "
 . i cx="%" s cy=$c($$hextodec($e(x,i+1,i+2))) s i=i+2
 . s y=y_cy
 . q
 q y
 ;
cdate() ; current date
 q $p($h,",",1)
 ;
ctime() ; current time
 q $p($h,",",2)
 ;
ts() ; time stamp
 q $h
 ;
mv() ; missing value
 q ""
 ;
age(mdate) ; calculate age
 q (+$h-mdate)\365.25
 ;
ddate(mdate,format) ; decode M date
 n d,m,y,ddate
 i mdate="" q ""
 s ddate=$zd(mdate,1)
 s d=$p(ddate,"/",2)
 s m=$p(ddate,"/",1)
 s y=$p(ddate,"/",3)
 i $$isydb(),y<100 d
 . i mdate<58074 s y=y+1900
 . i mdate'<58074 s y=y+2000
 . q
 i '$$isydb(),y<100 d
 . i mdate<58074 s y=y+1900
 . q
 s ddate=y_"-"_m_"-"_d
 q ddate
 ;
edate(ddate,format) ; encode M date
 n dd,dj,djstr,dl,dlm,dm,dy,i,mdate,x,y,ok
 i ddate="" q ""
 s ddate=$$ltrim(ddate)
 i ddate?8n s dy=$e(ddate,1,4),dm=$e(ddate,5,6),dd=$e(ddate,7,8) g edate1
 i ddate?4n1"-"2n1"-"2n s dy=$p(ddate,"-",1),dm=$p(ddate,"-",2),dd=$p(ddate,"-",3) g edate1
 i ddate["." s dlm="."
 i ddate["," s dlm=","
 i ddate["/" s dlm="/"
 i ddate[" " s dlm=" "
 s dd=$p(ddate,dlm,1)
 s dm=$p(ddate,dlm,2)
 s dy=$p(ddate,dlm,3)
edate1 s mdate=""
 i dm'?1N.N d
 . s dm=$$lcase(dm)
 . f i=1:1:12 i $p("jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec",",",i)=dm s dm=i q
 . i dm'?1n.n s dm=0
 . q
 i ((dd'<1)&(dd'>31)&(dm'<1)&(dm'>12)&(dy'<0)&(dy'>9999)) d
 . i dy<100,dy<30 s dy=dy+2000
 . i dy<100,dy'<30 s dy=dy+1900
 . s dl=0
 . i (((dy#4)=0)&(dy'=1900)) s dl=1
 . s ok=1
 . i ((dd>30)&((dm=4)!(dm=6)!(dm=9)!(dm=11))) s ok=0
 . i ((dm=2)&(((dl=0)&(dd>28))!((dl=1)&(dd>29)))) s ok=0 ;
 . i (ok=1) d
 .. i dl=0 s djstr=$p("000,031,059,090,120,151,181,212,243,273,304,334",",",dm),dj=djstr+dd
 .. i dl'=0 s djstr=$p("000,031,060,091,121,152,182,213,244,274,305,335",",",dm),dj=djstr+dd
 .. s x=(dy-1841)*365
 .. s y=(dy-1841)\4
 .. s mdate=dj+x+y
 .. i (dy>1900) s mdate=(mdate-1)
 .. i (dy'>1900) s mdate=mdate
 .. q
 . q
 q mdate
 ;
dtime(mtime,format) ; decode M time
 n h,m,s
 i mtime="" q ""
 i mtime["," s mtime=$p(mtime,",",2)
 s h=mtime\3600,s=mtime-(h*3600),m=s\60,s=s#60
 q $s(h<10:"0",1:"")_h_":"_$s(m<10:"0",1:"")_m_":"_$s(s<10:"0",1:"")_s
 ;
etime(dtime,format) ; encode M time
 n h,m,s
 i etime="" q ""
 s h=$p(dtime,":",1),m=$p(dtime,":",2),s=$p(dtime,":",3)
 q (h*3600)+(m*60)+s
 ;
logerror(text,title) ; log error condition
 d logevent(text,title,"ERROR") ; log
 q
 ;
logevent(record,title,context) ; log event
 s n=$i(^mglog)
 s ^mglog(n,0)=context_":"_title_":"_$$ddate($h)_"; "_$$dtime($h)
 s ^mglog(n,1)=record
 q
 ;
logarray(array,title,context) ; log event
 s n=$i(^mglog)
 s ^mglog(n,0)=context_":"_title_":"_$$ddate($h)_"; "_$$dtime($h)
 m ^mglog(n,1)=array
 q
 ;
]]></Routine>


<Routine name="%mgsqlv" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
 
%mqsqlv ;(CM) sql - validate query ; 14 aug 2002  6:23 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv") q
 ;
main(dbid,line,error) ; verify query
 k ^mgtmp($j)
 k %link,%delrec,union,adhoc,txp,error,sqfun
 k ojcnt,ojkey1,ojtagbp,ojtagbxx,ojtagpxx,ojtagxx
 s error=""
 d gvars(dbid,.%z)
 s qnummax=$$main^%mgsqlp(.sql,.line,.error) i $l(error) g exit
 i '$d(sql(0,1)),$d(sql("txp",0)) s unique=1 g exit
 i '$d(sql(0,1)) s error="no sql script !!!",error(5)="HY000" g exit
 d upd(dbid,.sql,.error) i $l(error) g exit
 ;i $d(update("delete")),hilev g exit
 i $p(sql(0,1)," ",1)="call" d sp(dbid,.sql,.error) g exit
 f qnum=1:1:qnummax d verify(dbid,.sql,qnum,.error) i $l(error) q
 i $l(error) g exit
 s comord="",comdel="" f i=qnummax:-1:1 s comord=comord_comdel_i,comdel="~"
 i $d(%delrec(0)) d delrec i $l(error) g exit
 d unique
 s i="" f  s i=$o(^mgtmp($j,"wher",i)) q:i=""  f j=1:1 q:'$d(^mgtmp($j,"wher",i,j))  s x=^mgtmp($j,"wher",i,j) i x[%z("dq") d sqidx
 i '$d(update("insert")),'$d(^mgtmp($j,"from",1,1)) s error="no table to select 'from'",error(5)="HY000" g exit
 i '$d(update("insert")),'$d(^mgtmp($j,"sel",1,1)) s error="no 'select' items",error(5)="HY000" g exit
 ;
exit i $l(error) d error
 k ans,arg,bkt,cmnd,cod,com,comdel,cond,d,done,dx,dy,f,tname,alias,fr,fun,funk,i,ii,j,k,l,l1,l2,lc,lf,lin,num,os,p,rf,selarg,selct,ss1,ss2,to,typ,whct,x,y,z
 q
 ;
gvars(dbid,vars) ; initialize global variables
 k vars
 s vars("pv")="sq"
 s vars("pt")="sq"
 s vars("dsv")="{s}"
 s vars("dev")="{v}"
 s vars("df")="{f}"
 s vars("de")="{e}"
 s vars("dq")="{q}"
 s vars("dl")="{l}"
 s vars("ds")="{$}"
 s vars("dc")="{z}"
 s vars("vok")=%z("dsv")_"__status"_%z("dsv")
 s vars("vdata")=%z("dsv")_"__data"_%z("dsv")
 s vars("vdatax")=%z("dsv")_"__datax"_%z("dsv")
 s vars("vrc")=%z("dsv")_"__rowcount"_%z("dsv")
 s vars("vn")=%z("dsv")_"__count"_%z("dsv")
 s vars("vnx")=%z("dsv")_"__count_d"_%z("dsv")
 s vars("vdef")=%z("dsv")_"__defined"_%z("dsv")
 s vars("vck")=%z("dsv")_"__compound_key"_%z("dsv")
 s vars("vckcrc")=%z("dsv")_"__compound_key_crc"_%z("dsv")
 s vars("vckcrcdef")=%z("dsv")_"__compound_key_crc_defined"_%z("dsv")
 ;
 s vars("ctg")="^mgtemp"
 s vars("cts")="$j"
 s vars("ccode")="^mgsqlx(1,dbid,qid,""m"""
 s vars("ccoder")="^mgsqlx(1,dbid,qid,""mr"""
 q
 ;
sqidx ; index subqueries against parents
 s subq=$p(x,%z("dq"),2),x=^mgtmp($j,"wher",i,j-1)
 s ^mgtmp($j,"sqcom",subq)=x
 i x="exists" s kiltemp(subq)="" q
 i x="not exists" s kiltemp(subq)="" q
 i x="in" s v=^mgtmp($j,"wher",i,j-2),kiltemp(subq)="",^mgtmp($j,"notnull",i,v)="",sqin(v)=subq q
 i x="not in" s v=^mgtmp($j,"wher",i,j-2),kiltemp(subq)="",^mgtmp($j,"notnull",i,v)="" q
 i $d(unique(subq)),'unique(subq) s kiltemp(subq)="" q
 q
 ;
unique ; determine whether unique result is to be returned
 i qnum=1,$d(update) s (unique(1),unique)=1 q
 s unique=0
 f i=1:1:qnum s unique(i)=0
 ;;;f i=1:1:qnum s unique(i)=1,x=^mgtmp($j,"sel",i) i x'?1n.n2u,x'="last" d
 ;;;. f j=1:1 q:'$d(^mgtmp($j,"outsel",i,j))  s x=^(j) i '$d(^mgtmp($j,"wsel",x)),x[%z("dsv"),$p(x,%z("dsv"),2)'?.n1a.u.1"_".u1"("1e.e1")" s unique(i)=0 q
 i $d(gvar(1)) s (unique(1),unique)=0 q
 q
 ;
error ; format error message
 n cmnd,qnum,ln
 s ln="",qnum=""
 i $d(error(1)) s cmnd=error(0),qnum=error(1) d error1
 i ln'="" s error("l")=ln
 q
 ;
error1 ; look for line number
 n i,x
 i $d(^mgtmp($j,"cmnd",qnum,cmnd)) s ln=^(cmnd) q
 i $d(^mgtmp($j,"cmnd",0,cmnd,qnum)) s ln=^(qnum) q
 f i=1:1:$l(qnum,",") s x=$p(qnum,",",i) i $l(x),$d(^mgtmp($j,"cmnd",0,cmnd,x)) s ln=^(x) q
 q
 ;
upd(dbid,sql,error) ; validate update directive
 n qnum,ln
 s qnum=0,ln=1
 i $p(sql(qnum,ln)," ",1)="update" d update^%mgsqlv3 i $l(error) q
 i $p(sql(qnum,ln)," ",1)="delete" d delete^%mgsqlv3 i $l(error) q
 i $p(sql(qnum,ln)," ",1)="insert" d insert^%mgsqlv4 i $l(error) q
 i $p(sql(qnum,ln)," ",1)="create" d create^%mgsqlv4(dbid,.sql,.error) q
 i $p(sql(qnum,ln)," ",1)="drop" d drop^%mgsqlv4(dbid,.sql,.error) q
 q
 ;
sp(dbid,sql,error) ; stored procedure
 n qnum,ln,pname,r,ord,type,rou
 s qnum=0,ln=1
 s pname=$p(sql(qnum,ln)," ",2)
 s r=$$prc^%mgsqld(dbid,pname)
 s rou=$p(r,"\",2)
 s rc=$$pdata^%mgsqld(dbid,pname,.%data)
 s qnum=1
 s cname="" f  s cname=$o(%data(cname)) q:cname=""  d
 . s ord=$p(%data(cname),"\",1)+0
 . s type=$p(%data(cname),"\",2)
 . s ^mgtmp($j,"outsel",qnum,ord)=cname
 . q
 s ^mgtmp($j,"sp")=rou
 s error="\sp\"
 q
 ;
verify(dbid,sql,qnum,error) ; verify current line
 n ln,cmnd,arg
 f ln=1:1 q:'$d(sql(qnum,ln))  i $p(sql(qnum,ln)," ",1)="from" q
 i '$d(sql(qnum,ln)) s error="missing/misplaced 'from' statement in (sub) query "_qnum,error(5)="HY000",error(0)="select",error(1)=qnum g verifyx
 s cmnd=$p(sql(qnum,ln)," ",1),arg=$p(sql(qnum,ln)," ",2,9999)
 i cmnd="from" d from^%mgsqlv5(dbid,.sql,qnum,arg,.error) i $l(error) g verifyx
 s ln=0
verify1 s ln=ln+1 i '$d(sql(qnum,ln)) g verifyx
 s cmnd=$p(sql(qnum,ln)," ",1),arg=$p(sql(qnum,ln)," ",2,9999)
 i ln=1,cmnd'="select" s error="missing/misplaced 'select' statement in (sub) query "_qnum,error(5)="HY000",error(0)=cmnd,error(1)=qnum g verifyx
 i cmnd="order",$p(arg," ",1)="by" s arg=$p(arg," ",2,9999)
 i cmnd="group",$p(arg," ",1)="by"  s arg=$p(arg," ",2,9999)
 i cmnd="select" d select^%mgsqlv2(dbid,.sql,qnum,.arg,.error) i $l(error) g verifyx
 i cmnd="where" d where^%mgsqlv1(dbid,.sql,qnum,.arg,.error) i $l(error) g verifyx
 i cmnd="order" d order^%mgsqlv2(dbid,.sql,qnum,.arg,.error) i $l(error) g verifyx
 i cmnd="group" d group^%mgsqlv2(dbid,.sql,qnum,.arg,.error) i $l(error) g verifyx
 i cmnd="having" d having^%mgsqlv2(dbid,.sql,qnum,.arg,.error) i $l(error) g verifyx
 g verify1
verifyx i '$l(error),qnum=1,$d(sql("union",qnum)) s ^mgtmp($j,"sel",qnum)="distinct"
 q
 ;
grp ; look for auto-group situation in outer query
 n x,y,z,com,agrp,ok,ln
 i qnum'=1 q
 i sql(qnum,1)["select *" q
 s ok=0 f ln=1:1 q:'$d(sql(qnum,ln))  i $p(sql(qnum,ln)," ",1)="group" s ok=1 q
 i ok q
 s z="",com="",agrp=0 f i=1:1 q:'$d(^mgtmp($j,"outsel",qnum,i))  s x=^mgtmp($j,"sel",1,i) i x[%z("dsv") s x=$p(x,%z("dsv"),2) s:x'?.1"."1a.e agrp=0 q:x'?.1"."1a.e  s:x'["(" z=z_com_x,com="," s:x["(" agrp=1
 i 'agrp!'$l(z) q
 s z="group by "_z
 s sql(qnum,ln)=z
 q
 ;
delrec ; validate the delete records declaration
 n alias,qnum
 s alias=$p(%delrec(0),":",1)
 f qnum=1:1 q:'$d(^mgtmp($j,"from","x",qnum))  i $d(^mgtmp($j,"from","x",qnum,alias)) s %delrec(0,alias)="" q
 i '$l($o(%delrec(0,""))) s error="alias '"_%delrec(0)_"' in 'delete_records' is not defined in the query",error(5)="HY000" q
 q
 ;
trx(wrd) ; data translation 
 n i,ii,arg,pre,post
 s ^mgtmp($j,"trx",wrd)=""
 f i=1:1 s chr=$e(wrd,i) i chr=":"!(chr?1"""")!(chr?1n)!(chr="") q
 f ii=$l(wrd):-1:1 s chr=$e(wrd,ii) i chr?1""""!(chr?1an)!(chr="") q
 s arg=$e(wrd,i,ii),pre=$e(wrd,1,i-1),post=$e(wrd,ii+1,9999)
 i arg?1":"1a.e s arg=$e(arg,2,999) i arg'="" s ^mgtmp($j,"in",arg)=""
 q %z("dsv")_wrd_%z("dsv")
 ;
 
]]></Routine>


<Routine name="%mgsqlv1" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlv1 ;(CM) sql - validate query part 2 ; 14 aug 2002  6:24 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv1") q
 ;
addwhr(qnum,item) ; add item to where statement
 n wnum
 s wnum=$i(^mgtmp($j,"wher",qnum))
 s ^mgtmp($j,"wher",qnum,wnum)=item
 q wnum
 ;
where(dbid,sql,qnum,arg,error) ; validate 'where' statement
 n ln,wn,wnum,pred,wrd,word,ex,sqlex
 s pred="" i $d(^mgtmp($j,"pred",qnum)) s pred=^(qnum)
 i $l(pred) s:$l(arg) arg=" and "_arg s arg="("_pred_")"_arg
 i $l(arg) s ex(1)=arg d where^%mgsqle(.ex,.word,.error) i $l(error) g wherex
 d link^%mgsqlv6
 s wn=0
where1 s wn=wn+1 i '$d(word(0,wn)) g wherex
 s wrd=word(0,wn)
 i wrd[%z("dsv") d where2 i $l(error) g wherex
 i wrd[%z("df") d where3 i $l(error) g wherex
 s wnum=$$addwhr(qnum,wrd)
 g where1
wherex i $l(error),qnum?1n.n s error(0)="where",error(1)=qnum
 q
 ;
where2 ; validate sql column
 n %d,%defk,%defd,%defm,x,y,z,typ,qnum1,fun,tname,alias
 i qnum'["g" s qnum1=qnum
 s x=$p(wrd,%z("dsv"),2)
 i qnum'["g" d corel i $l(error) s error=error_": "_x q
 i qnum["g",x="count(*)" s fun="count" g where21
 i x'["." s error="column '"_x_"' (in 'where'/'having' statement) is not qualified by table name/alias",error(5)="HY000" q
 s cname=x,fun="" i x["(" s fun=$p(x,"(",1),x=$p(x,"(",2,999) i fun="count"&(x[" ") s fun="cntd",x=$p(x," ",2,999)
 s x=$p(x,")",1)
 s f=$p(x,".",1),(x,cname)=$p(x,".",2)
 i qnum'["g",$l(fun) s error="the 'where' statement must not contain references to sql aggregates",error(5)="HY000" q
 i $d(sql("union",qnum)),'$d(^mgtmp($j,"from","x",qnum,f)) s error="invalid alias '"_f_"': 'union' queries cannot be correlated",error(5)="HY000" q
 i qnum'["g" f j=1:1:qnum q:'$d(^mgtmp($j,"from","x",j))  i $d(^mgtmp($j,"from","x",j,f)) s y=^mgtmp($j,"from","x",j,f),y=^mgtmp($j,"from",j,y),tname=$p(y,"~",1),alias=$p(y,"~",2) q
 i qnum["g" i $d(^mgtmp($j,"from","x",1,f)) s y=^mgtmp($j,"from","x",1,f),y=^mgtmp($j,"from",1,y),tname=$p(y,"~",1),alias=$p(y,"~",2)
 i qnum'["g",'$d(^mgtmp($j,"from","x",j,f)) s error="column '"_x_"' (in the 'where' statement) is qualified by an unknown table name/alias",error(5)="HY000" q
 i qnum["g",'$d(^mgtmp($j,"from","x",1,f)) s error="column '"_x_"' (in the 'having' statement) is qualified by an unknown table name/alias",error(5)="HY000" q
 i tname?@("1"""_%z("dq")_"""1n.n1"""_%z("dq")_"""") d  q:$l(error)  g where22
 . n qnum
 . s qnum=$p(tname,%z("dq"),2)
 . i '$d(^mgtmp($j,"vx",qnum,x)) s error="column '"_x_"' ('where'/'having' statement) is not part of derived table "_alias,error(5)="42S22" q
 . q
 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) d remap^%mgsqlv2 i '%defk,'%defd,'%defm s error="column '"_x_"' ('where'/'having' statement) is not part of table "_tname,error(5)="42S22" q
 s %d=$$col^%mgsqld(dbid,tname,cname) s typ=$p(%d,"\",11)
where22 i qnum'["g" s item=%z("dsv")_f_"."_cname_%z("dsv"),snum=$$addselx^%mgsqlv2(qnum,item) s ^mgtmp($j,"wsel",item)=""
 i qnum["g" s item=%z("dsv")_f_"."_cname_%z("dsv"),snum=$$addselx^%mgsqlv2(qnum,item) s ^mgtmp($j,"wsel",item)=""
 i fun="" q
where21 i "count,cntd,sum,avg,max,min"'[fun q
 s qnum1=qnum+0
 i x="count(*)" s z="*"_qnum1,wrd=%z("dsv")_"count("_"*"_qnum1_")"_%z("dsv")
 i x'="count(*)" s z=f_"."_x
 s y=%z("dsv")_fun_"("_z_")"_%z("dsv")
 i fun["(" s y=y_")"
 s snum=$$addselx^%mgsqlv2(qnum1,y)
 s ^mgtmp($j,"wsel",y)=""
 i '$d(sqfun(qnum1,z,fun)) s sqfun(qnum1,z,fun)=selct
 q
 ;
where3 ; force declaration of functions in 'where' statement
 n ex,word,wn
 s ex(1)=$p(wrd,%z("df"),2) d exp i $l(error) q
 s wrd=%z("dsv")_outv_%z("dsv")
 q
 ;
corel ; determine if sql variable comes from different sub-query
 n i,alias
 s alias=$p(x,".",1) i alias="" q
 i $d(^mgtmp($j,"from","x",qnum,alias)) q
 f i=1:1 q:'$d(^mgtmp($j,"from","x",i))  i $d(^mgtmp($j,"from","x",i,alias)) q
 i '$d(^mgtmp($j,"from","x",i,alias)) q
 i $d(sql("union",qnum)),$d(sql("union",i)) s error="'union' (sub) queries may not be correlated",error(5)="HY000" q
 s corel(i,qnum,alias)="",corel("x",qnum,i,alias)="",corel(i,qnum)=0
 s corel(i,qnum,alias,x)=""
 q
 ;
exp ; embedded function
 s outv="cmcmcm"
 d ex^%mgsqle(outv,.ex,.word,.code,.fun,.error)
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlv2" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlv2 ;(CM) sql - validate query part 3 ; 14 aug 2002  6:24 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv2") q
 ;
addsel(qnum,item) ; add item to output select list
 n snum,snum1
 s snum=$$addselx(qnum,item)
 s snum1=$i(^mgtmp($j,"outsel",qnum))
 s ^mgtmp($j,"outsel",qnum,snum1)=item,^mgtmp($j,"outselx",qnum,item)=snum1
 q snum1
 ;
addselx(qnum,item) ; add item to general select list
 n snum
 s snum=$i(^mgtmp($j,"sel",qnum))
 s ^mgtmp($j,"sel",qnum,snum)=item,^mgtmp($j,"selx",qnum,item)=snum
 q snum
 ;
group(dbid,sql,qnum,arg,error) ; validate 'group by' statement
 s gvar(qnum)="",com=""
 f i=1:1:$l(arg,",") s x=$p(arg,",",i) d group1 i $l(error) s error(0)="group",error(1)=qnum q
 i '$l(gvar(qnum)) k gvar(qnum)
 q
 ;
group1 ; for each element grouped by
 d getf i $l(error) q
 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error="column '"_cname_"' (in 'group by' statement) is not part of table '"_tname_"'",error(5)="42S22" q
 s gvar(qnum,i)=%z("dsv")_f_"."_cname_%z("dsv"),gvar(qnum)=gvar(qnum)_com_gvar(qnum,i),com=","
 q
 ;
having(dbid,sql,qnum,arg,error) ; validate 'having'
 n qnumh
 s x="count(distinct " f i=1:1:$l(arg,x) q:arg'[x  s arg=$p(arg,x,1)_"cntd("_$p(arg,x,2,999)
 s qnumh=qnum_"g" d where^%mgsqlv1(dbid,sql,qnumh,arg,error) i $l(error) g havingx
 f i=1:1 q:'$d(^mgtmp($j,"wher",qnumh,i))  s hav(i)=^mgtmp($j,"wher",qnumh,i) i hav(i)[%z("dsv"),$p(hav(i),%z("dsv"),2)'?1a.a1"("1e.e1")" s error="'having' statements can only contain references to sql aggregates",error(5)="HY000" q
havingx i $l(error) s error(0)="having",error(1)=qnum
 k ^mgtmp($j,"wher",qnumh)
 q
 ;
getf ; check table/alias
 s f="",cname=x i x["." s f=$p(x,".",1),cname=$p(x,".",2) i '$l(cname) s error="invalid sql column '"_x_"'",error(5)="HY000" q
 i f="",$d(^mgtmp($j,"from",qnum,2)) s error="ambiguous column '"_x_"'",error(5)="HY000" q
 i f'="" s tname="" i $d(^mgtmp($j,"from","x",qnum,f)) s y=^mgtmp($j,"from","x",qnum,f) s tname=$p(^mgtmp($j,"from",qnum,y),"~",1)
 i f="" s tname=^mgtmp($j,"from",qnum,1),f=$p(tname,"~",2),tname=$p(tname,"~",1)
 i tname="" s error="invalid alias '"_f_"' for column '"_cname_"'",error(5)="HY000" q
 s tnamer=tname
 q
 ;
remap ; look for extra column defined for soft view only
 s %defmd="",%defm=0
 i '$l(f) q
 i '$l(cname) q
 i $d(^mgtmp($j,"remap",f,cname)) s %defm=1,%defmd=^(cname)
 q
 ;
order(dbid,sql,qnum,arg,error) ; validate 'order by'
 n argn,com,x,y,dir,args
 s ord="",com=""
 s argn=$$arg^%mgsqle(arg,.args)
 f j=1:1:args s x=args(j) d order1 i $l(error) s error(0)="order",error(1)=0 q
 q
 ;
order1 ; validate order by item
 n num,sel
 s dir="asc" i x[" " s dir=$p(x," ",2),x=$p(x," ",1)
 i dir'="asc",dir'="desc" s error="the 'order' for item '"_x_"' must be defined as 'asc' (ascending) or 'desc' (descending)",error(5)="HY000" q
 i x?1n.n,'$d(^mgtmp($j,"sel",1,x)) s error="invalid 'order by' item no. '"_x_"'",error(5)="HY000" q
 i x?1n.n s num=x,sel=^mgtmp($j,"sel",1,num) g order2
 s sel="",len=$l(x,".") f num=1:1 q:'$d(^mgtmp($j,"sel",1,num))  s y=$p(^(num),%z("dsv"),2) i $p(y,".",1,len)=x s sel=%z("dsv")_x_%z("dsv") q
 i '$l(sel) s error="'order by' item '"_x_"' is not in the 'select' statement",error(5)="HY000" q
order2 s ord=ord_com_num_"~"_dir,com=","
 s ord(j)=sel
 q
 ;
select(dbid,sql,qnum,arg,error) ; validate 'select' statement
 n opu,op,opu,argn,args,snum,snum1,fr,x
 s op="" i arg?1an.an1" "1e.e s op=$p(arg," ",1),arg=$p(arg," ",2,999)
 s opu=$$lcase^%mgsqls(op)
 i opu'="",opu'="distinct" s error="invalid row operator '"_op_"' in 'select' statement",error(5)="HY000" g selectx
 i opu="distinct" s op=opu
 s ^mgtmp($j,"sel",qnum)=op
 s argn=$$arg^%mgsqle(arg,.args)
 i qnum>1,'$d(sql("union",qnum)),$d(args(2)),'$d(^mgtmp($j,"v",qnum)) s error="sub-query 'select' statements may have only 1 output",error(5)="HY000" g selectx
 s (snum,snum1)=0
 f fr=1:1 q:'$d(args(fr))  s x=$$trim^%mgsqls(args(fr)) d select1 i $l(error) q
 i $l(error) g selectx
 i qnum'=1,$d(sql("union",qnum)) d union i $l(error) g selectx
selectx i $l(error) s error(0)="select",error(1)=qnum
 q
 ;
select1 ; validate specific item in 'select' line
 n len,as,asl,asv
 s len=$l(x," ")
 i len>1 d
 . s asl=$p(x," ",len)
 . s as="" i len>2 s as=$p(x," ",len-1) s as=$$ucase^%mgsqls(as)
 . i as="as" s asv=$p(x," ",1,len-2)
 . i as'="as" s asv=$p(x," ",1,len-1)
 . i $l(asv,"(")'=$l(asv,")") q
 . i '($l(asv,"""")#2) q
 . s x=asv,^mgtmp($j,"map",qnum,fr)=asl
 . q
 i x'["(",x?1a.e1"."1"{".e1"}"1"."1a.e s item=%z("dsv")_x_%z("dsv"),snum=$$addsel(qnum,item) q
 i x?1a.e,x'["(",x'[" ",x'["*" k fun d select2 q:$l(error)  s item=%z("dsv")_f_"."_cname_%z("dsv"),snum=$$addsel(qnum,item) q  ; columns
 i x="*"!(x?1a.e1"."1"*") d select3 q  ; all table columns (key & data)
 i x?1a.a1"("1e.e1")" d select4 q  ; aggregates
 d select5
 q
 ;
select2 ; columns
 n ok
 d getf i $l(error) q
 i x?1a.e1"."1"{".e1"}"1"."1a.e g select21
 i tname?@("1"""_%z("dq")_"""1n.n1"""_%z("dq")_"""") d  q:$l(error)  g select21
 . n qnum
 . ;b
 . s qnum=$p(tname,%z("dq"),2)
 . i '$d(^mgtmp($j,"vx",qnum,cname)) s error="'select' item '"_cname_"' is not a column of derived table "_alias,error(5)="42S22" q
 . q
 s com="",ok=0 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) d remap s ok=%defk!%defd!%defm
 i 'ok s error="'select' item '"_cname_"' is not a column of table '"_tname_"'",error(5)="42S22" q
select21 i $d(fun),$l(fun) i $d(sqfun(qnum,f_"."_cname,fun)) s error="duplication of aggregate in 'select' line",error(5)="HY000" q
 q
 ;
select3 ; x="*" - get all key & data columns
 n pkey,pkeyx,datax,n
 d getf i $l(error) q
 s ino=$$pkey^%mgsqld(dbid,tname) s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) s pkey=0 f j=1:1 q:'$d(%ind(ino,j))  s x=%ind(ino,j) i x?1a.e s pkey=pkey+1,pkey(pkey)=x,pkeyx(x)=pkey
 i qnum'=1,$d(pkey(1)) s x=pkey(1),item=%z("dsv")_f_"."_x_%z("dsv"),snum=$$addsel(qnum,item) q
 f j=1:1 q:'$d(pkey(j))  s (y,x)=pkey(j) s item=%z("dsv")_f_"."_x_%z("dsv"),snum=$$addsel(qnum,item)
 s sc=$$data^%mgsqld(dbid,tname,.%data)
 s x="" f  s x=$o(%data(x)) q:x=""  s r=$g(%data(x)),n=$p(r,"\",1)+0 s datax(n,x)="" k %data(x)
 s n="" f  s n=$o(datax(n)) q:n=""  s x="" f  s x=$o(datax(n,x)) q:x=""  k datax(n,x) i '$d(pkeyx(x)) s item=%z("dsv")_f_"."_x_%z("dsv"),snum=$$addsel(qnum,item)
 q
 ;
select4 ; aggregates
 n key
 s fun=$p(x,"(",1),x=$p(x,"(",2,999),x=$e(x,1,$l(x)-1)
 i fun="count",$p(x," ",1)="distinct" s fun="cntd",x=$p(x," ",2,999)
 i $p(x," ",1)="notnull" s fun=fun_"_"_"notnull",x=$p(x," ",2,999)
 i "count,cntd,sum,avg,max,min"'[$p(fun,"_",1) s error="invalid aggregate '"_fun_"'",error(5)="HY000" q
 i x?.1"-".n.1"."1n.n!($e(x)=$c(34)) s error="you may not select the '"_fun_"' of '"_x_"'",error(5)="HY000" q
 i x="*",fun'="count" s error="you may not 'select' the '"_fun_"' of '*'",error(5)="HY000" q
 i x="*",fun="count" i $d(sqfun(qnum,x_qnum,fun)) s error="duplication of aggregate in 'select' line",error(5)="HY000" q
 i x="*",fun="count" s key=x_qnum,newx=fun_"("_x_qnum_")" g select41
 d select2 i $l(error) q
 s key=f_"."_cname,newx=fun_"("_f_"."_cname s newx=newx_")"
select41 s item=%z("dsv")_newx_%z("dsv"),snum=$$addsel(qnum,item),sqfun(qnum,key,fun)=snum
 k newx
 q
 ;
select5 ; undeclared expression
 n pn,fn,ax,outv,ex,word,zcode,fun
 s ax=$g(^mgtmp($j,"e"))+1,^("e")=ax
 s outv="___v"_ax
 s ex(1)=x d ex^%mgsqle(outv,.ex,.word,.zcode,.fun,.error) i $l(error) q
 f fn=1:1 q:'$d(fun(fn))  f pn=1:1 q:'$d(fun(fn,"p",pn))  s item=$g(fun(fn,"p",pn,1)) i item[%z("dsv"),snum=$$addselx(qnum,item)
 f i=1:1 q:'$d(zcode(i))  f  q:zcode(i)'[%z("df")  d
 . s fn=$p(zcode(i),%z("df"),2)
 . s zcode(i)=$p(zcode(i),%z("df"),1)_fun(fn,"s")_$p(zcode(i),%z("df"),3,999)
 . q
 m ^mgtmp($j,"e",outv)=zcode
 s item=%z("dsv")_outv_%z("dsv"),snum=$$addsel(qnum,item)
 q
 ;
union ; check line for union compatibility
 n i,x,y,x1,y1,outsel
 s outsel=$g(^mgtmp($j,"outsel",qnum))
 i snum'=outsel s error="each participating 'select' in a 'union' must have the same number of selected items",error(5)="HY000" q
 f i=1:1:outsel s x=$p(^mgtmp($j,"sel",1,i),%z("dsv"),2),y=$p(^mgtmp($j,"sel",qnum,i),%z("dsv"),2) d union1
 q
 ;
union1 ; for each item
 s (x1,y1)="" s:x["(" x1=$p(x,"(",1) s:y["(" y1=$p(y,"(",1)
 i $l(x1),y1'=x1 s error="'union': 'select' item '"_y_"' should be a '"_x1_"' aggregate",error(5)="HY000" q
 i $l(y1),y1'=x1 s error="'union': 'select' aggregate '"_y_"' is not compatible with the first query",error(5)="HY000" q
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlv3" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlv3 ;(CM) sql - validate query part 4 ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv3") q
 ;
update ; validate 'update' query
 n ln
 s upd=sql(0,1),set=sql(0,2),ats=""
 s tname=$p(upd," ",2),alias=$p(upd," ",3) i tname="" s error="no table supplied in 'update' statement",error(5)="HY000" g updatex
 s updidx="" i alias?.e1":"1n.n s updidx=":"_$p(alias,":",2),alias=$p(alias,":",1)
 i '$l(alias) s alias=tname
 i $l(alias),alias'?1a.e s error="invalid alias '"_alias_"'",error(5)="HY000" g updatex
 s %d=$$tab^%mgsqld(dbid,tname) i %d="" s error="no such table '"_tname_"'",error(5)="42S02" g updatex
 s incwhr=0
 s scmnd=$p(set," ",1),set=$p(set," ",2,999)
 i scmnd="columns" d at i $p(sql(0,1)," ",1)="insert" q
 i scmnd="set" d set i $l(error) g updatex
 s (x,sel,com)="" k y
 f i=0:0 s x=$o(update("set",x)) q:x=""  s sel=sel_com_x,com=",",y(x)="",y="" f i=0:0 s y=$o(update("set",x,"i",y)) q:y=""  i '$d(y(y)) s sel=sel_com_y,y(y)=""
 k y
 s sql(1,1)="select "_sel,sql(1,2)="from "_tname i $l(alias) s sql(1,2)=sql(1,2)_" "_alias_updidx
 i '$l(ats) d update1 k wrd,wrdx i ins q
 s update("update")=tname,update("set")=set i $l(alias) s update("update")=update("update")_" "_alias
updatex i $l(error),'$d(error(0)) s error(0)="update",error(1)=0
 k upd,set
 q
 ;
at ; validate 'columns' line and transform to 'insert' if neccessary
 s ats=set i ats'?1"("1a.e1")" s error="invalid 'columns' statement",error(5)="HY000" g atx
 s ats=$e(ats,2,$l(ats)-1)
 s tnamer=tname
 k pkey s ino=$$pkey^%mgsqld(dbid,tname) s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s pkey(x)=""
 f i=1:1:$l(ats,",") s xc=$p(ats,",",i) d at1 i $l(error) q
 i $l(error) g atx
 s (x,com,pkey)="" f i=0:0 s x=$o(pkey(x)) q:x=""  s pkey=pkey_com_x
 i $l(pkey) s error="key column(s) "_pkey_" not found in 'columns' statement",error(5)="HY000" g atx
 i $d(sql(1,3)) g atx
 k sql
 s qnummax=0
 s sql(0,1)="insert"
 s sql(0,2)="into "_tname_" ("
 s sql(0,3)="values ("
 s x="",com="" f i=0:0 s x=$o(update("set",x)) q:x=""  s sql(0,2)=sql(0,2)_com_x,sql(0,3)=sql(0,3)_com_update("set",x),com=","
 f i=2,3 s sql(0,i)=sql(0,i)_")"
atx i $l(error) s error(0)="columns",error(1)=0
 q
 ;
at1 ; validate column
 i xc="" s error="syntax error in 'columns' statement",error(5)="HY000" q
 i xc'?1a.e!($l(xc,",")>2) s error="invalid column '"_xc_"' in 'columns' statement",error(5)="HY000" q
 s cname=$p(xc,";",1)
 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error="column '"_cname_"' not found in table '"_tname_"'",error(5)="42S22" q
 i tname?@("1"""_%z("dq")_"""1n.n1"""_%z("dq")_"""") d  q:$l(error)  g at11
 . n qnum
 . ;b
 . s qnum=$p(tname,%z("dq"),2)
 . i '$d(^mgtmp($j,"vx",qnum,cname)) s error="column '"_cname_"' is found in derived table "_alias,error(5)="42S22" q
 . q
at11 k pkey(cname) s update("set",cname)=":"_xc,update("set",cname,"zcode",1)=" s "_%z("dsv")_cname_"**set**"_%z("dsv")_"="_%z("dev")_xc_%z("dev"),inv(xc)=""
 q
 ;
set ; validate 'set' statement
 n arg,args
 s arg=set s arg=$$arg^%mgsqle(arg,.args)
 f i=1:1:args s x=args(i) d set1 i $l(error) q
 i $l(error) s error(0)="set",error(1)=0
 q
 ;
set1 ; validate individual 'set' in 'set' statement
 n i,outv,zcode,sqlex
 s to=$p(x," ",3,999),outv=$p(x," ",1)
 s cname=outv i outv?1a.e1"."1a.e s cname=$p(outv,".",2) i $p(outv,".",1)'=alias s error="'set' statement: incorrect alias in '"_outv_"'",error(5)="HY000" q
 i $p(x," ",2)'="="!(cname="")!(to="") s error="invalid assignment: '"_x_"'",error(5)="HY000" q
 i tname?@("1"""_%z("dq")_"""1n.n1"""_%z("dq")_"""") d  q:$l(error)  g set11
 . n qnum
 . ;b
 . s qnum=$p(tname,%z("dq"),2)
 . i '$d(^mgtmp($j,"vx",qnum,cname)) s error="column '"_cname_"' in 'set' statement not found in derived table "_alias,error(5)="42S22" q
 . q
 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error="column '"_cname_"' in 'set' statement not found in table '"_tname_"'",error(5)="42S22" q
set11 d set2 i $l(error) q
 s update("set",cname)=to
 f i=1:1 q:'$d(zcode(i))  s update("set",cname,"zcode",i)=zcode(i)
 s x="" f i=0:0 s x=$o(sqlex("x",x)) q:x=""  s update("set",cname,"i",x)=""
 q
 ;
set2 ; compile set assignment
 ; cm: add %z
 n (%z,dbid,qid,error,to,outv,inv,entpar,del,zcode,sqlex)
 k zcode,sqlex
 s outv=outv_"**set**"
 s l=1,ex(1)=to d ex^%mgsqle(outv,.ex,.word,.code,.fun,.error)
 q
 ;
update1 ; determine if transformation into 'insert' is necessary
 s ins=1
 i '$d(sql(1,3)) s ins=0 q
 f i=1:1:$l(set,",") s x=$p(set,",",i),cname=$p(x," ",1) s:cname?1a.e1"."1a.e cname=$p(cname,".",2) i $l(cname) s wrdx(cname)=$p(x," ",3,999),ino=$$pkey^%mgsqld(dbid,tname) s %def=$$defkdi^%mgsqld(dbid,tname,cname,ino) i %def s ins=0 q
 i 'ins q
 s ln=$p(sql(1,3)," ",2,999)
 d update2 k pkey i 'uni!'uni(0) s ins=0 q
 k sql
 s qnummax=0
 s sql(0,1)="insert"
 s sql(0,2)="into "_tname_" ("
 s sql(0,3)="values ("
 s com="",x="" f i=0:0 s x=$o(wrdx(x)) q:x=""  s sql(0,2)=sql(0,2)_com_x,sql(0,3)=sql(0,3)_com_wrdx(x),com=","
 f i=2,3 s sql(0,i)=sql(0,i)_")"
 q
 ;
update2 ; determine unique restriction for table tname (on primary key)
 n exp,eq,pkeyn
 s uni=1,uni(0)=0 i '$l(ln) s uni=0 q
 k pkey s ino=$$pkey^%mgsqld(dbid,tname),pkeyn=0 s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s pkeyn=pkeyn+1,pkey(x)=""
 s exp=ln d eq
 s x="" f i=1:1 s x=$o(eq(x)) q:x=""  s wrdx(x)=eq(x) k pkey(x)
 i pkeyn=(i-1) s uni(0)=1
 i $d(pkey) s (uni,uni(0))=0
 q
 ;
delete ; delete records
 n %om,exp,eq
 s dele=sql(0,1),frm=sql(1,2),exp=$s($d(sql(1,3)):sql(1,3),1:"")
 i $l($p(dele,"delete",2,999)) s error="the 'delete' statement does not take an argument",error(5)="HY000",error(0)="delete",error(1)=0 q
 s tname=$p(frm," ",2),alias=$p(frm," ",3) i tname="" s error="no table supplied in 'from' statement",error(5)="HY000",error(0)="from",error(1)=0 q
 i alias="" s alias=tname
 i $l(exp),exp'?1"where ".e s error="invalid 'where' statement following the 'from' statement",error(5)="HY000",error(0)="from",error(1)=0 q
 i $l(exp) s exp=$p(exp,"where ",2,999)
 i $l(alias),alias'?1a.e s error="invalid alias '"_alias_"'",error(5)="HY000",error(0)="from",error(1)=0 q
 s %d=$$tab^%mgsqld(dbid,tname) i %d="" s error="no such table '"_tname_"'",error(5)="42S02",error(0)="from",error(1)=0 q
 s incwhr=0
 i tname?1a.e s rc=$$ind^%mgsqld(dbid,tname,.%ind) s ino="" f i=0:0 s ino=$o(%ind(ino)) q:ino=""  s sc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 d delete1 i $l(error) q
 i hilev k sql(1) g deletex
 s (com,sel)="",ino=$$pkey^%mgsqld(dbid,tname)
 f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s sel=sel_com_x,com=","
 i sel="" s error="no key columns found in table '"_tname_"'",error(5)="HY000",error(0)="from",error(1)=0 q
 s sql(1,1)="select "_sel
 s update("key")=sel
deletex s update("delete")=tname i $l(alias) s update("delete")=update("delete")_" "_alias
 k dele,frm,whe,x,sel,tname,com
 q
 ;
delete1 ; assess possibility of doing high level kill
 s hilev=0 q  ; don't do this for now
 i '$l(exp) s hilev=1 q
 d eq i $l(error) s error="",hilev=0 q
 i 'eq q
 s hilev=1,ino="" f i=0:0 s ino=$o(%ind(ino)) q:ino=""  d delete2 i 'hilev q
 i 'hilev q
 s cname="" f i=0:0 s cname=$o(eq(cname)) q:cname=""  s update("attx",cname)=eq(cname,"c")
 q
 ;
delete2 ; each index must conform to hilev criteria
 s kno=0 f i=1:1 q:'$d(%ind(ino,i))  s cname=%ind(ino,i) i cname?1a.e q:'$d(eq(cname))  s kno=kno+1
 i kno'=eq s hilev=0 q
 q
 ;
eq ; extract contiguous equivalence table
 n word,ex
 k eq s eq=0
 s ex(1)=exp d where^%mgsqle(.ex,.word,.error) i $l(error) k eq s eq=0 q
 k eq s eq=0
 s ok=1 f wn=1:1 q:'$d(word(0,wn))  s wrd=word(0,wn) d eq1 i 'ok k eq s eq=0 q
 q
 ;
eq1 ; verify each word
 n obr,cbr,set,setc,to,alias
 i wrd="or"!(wrd="!") s ok=0 q
 i wrd[%z("df") s ok=0 q
 i wrd'[%z("dsv") q
 s wrd=$p(wrd,%z("dsv"),2),alias="" i wrd["." s alias=$p(wrd,".",1),wrd=$p(wrd,".",2)
 i '$d(word(0,wn+1))!'$d(word(0,wn+2)) s ok=0 q
 i word(0,wn+1)'="=" s ok=0 q
 s to=word(0,wn+2) i to'="(" s (set,setc)=to s:set[%z("dev") set=":"_$p(set,%z("dev"),2) g eq2
 s (obr,cbr)=0,(set,setc)="" f wn1=wn+2:1 q:'$d(word(0,wn1))  s (x,y)=word(0,wn1) s:x="(" obr=obr+1 s:x=")" cbr=cbr+1 s:x[%z("dev") x=":"_$p(x,%z("dev"),2) s set=set_x,setc=setc_y i obr=cbr q
 i set[%z("dsv") s ok=0 q
eq2 s eq(wrd)=set,eq(wrd,"c")=setc,eq(wrd,"f")=alias,eq=eq+1,wn=wn+2
 q
 ;
asn ; extract universal statement assignments
 n dead,word,ex
 k eq1 s eq1=0 ; equals + others - or
 s ex(1)=exp d where^%mgsqle(.ex,.word,.error) i $l(error) q
 f wn=1:1 q:'$d(word(0,wn))  s wrd=word(0,wn) i wrd="!" d asn1
 f wn=1:1 q:'$d(word(0,wn))  s wrd=word(0,wn) i wrd="=",'$d(dead(wn)) d asn2
 q
 ;
asn1 ; remove or + affected variables
 n strt,end,i,obr,cbr,x
 s strt=wn,(obr,cbr)=0 f i=wn-1:-1 q:'$d(word(0,i))  s x=word(0,i),strt=i s:x="(" obr=obr+1 s:x=")" cbr=cbr+1 i obr=(cbr+1) q
 s end=wn,(obr,cbr)=0 f i=wn+1:1 q:'$d(word(0,i))  s x=word(0,i),end=i s:x="(" obr=obr+1 s:x=")" cbr=cbr+1 i cbr=(obr+1) q
 f i=strt:1:end s dead(i)=""
 q
 ;
asn2 ; extract assignment
 n obr,cbr,set,setc,to,alias,wrd
 i '$d(word(0,wn-1)) q
 s wrd=word(0,wn-1) i wrd'[%z("dsv") q
 s wrd=$p(wrd,%z("dsv"),2),alias="" i wrd["." s alias=$p(wrd,".",1),wrd=$p(wrd,".",2)
 i '$d(word(0,wn+1)) q
 s to=word(0,wn+1) i to'="(" s (set,setc)=to s:set[%z("dev") set=":"_$p(set,%z("dev"),2) g asn21
 s (obr,cbr)=0,(set,setc)="" f wn1=wn+1:1 q:'$d(word(0,wn1))  s (x,y)=word(0,wn1) s:x="(" obr=obr+1 s:x=")" cbr=cbr+1 s:x[%z("dev") x=":"_$p(x,%z("dev"),2) s set=set_x,setc=setc_y i obr=cbr q
 i set[%z("dsv") q
asn21 s eq1(wrd)=set,eq1(wrd,"c")=setc,eq1(wrd,"f")=alias,eq1=eq1+1
 q
 ;
]]></Routine>


<Routine name="%mgsqlv4" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlv4 ;(CM) sql - validate query part 5 ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv4") q
 ;
create(dbid,sql,error) ; validate 'create' statement
 n %ind,type,crt,on,ln,idx,tname,alias,i,x,com
 s crt=sql(0,1),type=$$lcase^%mgsqls($p(crt," ",2)) i type="unique" s type=$$lcase^%mgsqls($p(crt," ",3))
 i type'="index",type'="table",type'="procedure" s error="second word in 'create' statement should be 'index', 'table' or 'procedure'",error(5)="HY000" q
 i type="table" d table(dbid,.sql,.error) s error="\ddl\"_error q
 i type="index" d tindex(dbid,.sql,.error) s error="\ddl\"_error q
 i type="procedure" d proc(dbid,.sql,.error) s error="\ddl\"_error q
 s idx=$p(crt," ",3) i idx'?1n.n,idx'?1"q"1n.n s error="invalid query identity in 'create' statement",error(5)="HY000" q
 s on=$p(crt," ",4)
 s ln="" i $d(sql(0,2)) s ln=sql(0,2)
 i on'="on",$p(ln," ",1)'="on" s error="'create' must be followed by 'on' what table",error(5)="HY000" q
 i on="on",$p(ln," ",1)="on" s error="duplication in 'on' statement",error(5)="HY000" q
 i on="on" s on=$p(crt," ",4,999)
 i $p(ln," ",1)="on" s on=ln
 s (tname,alias)=$p(on," ",2) s %d=$$tab^%mgsqld(dbid,tname) i %d="" s error="invalid table in 'on' statement",error(5)="42S02" q
 s index=$p(on," ",3,999) i index'?1"("1e.e1")" s error="invalid index declaration in 'on' statement",error(5)="HY000" q
 s index=$e(index,2,$l(index)-1)
 f i=1:1:$l(index,",") s x=$p(index,",",i),^mgtmp($j,"from","i",i)=x s:$l(x) ^mgtmp($j,"from","i","x",x)="" i '$l(x) s error="unspecified item in index",error(5)="HY000"
 i $l(error) q
 s ino=$$pkey^%mgsqld(dbid,tname) s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) i x?1a.e,'$d(^mgtmp($j,"from","i","x",x)) s error="primary key column '"_x_"' is missing from index",error(5)="HY000" q
 i $l(error) q
 f i=1:1 q:'$d(^mgtmp($j,"from","i",i))  d create1 i $l(error) q
 i $l(error) q
 d index
 s sql(1,1)="select ",com="" f i=1:1 q:'$d(^mgtmp($j,"from","i",i))  s x=^mgtmp($j,"from","i",i) i x?1a.e s sql(1,1)=sql(1,1)_com_alias_"."_x,com=","
 s sql(1,2)="from "_tname_" "_alias
 s create("index")=tname_" "_alias_"~"_idx
 q
 ;
create1 ; check individual items in index
 s cname=^mgtmp($j,"from","i",i)
 i cname?1n.n!(at?1""""1e.e1"""")!(wrd[%z("ds")) q
 i cname'?1a.e s error="invalid item '"_cname_"' in index",error(5)="HY000" q
 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error="column '"_cname_"' not found in table '"_tname_"'",error(5)="42S22" q
 q
 ;
table(dbid,sql,error) ; create a new table
 n crt,tname,i,item,obr,cbr,cols,chr,rc,strt,end,pre,post,opt,name,value,cn
 s crt=sql(0,1)
 s tname=$p(crt," ",3),crt=$p(crt," ",4,999)
 s (strt,end,obr,cbr)=0 f i=1:1 s chr=$e(crt,i) q:chr=""  d  i obr=cbr s end=i q
 . i chr="(" s obr=obr+1 i strt=0 s strt=i
 . i chr=")" s cbr=cbr+1
 . q
 s cols=$e(crt,strt+1,end-1)
 s pre=$e(crt,1,strt-1),post=$e(crt,end+1,9999),crt=pre_post
 s (obr,cbr)=0,item="",cn=0 f i=1:1 s chr=$e(cols,i) q:chr=""  d
 . i chr="(" s obr=obr+1
 . i chr=")" s cbr=cbr+1
 . i chr=",",obr=cbr s cn=cn+1,cols(cn)=$$trim^%mgsqls(item),(obr,cbr)=0,item="" q
 . s item=item_chr
 . q
 i item'="" s cn=cn+1,cols(cn)=$$trim^%mgsqls(item)
 s opt="" i crt["/*!" s opt=$p($p(crt,"/*!",2,999),"*/",1)
 f i=1:1:$l(opt,",") s item=$p(opt,",",i) d
 . s name=$$trim^%mgsqls($p(item,"=",1))
 . s value=$$trim^%mgsqls($p(item,"=",2))
 . i name'="" s tname($$lcase^%mgsqls(name))=value
 . q
 s rc=$$ctable^%mgsqld(dbid,.tname,.cols)
 q
 ;
tindex(dbid,sql,error) ; create a new index for table
 n opt,i,item,name,value,part,x,rc
 s part=0 f i=1:1:$l(crt," ") s item=$p(crt," ",i) d
 . s x=$$lcase^%mgsqls(item) i item="" q
 . i x="index" s part=1 q
 . i x="on" s part=2 q
 . i part=1 s ino=item,part=0
 . i part=2 s tname=item,part=0
 . q
 s cols=$p($p(crt,"(",2),")",1)
 f i=1:1:$l(cols,",") s cols(i)=$p(cols,",",i)
 s opt="" i crt["/*!" s opt=$p($p(crt,"/*!",2,999),"*/",1)
 f i=1:1:$l(opt,",") s item=$p(opt,",",i) d
 . s name=$$trim^%mgsqls($p(item,"=",1))
 . s value=$$trim^%mgsqls($p(item,"=",2))
 . i name'="" s tname($$lcase^%mgsqls(name))=value
 . q
 s rc=$$cindex^%mgsqld(dbid,.tname,ino,.cols)
 q
 ;
proc(dbid,sql,error) ; create a new procedure
 n crt,pname,i,item,obr,cbr,cols,chr,rc
 s crt=sql(0,1)
 s pname=$p(crt," ",3),crt=$p(crt," ",4,999)
 s crt=$e(crt,2,$l(crt)-1)
 s item="",obr=0,cbr=0 f i=1:1 s chr=$e(crt,i) q:chr=""  d
 . i chr="(" s obr=obr+1
 . i chr=")" s cbr=cbr+1
 . i chr=",",obr=cbr s cols($i(cols))=$$trim^%mgsqls(item),item="",obr=0,cbr=0 q
 . s item=item_chr
 . q
 i item'="" s cols($i(cols))=$$trim^%mgsqls(item)
 s rc=$$cproc^%mgsqld(dbid,pname,.cols)
 q
 ;
drop(dbid,sql,error) ; drop catalogue item
 n crt,type,item
 s error=""
 s crt=sql(0,1),type=$$lcase^%mgsqls($p(crt," ",2)),item=$p(crt," ",3)
 i type'="index",type'="table",type'="procedure" s error="second word in 'drop' statement should be 'index', 'table' or 'procedure'",error(5)="HY000" q
 i type="table" s rc=$$dtable^%mgsqld(dbid,item) s error="\ddl\"_error q
 q
 ;
index ; table index idx for tname in ^mgtmp($j,"from","i",1-n)
 s id=tname k xsub,xcon d indexr^%mgsqld(dbid,tname,ino,.xsub)
 i idx'["q" s ino=$$pkey^%mgsqld(dbid,tname),%ref=$$ref^%mgsqld(dbid,tname,ino) s ref=%ref
 i idx["q" s ref="^qryinx"
 f i=1:1 q:'$d(^mgtmp($j,"from","i",i))
 i idx["q" f ii=i-1:-1:1 s ^mgtmp($j,"from","i",ii+2)=^mgtmp($j,"from","i",ii)
 i idx["q" s ^mgtmp($j,"from","i",1)=$c(34)_tname_$c(34),^mgtmp($j,"from","i",2)=$c(34)_idx_$c(34)
 k xsub(idx) s xsub(idx)=ref
 f i=1:1 q:'$d(^mgtmp($j,"from","i",i))  s xsub(idx,i)=^mgtmp($j,"from","i",i)
 d indexw^%mgsqld(dbid,tname,ino,.xsub) k xsub,xcon,scl
 q
 ;
insert ; validate 'insert' query
 s inse=sql(0,1),into=sql(0,2),valu=$s($d(sql(0,3)):sql(0,3),1:"")
 i $l($p(inse,"insert",2,999)) s error="the 'insert' statement does not have an argument",error(5)="HY000",error(0)="insert",error(1)=0 g insertx
 s tname=$p(into," ",2) i tname="" s error="no table supplied in 'into' statement",error(5)="HY000" g insertx
 s tnamer=tname
 s %d=$$tab^%mgsqld(dbid,tname) i %d="" s error="no such table '"_tname_"'",error(5)="42S02" g insertx
 s update("insert")=tname
 i $p(valu," ",1)="values" d insv i $l(error) g insertx
 i $p(valu," ",1)'="values" d inss i $l(error) g insertx
 s inta=$p(into," ",3,999) i inta'="",inta'?1"("1e.e1")" s error="invalid column declaration list in 'into' statement",error(5)="HY000" g insertx
 i tname?1"{n:"1a.e,inta="" s error="column names must be specified in the 'into' statement for named aggregates",error(5)="HY000" g insertx
 i inta'="" s inta=$e(inta,2,$l(inta)-1)
 i inta'="" f i=1:1:$l(inta,",") s cname=$p(inta,",",i) s:cname="" error=1 q:cname=""  s update("att",i)=cname,update("attx",cname)="",update("att")=i s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error=2 q
 i $l(error) s error=$s(error=1:"invalid column list in 'into' line",error=2:"column '"_cname_"' not found in table '"_tname_"'",1:""),error(5)="HY000" g insertx
 i $l(error) s error=$s(error=1:"invalid column list in 'into' line",error=2:"column '"_cname_"' not available from aggregates",1:""),error(5)="HY000" g insertx
 s kno=0,ino=$$pkey^%mgsqld(dbid,tname) s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s kno=kno+1,key(kno)=x
 s an=0 i tnamer?1"{n:"1a.e f i=1:1 q:'$d(key(i))  s an=an+1,data(an)=key(i) k key(i)
 s sc=$$data^%mgsqld(dbid,tname,.%data) s x="" f  s x=$o(%data(x)) q:x=""  s data(($p(%data(x),"\",2)+an))=x k %data(x)
 i $d(update("att")) f i=1:1 q:'$d(key(i))  s x=key(i) i '$d(update("attx",x)) s error="key column '"_x_"' not found in 'into' variable list",error(5)="HY000" q
 i $l(error) g insertx
 i $d(update("att")),update("att")'=update("val") s error="the number of columns given is not the same as the number of values",error(5)="HY000" g insertx
 i $d(update("att")) g insert1
 f i=1:1 q:'$d(update("val",i))!'$d(key(i))  s update("att",i)=key(i)
 i $d(key(i)),'$d(update("val",i)) s error="not enough data available to satisfy whole key to table '"_tname_"'",error(5)="HY000" g insertx
 i '$d(update("val",i)) g insert1
 s i=i-1
 f ii=1:1 q:'$d(update("val",i+ii))!'$d(data(ii))  s update("att",i+ii)=data(ii)
 i tname'?1"{n:"1a.e,$d(update("val",i+ii)),'$d(data(ii)) s error="too much data data available for table '"_tname_"'",error(5)="HY000" g insertx
insert1 s tname=update("insert")
 s incwhr=0
 s update("insert")=tname
insertx i $l(error),'$d(error(0)) s error(0)="into",error(1)=0
 q
 ;
insv ; validate 'values' line
 s val=$p(valu," ",2,999)
 i val'?1"("1e.e1")" s error="invalid declaration of values in the 'values' statement",error(5)="HY000" g insvx
 s val=$e(val,2,$l(val)-1)
 s pn=0,an=0
insv1 s pn=pn+1 i pn>$l(val,",") q
 s wrd=$p(val,",",pn)
 f  q:($l(wrd,"""")#2)  s pn=pn+1,wrd=wrd_$p(val,",",pn)
 s an=an+1
 i wrd?.1"-".n.1"."1n.n g insv2
 i wrd?1"""".e1""""!(wrd[%z("ds")) g insv2
 i wrd?1"'".e1"'" s wrd=$tr(wrd,"'","""") g insv2
 i wrd?1"{".e1"}" s wrd=$$trx^%mgsqlv(wrd) g insv2
 i wrd?1":"1a.e s inv($p(wrd,":",2))="",wrd=%z("dev")_$p(wrd,":",2)_%z("dev") g insv2
 s error="invalid item '"_wrd_"' in 'values' statement",error(5)="HY000" g insvx
insv2 s update("val",an)=wrd,update("val")=an
 g insv1
insvx i $l(error) s error(0)="values",error(1)=0
 q
 ;
inss ; validate 'select' line (after 'into')
 s valu="" i $d(sql(1,1)) s valu=sql(1,1)
 i '$l(valu) s error="missing 'values' or query component to 'insert' query",error(5)="HY000" q
 s val=$p(valu," ",2,999)
 i val="*" d inssa g inssx
 s pn=0,an=0
inss1 s pn=pn+1 i pn>$l(val,",") g inssx
 s wrd=$p(val,",",pn)
 i wrd?1"distinct "1a.e s wrd=$p(wrd,"distinct ",2,999)
 s an=an+1
 i wrd?.1"."1a.e g inss2
 i wrd?1":"1a.e s wrd=%z("dev")_$p(wrd,":",2)_%z("dev") g inss2
 i wrd?.1"-".n.1"."1n.n g inss2
 i wrd?1"""".e1""""!(wrd[%z("ds")) g inss2
 s error="invalid item '"_wrd_"' in 'select' statement",error(5)="HY000" g inssx
inss2 s update("val",an)=wrd,update("val")=an
 g inss1
inssx i $l(error),'$d(error(0)) s error(0)="select",error(1)=1
 q
 ;
inssa ; select all items from table
 n alias1,tname
 i '$d(sql(1,2)) s error="a 'from' statement should follow the 'select *' statement",error(5)="HY000" q
 s (alias1,tname)=$p(sql(1,2),"from ",2,999)
 i alias1[" " s tname=$p(alias1," ",1),alias1=$p(alias1," ",2)
 i '$l(alias1) s error="invalid 'from' statement",error(5)="HY000",error(0)="from",error(1)=1 q
 s ino=$$pkey^%mgsqld(dbid,tname) s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) s an=0 f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s an=an+1,update("val",an)=alias1_"."_x,update("val")=an
 s sc=$$data^%mgsqld(dbid,tname,.%data) s x="" f i=1:1 s x=$o(%data(x)) q:x=""  s y=$p(%data(x),"\",2),update("val",y+an)=alias1_"."_x,update("val")=i+an k %data(x)
 q
 ;
]]></Routine>


<Routine name="%mgsqlv5" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlv5 ;(CM) sql - validate query - part 6 ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv5") q
 ;
from(dbid,sql,qnum,arg,error) ; validate 'from' statement
 n tnum,nord,xord,i,x,tname,alias,args,index,on
 s ^mgtmp($j,"from","i","x",qnum)=0
 s arg=$$arg^%mgsqle(arg,.args)
 s tnum=0 f i=1:1:args s tname=args(i) i tname'="" d from1(dbid,qnum,.tnum,tname) i $l(error) q
 i '$l(error) s ^mgtmp($j,"from",qnum)=arg
fromx i $l(error) s error(0)="from",error(1)=qnum q
 s x="" f  s x=$o(^mgtmp($j,"from","z",qnum,"jn",x)) q:x=""  d natv(dbid,qnum,x,.error) i $l(error) q
 i $l(error) q
 s x="" f  s x=$o(^mgtmp($j,"from","z",qnum,"c",0,x)) q:x=""  s ^mgtmp($j,"from","z",qnum,"c","x",$p(^mgtmp($j,"from",qnum,x),"~",2))="",^mgtmp($j,"from","z",qnum,"c","x",$p(^mgtmp($j,"from",qnum,x+1),"~",2))=""
 s xord=1 s x=$o(^mgtmp($j,"from","z",qnum,"o",0,"")) i $l(x),^mgtmp($j,"from","z",qnum,"o",0,x)="right" s xord=-1
 s nord=0
 s x="" f  s x=$o(^mgtmp($j,"from","z",qnum,"o",0,x),xord) q:x=""  d from4(x,xord,.nord)
 f nord=1:1 q:'$d(^mgtmp($j,"from","z",qnum,"ord",nord))  s x=^mgtmp($j,"from","z",qnum,"ord",nord),^mgtmp($j,"from","z",qnum,"ord",nord)=$p(^mgtmp($j,"from",qnum,x),"~",2)
fromxx ; compile 'on' predicates
 f i=1:1 q:'$d(^mgtmp($j,"from","on",qnum,i))  s on=$g(^mgtmp($j,"from","on",qnum,i)) d  i $l(error) q
 . n qnumo
 . s qnumo=qnum_"gon"_i d where^%mgsqlv1(dbid,sql,qnumo,on,.error) i $l(error) q
 . q
 q
 ;
from1(dbid,qnum,tnum,tname) ; validate each table selected from
 n %ref,i,ii,j,x,y,z,z1,zz,ino,inof,exp,pn,nat,jtyp,ok,com
 f x="inner","left","right","full" s jtyp(x)=""
 s (exp,pn,obr,cbr)=0,y="",com="" f i=1:1:$l(tname," ") s x=$$trim^%mgsqls($p(tname," ",i)) i $l(x) d
 . i x["(" s obr=obr+1
 . i x[")" s cbr=cbr+1
 . s y=y_com_x,com=" "
 . i obr=cbr s exp=exp+1,exp(exp)=y,y="",com="",(obr,cbr)=0
 . q
 f i=1:1 q:'$d(exp(i))  i exp(i)="on" d
 . i '$d(exp(i+1)) q
 . i exp(i+1)?1"(".e q
 . s x="(",com="" f ii=i+1:1 q:'$d(exp(ii))  s y=exp(ii) i y'="" q:$d(jtyp(y))!(y="join")!(y="natural")!(y="inner")!(y="cross")  s x=x_com_y,com=" " k exp(ii)
 . s x=x_")"
 . s j=i+1,exp(j)=x
 . f ii=ii:1 q:'$d(exp(ii))  s x=exp(ii) k exp(ii) s j=j+1,exp(j)=x
 . q
from11 s pn=pn+1 i '$d(exp(pn)) q
 s tname=exp(pn),nat=0
 s alias=tname i alias["." s alias=$p(tname,".",2)
 s pn=pn+1 i '$d(exp(pn)) g from16
 s x=exp(pn)
 i x="join" g from14
 i x="natural" s nat=1 g from12
 i x="cross" g from12
 i $d(jtyp(x)) s y=x g from12a
 s alias=x
 s pn=pn+1 i '$d(exp(pn)) g from16
 s x=exp(pn)
 i x="join" g from14
 i x="natural" s nat=1 g from12
 i x="cross" g from12
 i $d(jtyp(x)) s y=x g from12a
 s alias=x
 s pn=pn+1 i '$d(exp(pn)) g from16
 s x=exp(pn)
 i x="join" g from14
 i x="natural" s nat=1 g from12
 i x="cross" g from12
 i $d(jtyp(x)) s y=x g from12a
 s error="joins should be specified as [natural] <inner|left|right|full> or join or cross join",error(5)="HY000" q
from12 ; join expression
 s pn=pn+1 i '$d(exp(pn)) s error="'from' declaration may not be terminated with '"_x_"'",error(5)="HY000" q
 s y=exp(pn)
 i x="cross",y'="join" s error="keyword 'cross' must be followed by 'join'",error(5)="HY000" q
 i x="cross",y="join" g from13
 i x="natural",y="join" g from14
from12a i '$d(jtyp(y)) s error="invalid join type '"_y_"' use inner,left, right or full",error(5)="HY000" q
 s pn=pn+1 i '$d(exp(pn)) s error="'from' declaration must not be terminated with '"_y_"'",error(5)="HY000" q
 s z=exp(pn)
 i y="inner",z'="join" s error="keyword 'inner' should be followed by 'join'",error(5)="HY000" q
 i y="inner",z="join" g from14
 i z="join" g from15
 i z'="outer" s error="keyword left|right|full should be followed by outer or join",error(5)="HY000" q
 s pn=pn+1 i '$d(exp(pn)) s error="'from' declaration cannot be terminated with '"_z_"'",error(5)="HY000" q
 s z1=exp(pn) i z1'="join" s error="keyword 'outer' must be followed by 'join'",error(5)="HY000" q
 g from15
from13 ; cartesian product
 s ^mgtmp($j,"from","z",qnum,"c",0,tnum+1)=""
 g from16
from14 ; inner join
 s ^mgtmp($j,"from","z",qnum,"i",0,tnum+1)=""
 d nat(dbid,qnum,tnum,tname,nat,.exp,.error)
 g from16
from15 ; outer join
 s n="" f  s n=$o(^mgtmp($j,"from","z",qnum,"o",0,n)) q:n=""  i ^mgtmp($j,"from","z",qnum,"o",0,n)'=y s error="express all outer joins as either 'left', 'right' or 'full'",error(5)="HY000" q
 i $l(error) q
 s ^mgtmp($j,"from","z",qnum,"o",0,tnum+1)=y
 d nat(dbid,qnum,tnum,tname,nat,.exp,.error)
from16 ; process table/alias
 i tname[" " s alias=$p(tname," ",2) s:'$l(alias) error="invalid component '"_tname_"' in 'from' statement",error(5)="HY000" q:$l(error)  s tname=$p(tname," ",1)
 i tname["." s dbid=$p(tname,".",1),tname=$p(tname,".",2)
 i '$l(dbid) s error="invalid 'from' statement",error(5)="HY000" q
 i '$l(tname) s error="invalid 'from' statement",error(5)="HY000" q
 s ino=$$pkey^%mgsqld(dbid,tname),inof="" i alias[":" s inof=$$from3(qnum,.alias) i inof'="" s ino=inof
 s ok=$$fromv(dbid,tname,.error) i $l(error) q
 f ii=1:1 q:'$d(^mgtmp($j,"from","x",ii))  i $d(^mgtmp($j,"from","x",ii,alias)) s error="query contains duplication of table/alias '"_alias_"'",error(5)="HY000" q
 i $l(error) q
 s %ref=$$ref^%mgsqld(dbid,tname,ino) i %ref="" s error="invalid index number '"_ino_"' for table '"_tname_"'",error(5)="HY000" q
 s tnum=tnum+1,^mgtmp($j,"from",qnum,tnum)=tname_"~"_alias,^mgtmp($j,"from","x",qnum,tname)=tnum,^mgtmp($j,"from","x",qnum,alias)=tnum
 s ^mgtmp($j,"from","i",0,alias)=ino i $l(inof) s ^mgtmp($j,"from","i","f",alias)=inof
 g from11
 ;
from3(qnum,alias) ; index specification
 n x,ino
 s x=$p(alias,":",2,999),alias=$p(alias,":",1)
 s ino=x,ino=$p(x,"(",1),^mgtmp($j,"from","i","x",qnum)=1
 q ino
 ;
from4(fnum,xord,nord) ; outer join mandatory running order
 n fnum1,fnum2
 i xord=1 s fnum1=fnum,fnum2=fnum+1
 i xord=-1 s fnum1=fnum+1,fnum2=fnum
 s ^mgtmp($j,"from","z",qnum,"pass",$p(^mgtmp($j,"from",qnum,fnum2),"~",2))=""
 i '$d(^mgtmp($j,"from","z",qnum,"ordx",fnum1)) s nord=nord+1,^mgtmp($j,"from","z",qnum,"ord",nord)=fnum1,^mgtmp($j,"from","z",qnum,"ordx",fnum1)=""
 i '$d(^mgtmp($j,"from","z",qnum,"ordx",fnum2)) s nord=nord+1,^mgtmp($j,"from","z",qnum,"ord",nord)=fnum2,^mgtmp($j,"from","z",qnum,"ordx",fnum2)=""
 q
 ;
fromv(dbid,tname,error) ; validate table
 n %d
 s %d=$$tab^%mgsqld(dbid,tname) i %d="" s error="no such table '"_tname_"'",error(5)="42S02" q 0
 q 1
 ;
nat(dbid,qnum,tnum,tname,nat,exp,error) ; extract join parameters
 n i,ii,x,cname,alias,on
 i nat q  ; data dictionary
 s on=""
 f i=pn+1:1 q:'$d(exp(i))  s x=exp(i) i x="using"!(x="on") s on=x q
 i on="" s error="if a join is not natural then qualify it with either an 'on' or 'using' statement",error(5)="HY000" q
 i '$d(exp(i+1)) s error="missing parameter(s) for 'on'/'using' statement",error(5)="HY000" q
 i on="on" g naton
 s x=exp(i+1)
 i x'?1"("1e.e1")" s error="syntax error in parameters to 'using' statement",error(5)="HY000" q
 s x=$p($p(x,"(",2),")",1)
 f ii=1:1:$l(x,",") s cname=$$trim^%mgsqls($p(x,",",ii)) i $l(cname) s ^mgtmp($j,"from","z",qnum,"jn",tnum+1,cname)=""
 i '$d(^mgtmp($j,"from","z",qnum,"jn",tnum+1)) s error="no valid parameters for 'using' statement found",error(5)="HY000" q
 k exp(i),exp(i+1) f i=i+2:1 q:'$d(exp(i))  s exp(i-2)=exp(i) k exp(i)
 q
naton ; 'on' statement
 s x=exp(i+1)
 i x?1"("1e.e1")" s x=$p($p(x,"(",2),")",1)
 s ^mgtmp($j,"from","on",qnum,$i(^mgtmp($j,"from","on",qnum)))=x
 f ii=1:1:$l(x," ") s cname=$$trim^%mgsqls($p(x," ",ii)),alias=$p(cname,".",1),cname=$p(cname,".",2) i cname'="",alias'="" s ^mgtmp($j,"from","z",qnum,"join",cname,alias)=""
 k exp(i),exp(i+1) f i=i+2:1 q:'$d(exp(i))  s exp(i-2)=exp(i) k exp(i)
 q
 ;
natv(dbid,qnum,tnum,error) ; validate element in using statement
 n tname,tname1,tname2,alias,alias1,alias2,cname
 s tname1=$p(^mgtmp($j,"from",qnum,tnum),"~",1),alias1=$p(^mgtmp($j,"from",qnum,tnum),"~",2)
 s tname2=$p(^mgtmp($j,"from",qnum,tnum+1),"~",1),alias2=$p(^mgtmp($j,"from",qnum,tnum+1),"~",2)
 s cname="" f  s cname=$o(^mgtmp($j,"from","z",qnum,"jn",tnum,cname)) q:cname=""  d natv1(dbid,qnum,tname1,tname2,cname,.error) i $l(error) q
 i $l(error) q
 s ^mgtmp($j,"from","z",qnum,"c","x",alias1)="",^mgtmp($j,"from","z",qnum,"c","x",alias2)=""
 k ^mgtmp($j,"from","z",qnum,"jn",tnum)
 q
 ;
natv1(dbid,qnum,tname1,tname2,cname,error) ; column in tables test
 n %defk,%defd
 f tname=tname1,tname2 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error="'using' statement: column '"_cname_"' not found in table '"_tname_"'",error(5)="42S22" q
 i $l(error) q
 s ^mgtmp($j,"from","z",qnum,"join",cname,alias1)="",^mgtmp($j,"from","z",qnum,"join",cname,alias2)=""
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlv6" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlv6 ;(CM) sql - set expansion ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv6") q
 ;
link ; expand where statement for set expansion link
 n at,man,alias
 i '$d(%link(qnum)) q
 s cname="" f i=0:0 s cname=$o(%link(qnum,cname)) q:cname=""  s alias="" f i=0:0 s alias=$o(%link(qnum,cname,alias)) q:alias=""  i $d(%link(qnum,cname,alias,"man")) s man(cname)=""
 s cname="" f i=0:0 s cname=$o(man(cname)) q:cname=""  s alias="" f i=0:0 s alias=$o(%link(qnum,cname,alias)) q:alias=""  s %link(qnum,cname,alias,"man")=""
 s cname="" f i=0:0 s cname=$o(%link(qnum,cname)) q:cname=""  s alias="" f i=0:0 s alias=$o(%link(qnum,cname,alias)) q:alias=""  d link1
 s cname="" f i=0:0 s cname=$o(%link(qnum,cname)) q:cname=""  i '$d(%link("done",qnum,cname)) d link4
 f i=1:1 q:'$d(^mgtmp($j,"sel",qnum,i))  s var=^(i) d links
linkx ;
 q
 ;
link1 ; expand where
 n tname,lnkat,strt,end
 s sqvar=alias_"."_cname,tname=%link(qnum,cname,alias),lnkat=$p(tname,".",2),tname=$p(tname,".",1)
 f i=1:1 q:'$d(word(0,i))  i i>1,word(0,i)="=",$d(word(0,i+1)) s x=word(0,i-1),y=word(0,i+1) d link2 i $d(cnst(0)) q
 i '$d(cnst(0)) q
 s %link("done",qnum,cname)=""
 s two=$d(%link(qnum,cname,alias,"man")) d link3
 f i=end+1:1 q:'$d(word(0,i))  s end(i-end)=word(0,i)
 s alias1=$o(%link(qnum,cname,alias,"a","")),alias2=$o(%link(qnum,cname,alias,"a",alias1)),%link("ord",qnum,alias1)="" i $l(alias2) s %link("ord",qnum,alias2)=""
 s l=strt
 s x="(" d link11 s x=%z("dsv")_alias1_"."_cname_%z("dsv") d link11 s x="=" d link11
 s i="" f  s i=$o(cnst(0,i)) q:i=""  s x=cnst(0,i) d link11
 s x=")" d link11 i '$l(alias2) d link12 g link13
 s x="&" d link11 s x="(" d link11 s x=%z("dsv")_alias2_"."_lnkat_%z("dsv") d link11 s x="=" d link11 s x=%z("dsv")_alias1_"."_lnkat_%z("dsv") d link11 s x=")" d link11
 s x="&" d link11 s x="(" d link11 s x=%z("dsv")_sqvar_%z("dsv") d link11 s x="=" d link11 s x=%z("dsv")_alias2_"."_cname_%z("dsv") d link11 s x=")" d link11
link13 f i=1:1 q:'$d(end(i))  s x=end(i) d link11
 q
 ;
link11 ; add processed word to where statement
 s word(0,l)=x,l=l+1
 q
 ;
link12 ; specific and unique
 s x="&" d link11 s x="(" d link11 s x=%z("dsv")_sqvar_%z("dsv") d link11 s x="=" d link11 s x=%z("dsv")_alias1_"."_lnkat_%z("dsv") d link11 s x=")" d link11
 q
 ;
link2 ; extract constant/expression
 n j,n,n1,n2,z,obr,cbr
 k cnst(0)
 s n1=0 i $e(x,1,3)=%z("dsv"),x'[" " s x=$p(x,%z("dsv"),2) i x?1a.e1"."1a.e,$d(%link(qnum,$p(x,".",2),$p(x,".",1))) s n1=i+1,n=1,cnst=y i y[%z("dsv") q
 i $e(y,1,3)=%z("dsv"),y'[" " s y=$p(y,%z("dsv"),2) i y?1a.e1"."1a.e,$d(%link(qnum,$p(y,".",2),$p(y,".",1))) s n1=i-1,n=-1,cnst=x i x[%z("dsv") q
 i 'n1 q
 i cnst[%z("dev") s cnst(0,1)=cnst,strt=i-1,end=i+1 q
 i cnst'="(",cnst'=")" q
 s (obr,cbr,n2)=0,ok=1 f j=n1:n q:'$d(word(0,j))  s z=word(0,j) s:z="(" obr=obr+1 s:z=")" cbr=cbr+1 s n2=n2+1,cnst(0,n2*n)=z s:z[%z("dsv") ok=0 i 'ok!obr=cbr q
 i n=1 s strt=i-1,end=j
 i n=-1 s strt=j,end=i+1
 i 'ok k cnst(0) q
 q
 ;
link3 ; expand from statement for link
 n n,alias1,fct
 i '$d(%link("a")) s %link("a")=0
 s n=%link("a")+1,%link("a")=n
 f tnum=1:1 q:'$d(^mgtmp($j,"from",qnum,tnum))
 s alias1="y$"_n
link31 s %link(qnum,cname,alias,"a",alias1)="",%link("ax",qnum,tname,alias1)="",^mgtmp($j,"from",qnum)=^mgtmp($j,"from",qnum)_","_tname_" "_alias1,^mgtmp($j,"from",qnum,tnum)=tname_"~"_alias1,^mgtmp($j,"from","x",qnum,alias1)=fct,^mgtmp($j,"from","x",qnum,tname)=fct
 i two s tnum=fct+1,alias1="z$"_n,two=0 g link31
 q
 ;
link4 ; non specific joins
 n end
 s %link("done",qnum,cname)=""
 f i=1:1 q:'$d(word(0,i))  s end(i)=word(0,i)
 s l=1
 s x="(" d link11
 s alias="" f i=0:1 s alias=$o(%link(qnum,cname,alias)) q:alias=""  d link41
 i $d(end(1)) s x="&" d link11 f i=1:1 q:'$d(end(i))  s x=end(i) d link11
 s x=")" d link11
 q
 ;
link41 ; add join
 s tname=%link(qnum,cname,alias),lnkat=$p(tname,".",2),tname=$p(tname,".",1)
link42 s alias1=$o(%link("ax",qnum,tname,""))
 i '$l(alias1) s two=0 d link3 g link42
 i i s x="&" d link11
 s x="(" d link11 s x=%z("dsv")_alias_"."_cname_%z("dsv") d link11 s x="=" d link11 s x=%z("dsv")_alias1_"."_cname_%z("dsv") d link11 s x=")" d link11
 q
 ;
links ; substitute select column
 n lvar,alias,alias1,tname1,cname,at1,var1,x
 i var'[%z("dsv") q
 s lvar=$p(var,%z("dsv"),2) i lvar'?1a.e1"."1a.e q
 s alias=$p(lvar,".",1),cname=$p(lvar,".",2) i '$d(%link(qnum,cname,alias)) q
 s tname1=%link(qnum,cname,alias),at1=$p(tname1,".",2),tname1=$p(tname1,".",1),alias1=$o(%link("ax",qnum,tname,""))
 i '$l(alias1) q
 s var1=%z("dsv")_"."_cname_%z("dsv")
 k ^mgtmp($j,"selx",qnum,var) s ^mgtmp($j,"sel",qnum,i)=var1,^mgtmp($j,"selx",qnum,var1)=i
 i $d(^mgtmp($j,"outsel",qnum,i)) k ^mgtmp($j,"outselx",qnum,var) s ^mgtmp($j,"outsel",qnum,i)=var1,^mgtmp($j,"outselx",qnum,var1)=i
 s item=%z("dsv")_alias1_"."_at1_%z("dsv") d addselx^%mgsqlv2
 s ln=$p(var1,%z("dsv"),2)_" <= "_alias1_"."_at1_" ;" d decex^%mgsqlv1
 q
 ;
]]></Routine>


<Routine name="%mgsqlw" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlw ;(CM) MGSQL HTTP ; 17 dec 2003  3:15 pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlw") q
 ;
main ; start
 s $zt="loope^%mgsqlw" ; new $ztrap set $ztrap="zgoto "_$zlevel_":loope^%mgsqlw"
 k ^mgtmp($j)
 d init
 s head=buf
loop ; next command
 s $zt="loope^%mgsqlw" ; new $ztrap set $ztrap="zgoto "_$zlevel_":loope^%mgsqlw"
 s ok=$$read(.head,.cgi,.data)
 s ok=$$nvp($g(cgi("QUERY_STRING")),.nvp)
 i $g(cgi("CONTENT_TYPE"))="application/x-www-form-urlencoded" s ok=$$nvp($g(data),.nvp)
 i '$d(nvp("UCI")) s nvp("UCI")="USER"
 i $g(nvp("UCI"))'="" s ok=$$cuci^%mgsqls($g(nvp("UCI")))
 i $g(cgi("SCRIPT_NAME"))[".ico" d notfound g loop1
 i $d(nvp("SQL")) d sql($g(nvp("SQL"))) g loop1
 i $d(nvp("sql")) d sql($g(nvp("sql"))) g loop1
 i $d(nvp("QUERY")) d sql($g(nvp("QUERY"))) g loop1
 i $d(nvp("query")) d sql($g(nvp("query"))) g loop1
 i $g(cgi("CONTENT_TYPE"))["/sql" d sql(data) g loop1
 d sqlform
loop1 ; request satisfied
 c $I
 h
loope ; error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d servererror(error)
 d logerror^%mgsqls($$error^%mgsqls(),"M Exception")
 h
 ;
init ; essential constants
 s dbid="mgsql"
 s %zi("df")=$c(1)
 s %zi("base")=10
 q
 ;
read(head,cgi,data) ; read request
 n x,i,line,len,clen,pathinfo
 k cgi
 s data=""
 f  r *x s head=head_$c(x) q:head[$c(13,10,13,10)
 s head=$$rreplace^%mgsqls(head,"  "," ")
 s line=$p(head,$c(13,10),1)
 s cgi("REQUEST_METHOD")=$p(line," ",1)
 s cgi("SCRIPT_NAME")=$p($p(line," ",2),"?",1)
 s cgi("PATH_INFO")=$p(cgi("SCRIPT_NAME"),".sql",2,9999)
 s cgi("SCRIPT_NAME")=$p(cgi("SCRIPT_NAME"),".sql",1)_".sql"
 i line["?" s cgi("QUERY_STRING")=$p($p(line," ",2),"?",2,9999)
 s cgi("SERVER_PROTOCOL")=$p(line," ",3)
 f i=2:1 s line=$p(head,$c(13,10),i) q:line=""  d
 . s name=$tr($$ucase^%mgsqls($$rtrim^%mgsqls($p(line,":",1))),"-","_")
 . i name="CONTENT_LENGTH"!(name="CONTENT_TYPE") s cgi(name)=$$ltrim^%mgsqls($p(line,":",2,999)) q
 . s cgi("HTTP_"_name)=$$ltrim^%mgsqls($p(line,":",2,999))
 . q
 s clen=+$g(cgi("CONTENT_LENGTH")) i clen=0 q 1
 s data="",len=0 f  r x#(clen-len) s data=data_x,len=len+$l(x) i len=clen q
 q 1
reade ; Error
 q 0
 ;
nvp(qs,nvp) ; get name/value pairs for url-encoded content
 n i,p,name,value
 i qs="" q 1
 f i=1:1:$l(qs,"&") s p=$p(qs,"&",i) d
 . s name=$p(p,"=",1),value=$p(p,"=",2)
 . i name="" q
 . s nvp($$urldecode^%mgsqls(name))=$$urldecode^%mgsqls(value)
 . q
 q 1
nvpe ; Error
 q 0
 ;
sql(sql) ; run query
 n cols
 s dbid=$$schema^%mgsql("")
 s stmt=0
 s sql=$tr(sql,$c(13,10),"")
 s error=""
 s line(1)=sql
 s %zi("stmt")=0
 s rou=$$main^%mgsqlx(dbid,.line,.info,.error)
 i rou="" s error="Invalid Query",error(5)="HY000"
 i error'="" g sql1
 s qid=$g(info("qid"))
 f i=1:1 q:'$d(^mgsqlx(1,dbid,qid,"out",i))  d
 . s r=$g(^(i))
 . s cname=$p(r,"~",1)
 . s tname=$p(r,"~",2)
 . s dtyp=$p(r,"~",8)
 . i cname["(" d  q
 . . s ag=$p(cname,"("),cname=$p($p(cname,"(",2,999),")",1)
 . . i cname["." s cname=$p(cname,".",2)
 . . s ag=$$trim^%mgsqln(ag)
 . . s cname=$$trim^%mgsqln(cname)
 . . i cname="" s cname="col_"_i
 . . s cname=ag_"-"_cname
 . . s cname=$tr(cname,":","")
 . . q
 . i cname["." s cname=$p(cname,".",2)
 . i cname="" s cname="xxx"
 . s cols(i)=cname
 . q
 i $d(info("sp")) d  g sql1
 . s ok=-1
 . s %zo("routine")=rou
 . s %zi("stmt")=stmt
 . s rc=$$so^%mgsqlz()
 . s @("ok=$$"_rou_"(.%zi,.%zo)")
 . s rc=$$sc^%mgsqlz()
 . q
 i rou'="" s %zo("routine")=rou,@("ok=$$exec^"_rou_"(.%zi,.%zo)")
sql1 ; output result
 d json
 q
 ;
json ; output results as JSON document
 s head="HTTP/1.1 200 OK"_$c(13,10)
 ;s head=head_"Content-Type: text/plain"_$c(13,10)
 ;s head=head_"Content-Type: text/x-json"_$c(13,10)
 s head=head_"Content-Type: application/json"_$c(13,10)
 s head=head_"Connection: close"_$c(13,10)
 s head=head_$c(13,10)
 w head d flush^%mgsqls()
 i $g(error)'="" s out="{""sqlcode"": "_"-1"_", ""sqlstate"": """_$s($d(error(5)):error(5),1:"HY000")_""", ""error"": """_error_"""}" g json1
 s out="{""sqlcode"": "_"0"_", ""sqlstate"": """_"00000"_""", ""error"": "_""""""
 s out=out_", ""result"": [",ecom=""
 f rn=1:1 q:'$d(^mgsqls($j,%zi("stmt"),0,rn))  d
 . s out=out_ecom_"{",com="",ecom=","
 . f cn=1:1 q:'$d(^mgsqls($j,%zi("stmt"),0,rn,cn))  d
 .. s name=$g(cols(cn))
 .. i name[%z("dsv") s name=$p(name,%z("dsv"),2)
 .. s name=$tr(name,".","_")
 .. s value=$g(^mgsqls($j,%zi("stmt"),0,rn,cn))
 .. s out=out_com_""""_name_""""_": """_value_"""",com=","
 .. q
 . s out=out_"}"
 . q
 s out=out_"]"
 s out=out_"}"
json1 ; response complete
 w out d flush^%mgsqls()
 q
 ;
sqlform ; output a simple form
 s head="HTTP/1.1 200 OK"_$c(13,10)
 s head=head_"Content-Type: text/html"_$c(13,10)
 s head=head_"Connection: close"_$c(13,10)
 s head=head_$c(13,10)
 w head d flush^%mgsqls()
 s out="<html>"_$c(13,10)
 s out=out_"<head><title>SQL Test Form</title></head>"_$c(13,10)
 s out=out_"<body>"_$c(13,10)
 s out=out_"<form method=POST>"_$c(13,10)
 s out=out_"<h2>SQL Test Form</h2>"_$c(13,10)
 s out=out_"<p></p>"_$c(13,10)
 s out=out_"<textarea name=SQL rows=20 cols=140></textarea>"_$c(13,10)
 s out=out_"<p></p>"_$c(13,10)
 s out=out_"<input type=SUBMIT value='Execute SQL'>"_$c(13,10)
 s out=out_"</form>"_$c(13,10)
 s out=out_"</body>"_$c(13,10)
 s out=out_"</html>"_$c(13,10)
 w out d flush^%mgsqls()
 q
 ;
notfound ; HTTP not found
 s head="HTTP/1.1 404 Not Found"_$c(13,10)
 s head=head_"Connection: close"_$c(13,10)
 s head=head_$c(13,10)
 w head d flush^%mgsqls()
 q
 ;
servererror(error) ; HTTP internal server error
 s head="HTTP/1.1 500 Internal Server Error"_$c(13,10)
 s head=head_"Connection: close"_$c(13,10)
 s head=head_$c(13,10)
 w head,error
 d flush^%mgsqls()
 q
 ;
test ; test harness
 k
 ;s sql="select * from patient a"
 s sql="call patient_getdata"
 d sql(sql)
 q
 ;
 
]]></Routine>


<Routine name="%mgsqlx" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlx ;(CM) sql - MGSQL as a server ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlx") q
 ;
main(dbid,line,info,error) ; compile query
 ;n ddl,rou,qid,sql
 n (%z,dbid,line,info,error)
 s $zt="maine^%mgsqlx" ; new $ztrap set $ztrap="zgoto "_$zlevel_":maine^%mgsqlx"
 ;k ^mgsqlx
 s rou="",error=""
 s ddl=$$verify(dbid,.line,.error) i ddl=1 g exit
 s qid=$$hash(dbid,.rou,.line)
 s info("qid")=qid
 i ddl=2 s info("sp")=rou g main1
 ; Force recompilation
 k ^mgsqlx(1,dbid,qid,"m")
 ; Don't recompile if already compiled
 i $d(^mgsqlx(1,dbid,qid,"m")) g exit
 d comp(dbid,qid,rou,.sql,.line,.error)
main1 d save
 g exit
maine ; error
 s error="System Exception: "_$$error^%mgsqls(),error(5)="HY000"
exit ;k ^mgtmp($j)
 q rou
 ;
et2 ; test
 w !,"in et2^%mgsqlx"
 s x=ttt
 q
 ;
n36(n10) ; generate 3 character base-36 node number 000 -> zzz
 n alpha,char,n36,rem
 s alpha="0123456789abcdefghijklmnopqrstuvwxyz"
 s n36="" f char=1:1:3 s rem=n10#36,n10=n10\36,n36=$e(alpha,rem+1)_n36
 q n36
 ;
hash(dbid,sqrou,line) ; apply hashing algorithm to query
 n lin,ln,chng,n10,n36,i,mxi,hash
 s sqrou=""
 s ln=0 f i=1:1 q:'$d(line(i))  s lin=line(i),ln=ln+1,lin(ln)=lin
 s mxi=i-1
 s hash="" f i=1:1:3 s n10=$s($d(lin(i)):$l(lin(i)),1:0) s n36=$$n36(n10) s hash=hash_$e(n36,2,3)
 s n10=mxi,n36=$$n36(n10),hash=hash_$e(n36,2,3)
 ; try and find existing query
 s chng=1,qid="" f  s qid=$o(^mgsqlx(2,dbid,hash,qid)) q:qid=""  i '$$hash1(dbid,qid,.line) q
 i '$l(qid) s qid=$$prfx()
 s sqrou="x"_qid_1 i $d(^mgtmp($j,"sp")) s sqrou=$g(^mgtmp($j,"sp")),^mgsqlx(1,dbid,qid,"sp")=sqrou
 s ^mgsqlx(1,dbid,qid,"hash")=hash,^("rou")=sqrou,^mgsqlx(2,dbid,hash,qid)=""
 f i=1:1 q:'$d(line(i))  s ^mgsqlx(1,dbid,qid,"sql",i)=line(i)
 q qid
 ;
hash1(dbid,qid,line) ; compare individual query
 n chng,i
 s chng=0
 f i=1:1 q:'$d(^mgsqlx(1,dbid,qid,"sql",i))  s:'$d(line(i)) chng=1 q:chng  i ^(i)'=line(i) s chng=1 q
 i $d(line(i)) s chng=1
 q chng
 ;
save ; allocate query id and save query
 n type,i,l,to,fr,rou
 m ^mgsqlx(1,dbid,qid,"in")=^mgtmp($j,"in")
 m ^mgsqlx(1,dbid,qid,"t")=^mgtmp($j,"sqlupd")
 f i=1:1 q:'$d(^mgtmp($j,"outsel",1,i))  s var=$g(^(i)) d
 . s tname="",cname=var
 . i var[%z("dsv") s var=$p(var,%z("dsv"),2)
 . s alias=$p(var,".",1),cname=$p(var,".",2)
 . i alias'="" s tno=$g(^mgtmp($j,"from","x",1,alias)) i tno'="" s tname=$p($g(^mgtmp($j,"from",1,tno)),"~",1)
 . s ^mgsqlx(1,dbid,qid,"out",i)=var_"~"_tname_"~"_cname_"~"_$$dtype^%mgsqld(dbid,tname,cname)
 . q
 i '$d(^mgsqlx(1,dbid,qid,"sp")) s code="^mgsqlx(1,dbid,qid,""m"",i)",mxi=$g(^mgsqlx(1,dbid,qid,"m")),rou="x"_qid_"1",ok=$$zs^%mgsqlr(rou,code,mxi)
 q
 ;
del(dbid,qid) ; delete script from file
 n hash,rou,ok
 s (hash,rou)=""
 i $d(^mgsqlx(1,dbid,qid,"hash"))#10 s hash=^("hash")
 i $d(^mgsqlx(1,dbid,qid,"rou"))#10 s rou=^("rou")
 i $l(rou) s ok=$$zr^%mgsqlr(rou)
 i $l(hash) k ^mgsqlx(1,dbid,hash,qid)
 d delcalls(dbid,qid)
 d delupd(dbid,qid)
 k ^mgsqlx(1,dbid,qid)
 q
 ;
delcalls(dbid,qid) ; delete calls index
 k ^mgsqlx(1,dbid,qid,"calls")
 q
 ;
delupd(dbid,qid) ; delete update index
 k ^mgsqlx(1,dbid,qid,"squpd")
 q
 ;
newfid ; file updated - wipe out affected code
 n (%z,dbid,tname)
 q
newfide ; error
 q
 ;
prfx() ; assign new prefix
 n n10,qid
 l ^mgsqlx(0)
 i '$d(^mgsqlx(0)) s ^(0)=0
 s n10=^(0)+1,^(0)=n10
 l
 s qid=$$n36(n10)
 q qid
 ;
verify(dbid,line,error) ; verify query and execute any DDL commands
 n ddl
 s ddl=0
 d main^%mgsqlv(dbid,.line,.error)
 i $e(error,1,5)="\ddl\" s ddl=1,error=$e(error,6,999)
 i $e(error,1,4)="\sp\" s ddl=2,error=$e(error,5,999)
 q ddl
 ;
comp(dbid,qid,rou,sql,line,error) ; compile query
 n i,ok,var
 k ^mgsqlx(1,dbid,qid,"var")
 d delcalls(dbid,qid)
 d delupd(dbid,qid)
 d main^%mgsqlo i $l(error) g compx
 d main^%mgsqlc i $l(error) g compx
compx ; exit compilation process
 i $l(error) s ^mgsqlx(1,dbid,qid,"error")=error d del(dbid,qid)
 q
 ;
upd() ; see if updates are allowed
 s upd=0
 q upd
 ;
acc(user,model,entity,context,error,info) ; see if access is allowed
 s error=""
 q 1
 i user="s3992\muntc" q 1
 i 'result,error="" s error="you ("_user_") may not access "_entity_" (app="_$g(info("app"))_"; ip="_$g(info("ip"))_")",error(5)="42000"
 q result
 ;
 
]]></Routine>


<Routine name="%mgsqlz" type="INT" languagemode="0" timestamp="65345,32735"><![CDATA[
%mgsqlz ;(CM) MGSQL : client-server computing ; 12 feb 2002  02:10pm
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2019 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlz") q
 ;
so(%zi,%zo) ; server: open
 i $g(%zi("stmt"))'="" k ^mgsqls($j,%zi("stmt"))
 q 0
 ;
ss(%zi,%zo,rn) ; server: row of data
 n i
 i $g(%zi("stmt"))'="" d  k %zo(rn) q 0
 . f i=1:1 q:'$d(%zo(rn,i))  i $g(%zo(0,i,0))="date" s %zo(rn,i)=$$ddate^%mgsqls($g(%zo(rn,i)),1)
 . m ^mgsqls($j,%zi("stmt"),0,rn)=%zo(rn)
 . q
 w ! f i=1:1 q:'$d(%zo(rn,i))  d
 . i i>1 w ","
 . i $g(%zo(0,i,0))="date" w $$ddate^%mgsqls($g(%zo(rn,i)),1) q
 . i $g(%zo(rn,i))["," w """"_$g(%zo(rn,i))_"""" q
 . w $g(%zo(rn,i))
 . q
 k %zo(rn)
 q 0
 ;
sc(%zi,%zo) ; server: close
 i $g(%zi("stmt"))'="" k ^mgsqls($j,%zi("stmt"),1),^mgsqls($j,%zi("stmt"),2),^mgsqls($j,%zi("stmt"),3)
 q 0
 ;
]]></Routine>
</Export>
