Cache for Windows^INT^mgsql
%RO on 04 Feb 2022 01:00 AM
%mgsql
%mgsql ;(CM) MGSQL Front end ; 28 Jan 2022  9:57 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers("%mgsql") q
 ; 
v() ; version and date
 n v,r,d
 ;s v="1.0",r=1,d="1 December 2018"
 ;s v="1.0",r=2,d="26 March 2019"
 ;s v="1.0",r=3,d="10 May 2019"
 ;s v="1.0",r=4,d="11 May 2019"
 ;s v="1.0",r=5,d="14 May 2019"
 ;s v="1.0",r=6,d="7 June 2019"
 ;s v="1.0",r=7,d="13 June 2019"
 ;s v="1.0",r=8,d="1 November 2019"
 ;s v="1.1",r=9,d="15 January 2020"
 ;s v="1.2",r=10,d="14 April 2020"
 ;s v="1.2",r=11,d="28 May 2020"
 ;s v="1.2",r=12,d="3 January 2021"
 ;s v="1.2",r=13,d="5 January 2021"
 ;s v="1.2",r=14,d="8 January 2021"
 ;s v="1.2",r=15,d="10 January 2021"
 ;s v="1.2",r=16,d="13 January 2021"
 ;s v="1.2",r=17,d="14 January 2021"
 ;s v="1.2",r=18,d="22 January 2021"
 ;s v="1.3",r=19,d="22 February 2021"
 ;s v="1.3",r=20,d="25 June 2021"
 ;s v="1.3",r=21,d="30 September 2021"
 s v="1.4",r=22,d="3 February 2022"
 q v_"."_r_"."_d
 ;
vers(this) ; version information
 n v
 s v=$$v()
 w !,"MGSQL by M/Gateway Developments Ltd."
 w !,"Version: "_$P(v,".",1,2)_"; Revision "_$P(v,".",3)_" ("_$P(v,".",4)_")"_" "_this
 w !
 Q
 ;
upgrade(mode) ; upgrade this installation
 k ^mgsqlx,^mgtmp,^mgtemp
 q 0
 ;
exec(dbid,sql,%zi,%zo)
 n (dbid,sql,%zi,%zo)
 s $zt="exece^%mgsql" ; new $ztrap set $ztrap="zgoto "_$zlevel_":exece^%mgsql"
 ; s ok=$$upgrade(0)
 s error="",ok=0
 i $g(%zi("stmt"))'="" s %zi(0,"stmt")=$g(%zi("stmt")) ; for backwards compatibility
 i $g(%zi(0,"recompile"))'="" s info(0,"recompile")=$g(%zi(0,"recompile"))
 s dbid=$$schema(dbid)
 s line(1)=sql
 s rou=$$main^%mgsqlx(dbid,.line,.info,.error)
 i error'="" s %zo("error")=error q -1
 i rou'="" s %zo("routine")=rou
 i $d(info("sp")) d  g exec1
 . s ok=-1
 . s rc=$$so^%mgsqlz()
 . s @("ok=$$"_rou_"(.%zi,.%zo)")
 . s rc=$$sc^%mgsqlz()
 . q
 i $d(info("tp")) s ok=$$tpcb^%mgsqlz(dbid,.sql,.%zi,.%zo,.info) g exec1
 i rou'="" s @("ok=$$exec^"_rou_"(.%zi,.%zo)")
exec1 ; exit
 q ok
 ;
exece ; error
 w !!,"error=",$$error^%mgsqls()
 q -1
 ;
inetd ; entry point from [x]inetd
xinetd ; someone is sure to use this label
 s $zt="inetde^%mgsql" ; new $ztrap set $ztrap="zgoto "_$zlevel_":inetde^%mgsql"
 s buf="" f  r *x q:x=10  s buf=buf_$c(x)
 i buf="xDBC" d main^%mgsqln q
 i buf?1U.E1"HTTP/"1N1"."1N1C s buf=buf_$c(10) d main^%mgsqlw q
 q
inetde ; error
 w $$error^%mgsqls()
 q
 ;
schema(schema) ; schema
 i schema="" q "mgsql"
 q schema
 ;
start(port) ; Start daemon
 s $zt="starte^%mgsql" ; new $ztrap set $ztrap="zgoto "_$zlevel_":starte^%mgsql"
 s port=+$g(port)
 k ^%mgsql("stop")
 ; Concurrent tcp service (Cache, IRIS, M21, MSM, YottaDB)
 i $$isidb^%mgsqls()!$$ism21^%mgsqls()!$$ismsm^%mgsqls()!$$isydb^%mgsqls() j accept^%mgsqln($g(port)) q
 w !,"This M system does not support a concurrent TCP server"
 q
starte ; Error
 w $ze
 q
 ;
stop(port) ; stop
 w !,"Terminating the %mgsql service ... "
 s pport=+$g(port) i pport="" q
 i 'pport s pport=7041
 s job=$g(^%mgsql("server",pport))
 ; +not_ydb
 i $$isidb^%mgsqls(),job'="" d $SYSTEM.Process.Terminate(job) g stopx
 ; -not_ydb
 d killproc(job)
stopx ; service should have terminated
 k ^%mgsql("server",pport)
 w !!,"%mgsql service terminated",!
 q
 ;
killproc(pid) ; stop this listener
 i '$l(pid) q
 w !,"stop: "_pid
 ; +not_ydb
 i $$isidb^%mgsql() s x=$system.process.terminate(pid,0)
 ; -not_ydb
 ; +ydb
 ; zsy "kill -term "_pid
 ; -ydb
 q
 ;
ylink ; link all routines
 ;;zlink "_mgsql.m"
 zlink "_mgsqlc.m"
 zlink "_mgsqlc1.m"
 zlink "_mgsqlc2.m"
 zlink "_mgsqlc3.m"
 zlink "_mgsqlc4.m"
 zlink "_mgsqlc5.m"
 zlink "_mgsqlc6.m"
 zlink "_mgsqlcd.m"
 zlink "_mgsqlci.m"
 zlink "_mgsqlct.m"
 zlink "_mgsqlcu.m"
 zlink "_mgsqld.m"
 zlink "_mgsqle.m"
 zlink "_mgsqle1.m"
 zlink "_mgsqle2.m"
 zlink "_mgsqln.m"
 zlink "_mgsqln1.m"
 zlink "_mgsqln2.m"
 zlink "_mgsqlo.m"
 zlink "_mgsqlo1.m"
 zlink "_mgsqlo2.m"
 zlink "_mgsqlp.m"
 zlink "_mgsqlp1.m"
 zlink "_mgsqlr.m"
 zlink "_mgsqls.m"
 zlink "_mgsqlv.m"
 zlink "_mgsqlv1.m"
 zlink "_mgsqlv2.m"
 zlink "_mgsqlv3.m"
 zlink "_mgsqlv4.m"
 zlink "_mgsqlv5.m"
 zlink "_mgsqlv6.m"
 zlink "_mgsqlw.m"
 zlink "_mgsqlx.m"
 zlink "_mgsqlz.m"
 q
 ;
 ;
 ; SQL samples
 ;
drop ; drop tables
 k %zi,%zo
 s sql="drop table patient"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s sql="drop table admission"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s sql="drop table labtest"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
create ; create tables
 k %zi,%zo
 s sql="create table patient ("_$c(13,10)
 s sql=sql_" num int not null,"_$c(13,10)
 s sql=sql_" name varchar(255),"_$c(13,10)
 s sql=sql_" address varchar(255) separate ('address'),"_$c(13,10)
 s sql=sql_" dob date,"_$c(13,10)
 s sql=sql_" age int derived age^%mgsqls(dob),"_$c(13,10)
 s sql=sql_" constraint pk_patient primary key (num))"_$c(13,10)
 s sql=sql_" /*! global=mgpat, delimiter=# */"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 ;
 s sql="create table admission ("_$c(13,10)
 s sql=sql_" num int not null,"_$c(13,10)
 s sql=sql_" dadm date not null,"_$c(13,10)
 s sql=sql_" ward varchar(32),"_$c(13,10)
 s sql=sql_" con varchar(32),"_$c(13,10)
 s sql=sql_" constraint pk_admission primary key ('p', num, dadm))"_$c(13,10)
 s sql=sql_" /*! global=mgadm, delimiter=# */"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 ;
 s sql="create table labtest ("_$c(13,10)
 s sql=sql_" num int not null,"_$c(13,10)
 s sql=sql_" dtest date not null,"_$c(13,10)
 s sql=sql_" test varchar(32),"_$c(13,10)
 s sql=sql_" result int,"_$c(13,10)
 s sql=sql_" constraint pk_labtest primary key ('p', num, dtest, test))"_$c(13,10)
 s sql=sql_" /*! global=mgtst, delimiter=# */"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
index ; create index
 k %zi,%zo
 s sql="create index index1 on admission ('index1', dadm, num)"_$c(13,10)
 s sql=sql_" /*! global=mgadm */"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
delete ; delete records
 k %zi,%zo
 s sql="delete from patient"
 w !,sql,!
 s ok=$$exec^%mgsql("","delete from patient",.%zi,.%zo)
 s sql="delete from admission"
 w !,sql,!
 s ok=$$exec^%mgsql("","delete from admission",.%zi,.%zo)
 s sql="delete from labtest"
 w !,sql,!
 s ok=$$exec^%mgsql("","delete from labtest",.%zi,.%zo)
 q
 ;
insert ; insert records
 k %zi,%zo
 s sql="insert into patient (num, name, address, dob) values (:num, :name, :address, {d:dob})"
 w !,sql,!
 s %zi("num")=1,%zi("name")="Peter Davis",%zi("address")="Banstead",%zi("dob")="1974-08-12",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=2,%zi("name")="Sarah Jones",%zi("address")="Redhill",%zi("dob")="1967-07-13",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=3,%zi("name")="John Smith",%zi("address")="London",%zi("dob")="2002-04-21",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=4,%zi("name")="Jane Doe",%zi("address")="Oxford",%zi("dob")="1997-11-10",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 ;
 k %zi,%zo
 s sql="insert into admission (num, dadm, ward, con) values (:num, {d:dadm}, :ward, :con)"
 w !,sql,!
 s %zi("num")=1,%zi("dadm")="2012-02-20",%zi("ward")="B1",%zi("con")="IES",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=1,%zi("dadm")="2012-03-21",%zi("ward")="B3",%zi("con")="JM",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=1,%zi("dadm")="2015-01-17",%zi("ward")="B1",%zi("con")="TJP",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=1,%zi("dadm")="2016-01-01",%zi("ward")="B1",%zi("con")="IES",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=2,%zi("dadm")="2018-02-20",%zi("ward")="C1",%zi("con")="EW",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=3,%zi("dadm")="2018-04-21",%zi("ward")="D2",%zi("con")="RS",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=2,%zi("dadm")="2018-11-10",%zi("ward")="C3",%zi("con")="RP",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 ;
 k %zi,%zo
 s sql="insert into labtest (num, dtest, test, result) values (:num, {d:dtest}, :test, :result)"
 w !,sql,!
 s %zi("num")=1,%zi("dtest")="2012-02-20",%zi("test")="HGB",%zi("result")="14.2",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=1,%zi("dtest")="2012-03-21",%zi("test")="HGB",%zi("result")="15.1",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=1,%zi("dtest")="2015-01-17",%zi("test")="HGB",%zi("result")="15.7",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=1,%zi("dtest")="2016-01-01",%zi("test")="HGB",%zi("result")="17.1",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=2,%zi("dtest")="2018-02-20",%zi("test")="HGB",%zi("result")="13.2",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=2,%zi("dtest")="2018-11-10",%zi("test")="HGB",%zi("result")="14.7",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=3,%zi("dtest")="2018-04-21",%zi("test")="HGB",%zi("result")="16.4",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
update ; update a record
 k %zi,%zo
 s sql="update patient a set a.address = 'Cambridge' where a.num = 4"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel1 ; select all patient records
 k %zi,%zo
 s sql="select * from patient"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel2 ; select all admitted patients and their admission records (joining the tables using a 'where' statement)
 k %zi,%zo
 s sql="select a.num,a.name,b.dadm,b.ward,b.con from patient a, admission b where a.num = b.num"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel3 ; select all admitted patients and their admission records (using an 'inner join' construct)
 k %zi,%zo
 s sql="select a.num,a.name,b.dadm,b.ward,b.con from patient a inner join admission b using (num)"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel4 ; select all patients and any associated admission records (using an 'outer join' construct)
 k %zi,%zo
 s sql="select a.num,a.name,b.dadm,b.ward,b.con from patient a left join admission b using (num)"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel5 ; select all patients who have been admitted more than 3 times
 k %zi,%zo
 s sql="select a.num,a.name,b.dadm,b.ward,b.con from patient a, admission b"_$c(13,10)
 s sql=sql_" where a.num = b.num and 3 < select count(c.dadm) from admission c where c.num = a.num"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel6 ; count the number of times admitted patients have been admitted
 k %zi,%zo
 s sql="select a.num,a.name,count(b.dadm) from patient a, admission b"_$c(13,10)
 s sql=sql_" where a.num = b.num"_$c(13,10)
 s sql=sql_" group by a.num"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel7 ; select all patients who have been admitted more that 3 times
 k %zi,%zo
 s sql="select a.num,a.name,count(*) from patient a, admission b"_$c(13,10)
 s sql=sql_" where a.num = b.num"_$c(13,10)
 s sql=sql_" group by a.num,a.name"_$c(13,10)
 s sql=sql_" having count(*) > 3"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel8 ; select all patient records but just show each patient's surname
 k %zi,%zo
 s sql="select a.num,$p(a.name,"" "",2) from patient a"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel9 ; select all patients and any associated admission records, but only those for ward 'B3'
 k %zi,%zo
 s sql="select a.num,a.name,b.num,b.dadm,b.ward from patient a left join admission b on a.num = b.num and b.ward = 'B3'"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel10 ; select all patients older than 40.  Convert names to upper case
 k %zi,%zo
 s sql="select a.num,upper(a.name),a.dob,a.age from patient a where a.age > 40"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel11 ; select distinct patient names
 k %zi,%zo
 s sql="select distinct name from patient"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel12 ; select distinct patient names
 k %zi,%zo
 s sql="select distinct a.name from patient a where upper(a.address) like '%BANSTEAD%'"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel13 ; providing variable inputs to a query
 k %zi,%zo
 s sql="select * from patient where num = :number"
 w !,sql,!
 s %zi("number")=1
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel14 ; directing query output to a spool file
 k %zi,%zo,x1,x2,len1
 s %zi(0,"stmt")="MyQuery"
 s sql="select * from patient"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 w !,"Query output will be in spool file: ^mgsqls($job,"""_%zi(0,"stmt")_""") ..."
 s x1="^mgsqls("_$j_","""_%zi(0,"stmt")_""""
 s len1=$l(x1)
 s x2=x1_")" f  s x2=$q(@x2) q:$e(x2,1,len1)'=x1  w !,x2,"=",@x2
 q
 ;
sel15 ; directing query output to a callback function
 k %zi,%zo,x1,x2,len1
 s %zi(0,"callback")="sel15cb^%mgsql"
 s sql="select * from patient"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel15cb(%zi,%zo,rn) ; callback for query sel15
 n n,stop
 s stop=0
 w !,"row number: ",rn
 f n=1:1 q:'$d(%zo(0,n))  d
 . w !,"  column name: ",$g(%zo(0,n)),"; type: ",$g(%zo(0,n,0))
 . w !,"     value: ",$g(%zo(rn,n))
 k %zo(rn)
 q stop
 ;
sel16 ; using 'or' in the where predicate
 k %zi,%zo
 s sql="select * from patient where num = 1 or num = 2 or num = 9 or num = 3"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
sel17 ; using 'in' in the where predicate
 k %zi,%zo
 s sql="select * from patient where num in (1,2,9,3)"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
tp1 ; using transactions in line
 k %zi,%zo
 s sql="start transaction;"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo) i ok<0 q
 s sql="insert into patient (num, name, address, dob) values (:num, :name, :address, {d:dob})"
 w !,sql,!
 s %zi("num")=11,%zi("name")="Trans Action-InLine1",%zi("address")="New York",%zi("dob")="1971-07-09",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=12,%zi("name")="Trans Action-InLine2",%zi("address")="London",%zi("dob")="1980-01-12",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s sql="commit;"
 ; s sql="rollback;"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
tp2 ; using transactions in line
 k %zi,%zo
 s %zi(0,"callback")="tp2cb^%mgsql"
 s sql="start transaction;"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;
tp2cb(%zi,%zo) ; using transactions in a callback (mandatory for YottaDB)
 s sql="insert into patient (num, name, address, dob) values (:num, :name, :address, {d:dob})"
 w !,sql,!
 s %zi("num")=11,%zi("name")="Trans Action-CallBack1",%zi("address")="New York",%zi("dob")="1971-07-09",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s %zi("num")=12,%zi("name")="Trans Action-CallBack2",%zi("address")="London",%zi("dob")="1980-01-12",ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s sql="commit;"
 ; s sql="rollback;"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q ok
 ;
proc ; create stored procedures
 s sql="CREATE PROCEDURE patient_getdata (num int, name varchar(255), address varchar(255))"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 s sql="CREATE PROCEDURE SelectAllPatients AS SELECT * FROM patient GO;"
 w !,sql,!
 s ok=$$exec^%mgsql("",sql,.%zi,.%zo)
 q
 ;


%mgsqlc
%mgsqlc ;(CM) sql compiler - main driver ; 28 Jan 2022  9:57 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc") q
 ;
main ; start
 s line=""
 s %zq("tagout")=%z("dl")_%z("pt")_"x"_%z("dl")
 i '$d(sql(0,1)) g exit
 s grp=2
 i $p(sql(0,1)," ",1)="insert",'$d(sql(1,1)) d main^%mgsqlci g main1
 i $p(sql(0,1)," ",1)="delete",'$d(sql(1,1)) d hilev^%mgsqlcd g main1
 s grp=5
 f count=1:1 s qnum=$g(^mgtmp($j,"subq",count)) q:qnum=""  d subq^%mgsqlc1 i $l(error) q
 i $l(error) g exit
 s grp=3,qnum=1
 d strtq
 d endq
 s grp=5
main1 ; second phase
 d query
 s grp=1
 d begin
 d sort
 d idx
 m ^mgtmp($j,"from")=from
 m ^mgtmp($j,"update")=update
exit ; exit
 k att,cond,count,line,done,f,tnum,tname,from,i,ii,j,l,lcom,lvar,n,pvar,qnum,rec,sdel,sel,select,v,vsub,x,y,z,sqin,seq,reset,endsq
 q
 ;
addend ; add line of code for end of query
 s endcode(el)=line,line="",el=el+1
 q
 ;
begin ; code to be executed at start of query
 k %d,%t s %to="",%do=""
 s line=rou_" ; SQL "_qid_"; "_$$ddate^%mgsqls($h,2)_"; "_$$dtime^%mgsqls($h)_"; "_$h d addline(grp,.line)
 s line=" ;" d addline(grp,.line)
 s line="cols(%zo) ; columns" d addline(grp,.line)
 f i=1:1 q:'$d(^mgtmp($j,"outsel",1,i))  s var=$g(^(i)) d
 . i var[%z("dsv") s var=$p(var,%z("dsv"),2)
 . s alias=$p(var,".",1),cname=$p(var,".",2),tname=alias
 . i alias'="" s tno=$g(^mgtmp($j,"from","x",1,alias)) i tno'="" s tname=$p($g(^mgtmp($j,"from",1,tno)),"~",1)
 . s line=" s %zo(0,"_i_")="""_var_""""_",%zo(0,"_i_",0)="""_$$dtype^%mgsqld(dbid,tname,cname)_"""" d addline(grp,.line)
 . q
 s line=" q 0" d addline(grp,.line)
 s line=" ;" d addline(grp,.line)
 s line="exec(%zi,%zo) ; main entry point" d addline(grp,.line)
 s line=line_%z("pv")
 f i=1:1:vsub s line=line_","_%z("pv")_i
 s invs=$g(^mgtmp($j,"in")) i invs f i=1:1:invs s line=line_","_"iv"_i
 s line=" n "_line d addline(grp,.line)
 s line=" k "_%z("ctg")_"("_%z("cts")_")" d addline(grp,.line)
 s lvar="" f  s lvar=$o(^mgtmp($j,"in",lvar)) q:lvar=""  s pvar=$$subvar3(lvar),r=$g(^mgtmp($j,"in",lvar)) d
 . s pvar=$p(r,"~",1)
 . s line=" i '$d(%zi("""_lvar_""")) s %zo(""error"")=""<ERROR>input '"_lvar_"' not supplied"" q -1" d addline(grp,.line)
 . s line=" s "_pvar_"=$g(%zi("""_lvar_"""))" d addline(grp,.line)
 . q
 s line=" s "_%z("vok")_"=$$cols(.%zo)" d addline(grp,.line)
 s line=" s "_%z("vok")_"=$$so^%mgsqlz(.%zi,.%zo)" d addline(grp,.line)
 d trx
 i $d(sql("union",1)) d union
 q
 ;
union ; reserve variables for union in uvar
 n qnum
 s qnum="" f  s qnum=$o(sql("union",qnum)) q:qnum=""  f i=1:1:outsel s uvar=$p(^mgtmp($j,"sel",qnum,i),%z("dsv"),2) d union1
 k uvarx
 q
 ;
union1 ; assign union variable by position
 i uvar="" q
 d union2
 i '$d(uvarx(i)) s lvar="\\cmu"_i d subvar1^%mgsqlc s uvarx(i)=pvar
 s pvar=uvarx(i)
 i $l(pvaru) s uvar(0,qnum,pvar)=pvaru
 i $d(uvar(uvar)) s uvar(0,qnum,pvar)=uvar(uvar) q
 s uvar(uvar)=pvar
 s uvar=$p($p(uvar,")",1),"(",2) i uvar="" q
 d union2
 i '$d(uvarx(i,1)) s lvar="\\\cmu"_i d subvar1^%mgsqlc s uvarx(i,1)=pvar
 s pvar=uvarx(i,1)
 i $l(pvaru) s uvar(0,qnum,pvar)=pvaru
 i $d(uvar(uvar)) s uvar(0,qnum,pvar)=uvar(uvar) q
 s uvar(uvar)=pvar
 q
 ;
union2 ; check for pre-assigned variable from declare
 n lvar,pvar
 s lvar=uvar
 s pvaru=$$subvaru^%mgsqlc(lvar)
 q
 ;
strtq ; code to be executed at start of query
 n lab
 s ok=0 f i=1:1 q:'$d(^mgtmp($j,"from",i))!ok  f ii=1:1 q:'$d(^mgtmp($j,"from",i,ii))  i $p(^mgtmp($j,"from",i,ii),"~",1)["(" s ok=1 q
 i ok s line=" i '$d(%iv(""uci"")) s %iv(""uci"")=""""" d addline(grp,.line)
 i $d(^mgtmp($j,"create","index")) d klind^%mgsqlc5(grp,qnum)
 s line=" s "_%z("vrc")_"=0" d addline(grp,.line)
 s line=" s "_%z("vn")_"=0,"_%z("vnx")_"=0" d addline(grp,.line)
 i $d(^mgtmp($j,"order")) s line=" s "_%z("pv")_"n=0" d addline(grp,.line)
 s line="",com=""
 f i=1:1 q:'$d(^mgtmp($j,"subq",i))  s x=^mgtmp($j,"subq",i) i x'=1,x'="",'$d(^mgtmp($j,"corelx",x)),'$d(sql("union",x)) s line=line_com_%z("dl")_%z("pt")_x_"s"_%z("dl"),com=","
 i line'="" s line=" d "_line d addline(grp,.line)
 q
 ;
trx ; evaluate constants
 n wrd,arg,sqv,type
 s sqv="" f  s sqv=$o(^mgtmp($j,"trx",sqv)) q:sqv=""  d
 . s type=$g(^mgtmp($j,"trx",sqv))
 . s arg=$g(^mgtmp($j,"trx",sqv,1))
 . i arg?1":"1a.e s arg=%z("dev")_$e(arg,2,999)_%z("dev")
 . s line=" s "_%z("dsv")_sqv_%z("dsv")_"="_"$$edate^%mgsqls("_arg_",1)" d addline(grp,.line)
 q
 ;
endq ; code to be executed at end of query
 s tags1=0 s line=" g "_%z("dl")_%z("pt")_"1s",tags1=1 d addline(grp,.line)
 i 'tags1,$d(^mgtmp($j,"s",1)) s x=^mgtmp($j,"s",1),y=$p(x,"~",2),x=$p(x,"~",1) k @(code_",x,y)")
 k endcode s el=1
endq1 ; kill sql variables and exit query
 i $d(^mgtmp($j,"ktmp")) s line=" k "_%z("ctg")_"("_%z("cts")_")"
 s line=" s "_%z("vok")_"=$$sc^%mgsqlz(.%zi,.%zo)" d addend
 s line=" q "_%z("vok") d addend
 s endcode(1)=%z("dl")_%z("pt")_"x"_%z("dl")_endcode(1)
 f el=1:1 q:'$d(endcode(el))  s line=endcode(el) d addline(grp,.line)
 q
 ;
query ; insert query (text) and variable substitution into routine
 i $d(sql(1,1)) g query1
 s line=%z("dl")_%z("pt")_"x"_%z("dl")
 s line=line_" s "_%z("vok")_"=$$sc^%mgsqlz(.%zi,.%zo)" d addline(grp,.line)
 s line=line_" q "_%z("vok") d addline(grp,.line)
query1 s line=" ;" d addline(grp,.line) s line="query ;" d addline(grp,.line)
 f i=1:1 q:'$d(^mgsqlx(1,dbid,qid,"sql",i))  s line=" ; "_$tr(^(i),$c(13,10),"  ") d addline(grp,.line)
 s line="var ;" d addline(grp,.line)
 s x="" f  s x=$o(^mgtmp($j,"vsub",x)) q:x=""  s v(^mgtmp($j,"vsub",x))=x
 f i=1:1 q:'$d(v(i))  s line=" ;    "_%z("pv")_i_" = "_v(i) d addline(grp,.line)
 q
 ;
idx ; index data
 n r
 f qnum=1:1 q:'$d(^mgtmp($j,"from",qnum))  f tnum=1:1 q:'$d(^mgtmp($j,"from",qnum,tnum))  d
 . n tname,alias,sqcname,sqcname1,cname,sel
 . s tname=$p(^mgtmp($j,"from",qnum,tnum),"~",1),alias=$p(^mgtmp($j,"from",qnum,tnum),"~",2)
 . s r=$s($d(^mgtmp($j,"sqlupd",tname)):^(tname),1:"~"),$p(r,"~",1)="r" i '($p(r,"~",2)) s $p(r,"~",2)=0
 . s sqcname="" f  s sqcname=$o(^mgtmp($j,"get",sqcname)) q:sqcname=""  d
 . . i $p(sqcname,".",1)'=alias q
 . . s cname=$p(sqcname,".",2) i cname="" q
 . . s sel=0 i qnum=1 f i=1:1 q:'$d(^mgtmp($j,"outsel",qnum,i))  s sqcname1=$p($g(^(i)),%z("dsv"),2) i sqcname1=sqcname s sel=1 q
 . . s ^mgtmp($j,"sqlupd",tname,cname)=sel
 . . q
 . s ^mgtmp($j,"sqlupd",tname)=r
 . q
 i $d(^mgtmp($j,"upd","insert")) d
 . n tname,alias,sqcname,sqcname1,cname,sel,i
 . s tname=$g(^mgtmp($j,"upd","insert")) i tname="" q
 . s r=$g(^mgtmp($j,"sqlupd",tname))
 . i r="" s r="~1"
 . s $p(r,"~",1)="i"
 . s cname="" f  s cname=$o(^mgtmp($j,"upd","attx",cname)) q:cname=""  s ^mgtmp($j,"sqlupd",tname,cname)=0
 . f i=1:1 q:'$d(^mgtmp($j,"upd","att",i))  s cname=$g(^mgtmp($j,"upd","att",i)) q:cname=""  s ^mgtmp($j,"sqlupd",tname,cname)=0
 . s ^mgtmp($j,"sqlupd",tname)=r
 . q
 i $d(^mgtmp($j,"upd","delete")) d
 . n tname,alias,sqcname,cname
 . s tname=$p($g(^mgtmp($j,"upd","delete"))," ",1) i tname="" q
 . s alias=$p($g(^mgtmp($j,"upd","delete"))," ",2) i alias="" s alias=tname q
 . s sqcname="" f  s sqcname=$o(^mgtmp($j,"get",sqcname)) q:sqcname=""  d
 . . i $p(sqcname,".",1)'=alias q
 . . s cname=$p(sqcname,".",2) i cname="" q
 . . s sel=1
 . . s ^mgtmp($j,"sqlupd",tname,cname)=sel
 . . q
 . s r=$g(^mgtmp($j,"sqlupd",tname))
 . s $p(r,"~",1)="d"
 . s ^mgtmp($j,"sqlupd",tname)=r
 . q
 i $d(^mgtmp($j,"upd","update")) d
 . n tname
 . s tname=$p($g(^mgtmp($j,"upd","update"))," ",1) i tname="" q
 . s r=$g(^mgtmp($j,"sqlupd",tname))
 . s $p(r,"~",1)="u"
 . s ^mgtmp($j,"sqlupd",tname)=r
 . q
 q
 ;
addline(grp,line) ; add line of code to routine
 n ln,lnr
 s lnr=$i(@(%zq("ccoder")_",grp)")),@(%zq("ccoder")_",grp,lnr)")=line
 i line[%z("dsv")!(line[%z("dev")) d subvar(.line)
 i line[%z("dl") d subtag(.line)
 i line?1" s ".e,$p(line,"=",2)=$p($p(line," s ",2),"=",1) s line="" q
 i line?1" set ".e,$p(line,"=",2)=$p($p(line," set ",2),"=",1) s line="" q
 s line=$$rstring^%mgsqlp(line)
 i line="" q
 s ln=$i(@(%zq("ccode")_",grp)"))
 s @(%zq("ccode")_",grp,ln)")=line,line=""
 q
 ;
subvar(line) ; substitute physical variables for logical variables
 n lvar,pvar,x,pn
 f  s lvar=$p(line,%z("dsv"),2) q:'$l(lvar)  s pvar=$$subvar1(lvar),line=$p(line,%z("dsv"),1)_pvar_$p(line,%z("dsv"),3,999) i lvar?1"___v".n d subvar4(lvar,pvar)
 i line'[%z("dev") q
 s pn=2 f  s lvar=$p(line,%z("dev"),pn) q:'$l(lvar)  s pvar=$$subvar3(lvar) s:pvar="" pn=pn+2 i $l(pvar) s line=$p(line,%z("dev"),1,pn-1)_pvar_$p(line,%z("dev"),pn+1,999)
 q
 ;
subvar1(lvar) ; physical variable
 i $$subvar2(lvar,.pvar) q pvar
 i $d(^mgtmp($j,"uvar",lvar)) s pvar=^mgtmp($j,"uvar",lvar) q pvar
 i '$d(^mgtmp($j,"vsub",lvar)) s vsub=$i(^mgtmp($j,"vsub")),^mgtmp($j,"vsub",lvar)=vsub
 q $$subvaru(lvar)
 ;
subvaru(lvar) ; entry point for pre-assigned variables in union
 n pvar
 i '$d(^mgtmp($j,"vsub",lvar)) s pvar="" q pvar
 s pvar=%z("pv")_^mgtmp($j,"vsub",lvar)
 q pvar
 ;
subvar2(lvar,pvar) ; determine if select variable interface can be eliminated
 s pvar="" i $d(^mgtmp($j,"trans",lvar)) s pvar=^(lvar) q 1
 q 0
 ;
subvar3(lvar) ; physical variable for manual input of constant
 n pvar,r,invs
 s pvar=""
 s r=$g(^mgtmp($j,"in",lvar))
 s pvar=$p(r,"~",1) i pvar'="" q pvar
 s invs=$i(^mgtmp($j,"in"))
 s pvar="iv"_invs
 s $p(r,"~",1)=pvar,^mgtmp($j,"in",lvar)=r
 q pvar
 ;
subvar4(lvar,pvar) ; add expression or function code
 n i,line,x
 s x=%z("dsv")_lvar_%z("dsv")
 f i=1:1 q:'$d(^mgtmp($j,"e",lvar,i))  s line=^(i) d
 . f  q:line'[x  s line=$p(line,x,1)_pvar_$p(line,x,2,999)
 . d addline(grp,.line)
 . q
 k ^mgtmp($j,"e",lvar)
 q
 ;
subtag(line) ; substitute physical line label for logical label
 n ltag,ptag
 f  q:line'[%z("dl")  s ltag=$p(line,%z("dl"),2),ptag=$$subtag1(ltag),line=$p(line,%z("dl"),1)_ptag_$p(line,%z("dl"),3,999)
 q
 ;
subtag1(ltag) ; physical line label
 n n,t,x,tsub,ptag
 s t="0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
 s n=$l(t)
 i '$d(^mgtmp($j,"tsub",ltag)) s tsub=$i(^mgtmp($j,"tsub")),^mgtmp($j,"tsub",ltag)=tsub
 s x=^mgtmp($j,"tsub",ltag),ptag=%z("pt")_$e(t,(x-1)\n)_$e(t,((x-1)#n)+1)
 q ptag
 ;
sort ; sort stand-alone sql code into contiguous routine
 s grp="",l=1 f  s grp=$o(@(%zq("ccode")_",grp)")) q:grp=""  s ln="" f  s ln=$o(@(%zq("ccode")_",grp,ln)")) q:ln=""  s line=^(ln) k ^(ln) s @(%zq("ccode")_",l)")=line,l=l+1
 s @(%zq("ccode")_")")=l-1
 q
 ;

%mgsqlc1
%mgsqlc1 ; was 2 (CM) sql compiler - parse files ; 28 Jan 2022  9:57 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc1") q
 ;
subq ; compile sub-query data extraction
 n %d,data,got,tnum
 d table^%mgsqlct(dbid,qnum,.data,.error) i $l(error) q
 d temps
 s nxtun="" i $d(sql("union",qnum)) s nxtun=$o(sql("union",qnum))
 f tnum=1:1 q:'$d(^mgtmp($j,"from",qnum,tnum))  d
 . s %d=^mgtmp($j,"from",qnum,tnum)
 . s tname=$p(%d,"~",1),alias=$p(%d,"~",2)
 . d parse(dbid,.sql,grp,qnum,tnum,.data,.got,.error)
 . d data^%mgsqlc5(grp,qnum,tnum,.data,.got,.error)
 . s got("f",alias)=""
 . d corelate^%mgsqlc5(grp,qnum,.got)
 . q
 d output^%mgsqlc2
exit ; exit
 q
 ;
dist(grp,qnum,tnum,zkey,kno,got) ; optimize select distinct
 n done,x,i
 s done=0
 i $g(^mgtmp($j,"sel",qnum,0))'="distinct" q done
 i $d(^mgtmp($j,"from",qnum,2)) q done
 f i=1:1:kno s x=$p(zkey,",",i) i x'="" s got(x)=""
 s done=1 f ii=1:1 q:'$d(^mgtmp($j,"sel",qnum,ii))  s x=$g(^(ii)) i x'="",'$d(got(x)) s done=0 q
 i done s ^mgtmp($j,"dontgetdata",qnum,tnum)=1
 q done
 ;
parse(dbid,sql,grp,qnum,tnum,data,got,error) ; parse global
 n cond,zkey,zglo,zgloz,tagn,x,key,kno
 i tnum=1 s %zq("tagc")="" d
 . s line=%z("dl")_%z("pt")_qnum_"s"_%z("dl")_" ;"
 . s ^mgtmp($j,"s",qnum)=grp_"~"_"1"
 . d addline^%mgsqlc(grp,.line)
 . d aginit^%mgsqlc6(grp,qnum,tnum)
 . q
 s zkey=data(qnum,tnum,"key"),zglo=data(qnum,tnum,"glo"),zgloz=$s(zglo[%z("dev"):""")",1:"")
 d order^%mgsqlc2(.sql,qnum,tnum,.data,.dir)
 i tnum=1 s %zq("tagx")=%z("dl")_%z("pt")_qnum_"x"_%z("dl")
 k got("a")
 f kno=1:1:$l(zkey,",") s x=$p(zkey,",",kno) i x[%z("dsv") d
 . s dir=$g(dir(x)) i dir="" s dir=1
 . d pre^%mgsqlc4(dbid,qnum,tnum,x,.data,.dir,.got,.cond)
 . s x=$p($p(zkey,",",kno),%z("dsv"),2)
 . i x'="" s got("a",x)=""
 . q
 i qnum=1,tnum=1,$g(^mgtmp($j,"sel",qnum,0))="distinct" s zkey=$$dist^%mgsqlc2(qnum,tnum)
 s (key,key(0))="",tagn=1 i tnum=1,'$d(%zq("tag",qnum)) s %zq("tag",qnum)=%zq("tagx")
 i $d(^mgtmp($j,"from","z",qnum,"pass",alias)) d ojoin(grp,qnum,tnum,.data,.error)
 k got("a")
 s %zq("tagc")=""
 f kno=1:1:$l(zkey,",") d  i $$dist(grp,qnum,tnum,zkey,kno,.got) q
 . d parse1(grp,qnum,tnum,zkey,.kno,.got,.data,.cond,.key,.tagn)
 . d gota(grp,qnum,tnum,zkey,kno,.got,.data)
 . i %zq("tagc")'="" s %zq("tag",qnum)=%zq("tagc")
 . q
 i %zq("tagc")="" s %zq("tagc")=%zq("tagx")
 i %zq("tagc")'=%zq("tagx") s %zq("tag",qnum)=%zq("tagc")
 q
 ;
parse1(grp,qnum,tnum,zkey,kno,got,data,cond,key,tagn) ; set up line(s) of code for this level of subscript
 n var,reset
 s var=$p(zkey,",",kno)
 s key=key_key(0)_var,key(0)=","
 i var'[%z("dsv") q
 s dir=$g(dir(var)) i dir="" s dir=1
 s %zq("tagp")=%zq("tag",qnum)
 i $d(^mgtmp($j,"sqin",var)),$d(cond(var,"pre","nostrt")),'$d(^mgtmp($j,"corel",qnum)) g parse11
 i $d(cond(var,"fixed")),'$d(cond(var,"pre",2)) d fixed(grp,qnum,tnum,zkey,.kno,.got,.data,.cond,.key) q
 ;
 i $d(cond(var,"pre",2)) d or(grp,qnum,tnum,zkey,.kno,.got,.data,.cond,.key,.tagn) g parse1x q
 ;
 s line=cond(var,"pre",1) d addline^%mgsqlc(grp,.line)
 s %zq("tagc")=%z("dl")_%z("pt")_qnum_tnum_tagn_%z("dl")
 s (reset,reset(0))="" i qnum=1,$g(^mgtmp($j,"unique",qnum)),%zq("tagp")=%zq("tagout") d reset(qnum,.reset,.data) i $l(reset) s reset=" s "_reset
 s line=%zq("tagc")_" "_"s"_" "_var_"="_"$o"_"("_zglo_"("_key_")"_zgloz_","_dir_") "_"i"_" "_var_"="_$c(34)_$c(34)_reset_" "_"g"_" "_%zq("tagp") d addline^%mgsqlc(grp,.line)
 i $d(cond(var,"post",1)) s line=cond(var,"post",1)_" "_"g"_" "_%zq("tagp") d addline^%mgsqlc(grp,.line)
 g parse1x
parse11 ; generate optimal code for 'in' clause
 s %zq("tagc")=%z("dl")_%z("pt")_qnum_tnum_tagn_%z("dl")
 s line=cond(var,"pre",1) d addline^%mgsqlc(grp,.line)
 s line=%zq("tagc")_" "_"s"_" "_var_"="_"$o"_"("_%z("ctg")_"("_%z("cts")_","_^mgtmp($j,"sqin",var)_","_var_")"_","_dir_") "_"i"_" "_var_"="""""_" "_"g"_" "_%zq("tagp") d addline^%mgsqlc(grp,.line)
 s line=" "_"i"_" '"_"$d"_"("_zglo_"("_key_")"_zgloz_") "_"g"_" "_%zq("tagc") d addline^%mgsqlc(grp,.line)
parse1x s tagn=tagn+1
 q
 ;
or(grp,qnum,tnum,zkey,kno,got,data,cond,key,tagn) ; generate code to handle 'or' predicate for subscript
 n var,nxtag,pretag,pastag,datag,lcase,orn,tag,tagv,tagvp
 s var=$p(zkey,",",kno)
 s tag=%z("dl")_%z("pt")_qnum_tnum
 s lcase="abcdefghijklmnopqrstuvwxyz"
 s orn=0,tagv=%z("pv")_"("_tnum_","_kno_")",tagvp=%z("pv")_"("_tnum_","_kno_",""p"")",datag=%z("dl")_%z("pt")_qnum_tnum_tagn_"x"_%z("dl")
or1 s orn=orn+1 i '$d(cond(var,"pre",orn)) g orx
 s pretag=%z("dl")_%z("pt")_qnum_tnum_tagn_"or"_orn_%z("dl"),pastag=%z("dl")_%z("pt")_qnum_tnum_tagn_"or"_$e(lcase,orn)_%z("dl")
 s nxtag=$s($d(cond(var,"pre",orn+1)):tag_tagn_"or"_(orn+1)_%z("dl"),1:%zq("tagp"))
 i $d(cond(var,"fixed",orn)) g or2
 ; generate code to pass on subscript
 s line="" i orn>1 s line=pretag_" ;" d addline^%mgsqlc(grp,.line)
 s line=line_cond(var,"pre",orn)_" s "_tagv_"="""_pastag_"""" d addline^%mgsqlc(grp,.line)
 s line=pastag_" s "_var_"="_dirf_"("_zglo_"("_key_")"_zgloz_dirp_") i "_var_"="_$c(34)_$c(34)_" g "_nxtag d addline^%mgsqlc(grp,.line)
 i $d(cond(var,"post",orn)) s line=cond(y,"post",orn)_" g "_nxtag d addline^%mgsqlc(grp,.line)
 i $d(cond(var,"pre",orn+1)) s line=" g "_datag d addline^%mgsqlc(grp,.line)
 g or1
or2 ; generate code for definition test on subscript only
 s line="" i orn>1 s line=pretag_" ;" d addline^%mgsqlc(grp,.line)
 s line=line_cond(var,"pre",orn)_","_tagv_"="""_nxtag_"""" d addline^%mgsqlc(grp,.line)
 s line=" i '$l("_var_") g "_nxtag d addline^%mgsqlc(grp,.line)
 s line=" i '$d("_zglo_"("_key_")"_zgloz_") g "_nxtag d addline^%mgsqlc(grp,.line)
 i $d(cond(var,"pre",orn+1)) s line=" g "_datag d addline^%mgsqlc(grp,.line)
 g or1
orx s line=datag_" ;" d addline^%mgsqlc(grp,.line)
 s %zq("tagc")="@"_tagv
 q
 ;
fixed(grp,qnum,tnum,zkey,kno,got,data,cond,key) ; generate definition test for fixed subscript(s)
 n reset,mxi,var,npn,lines,coms,linet,or,sub,trans,to,alias,qual,goto
 s (reset,reset(0))="" i qnum=1,$g(^mgtmp($j,"unique",qnum)) d reset(qnum,.reset,.data)
 s mxi=kno,(lines,coms,linet,or)=""
 ; build key and null subscript tests
 f npn=kno:1:$l(zkey,",") s var=$p(zkey,",",npn) q:'$d(cond(var,"fixed"))!$d(cond(var,"pre",2))  s mxi=npn d
 . s sub=var,set=$p(cond(var,"pre",1)," ",3,999),to=$p(set,"=",2,999),alias=$p($p(var,%z("dsv"),2),".",1)
 . s trans=0 i '$d(^mgtmp($j,"from",2)),to'["(",to'[")",$l(to,%z("dsv"))'>3,$l(to,%z("dev"))'>3,'$d(^mgtmp($j,"outselx",1,var)),'$d(^mgtmp($j,"from","z",qnum,"pass",alias)) s trans=1,(sub,^mgtmp($j,"trans",$p(var,%z("dsv"),2)))=to
 . i npn>kno s key=key_key(0)_sub
 . i 'trans s lines=lines_coms_set,coms=","
 . i to'[%z("dsv"),to'[%z("dev"),to?1""""1e.e1""""!(to?1n.n)!(to[%z("ds")) q
 . s linet=linet_or_"'$l("_sub_")",or="!"
 . q
 s qual="",goto=1 i qnum=1,$g(^mgtmp($j,"unique",1))=2 s lines=lines_coms_%z("vdef")_"=1,%d=""""",reset=reset_reset(0)_%z("vdef")_"=0",qual=%z("vdef")_",",goto=0
 i $l(lines) s lines=" "_"s"_" "_lines
 i $l(linet) s linet=" "_"i"_" "_linet
 i $l(reset) s reset=" "_"s"_" "_reset
 s line=lines
 i linet'="" s line=line_linet_reset_$s(goto:" "_"g"_" "_%zq("tagp"),1:"")
 i line'="" d addline^%mgsqlc(grp,.line)
 s line=" "_"i"_" "_qual_"'"_"$d"_"("_zglo_"("_$p(zkey,",",1,mxi)_")"_zgloz_")"_reset_$s(goto:" "_"g"_" "_%zq("tagp"),1:"") d addline^%mgsqlc(grp,.line)
fixedx s kno=mxi
 q
 ;
reset(qnum,reset,data) ; check for need to reset unique key outputs on failure
 n line,outsel,i,item
 s outsel=$g(^mgtmp($j,"sel",qnum))
 f i=1:1:outsel s item=^mgtmp($j,"sel",qnum,i) d reset1(qnum,.reset,item,.data)
 i $l(reset) s line=reset d subvar^%mgsqlc(.line) s reset="("_line_")="""""
 q
 ;
reset1(qnum,reset,item,data) ; determine whether data item needs to be reset
 n tnum,x,alias
 i item["("!(item'[%z("dsv")) q
 s x=$p(item,%z("dsv"),2),alias=$p(x,".",1) i alias="" q
 s tnum=^mgtmp($j,"from","x",qnum,alias)
 i $d(data(qnum,tnum,"col",x)),data(qnum,tnum,"key")'[item q
 s reset=reset_reset(0)_item,reset(0)=","
 q
 ;
ojoin(grp,qnum,tnum,data,error) ; outer join
 n i,taga,tagz,cname,kno
 s %zq("ojc")=%z("dsv")_"\#oj\"_qnum_"\"_tnum_%z("dsv")
 s %zq("ojc0")=1
 s %zq("ojc1")=%z("dsv")_"\#ojc\"_qnum_"\"_tnum_%z("dsv")
 s %zq("ojtbp")=%z("dl")_%z("pt")_qnum_tnum_"\ojtbp"_%z("dl")
 s %zq("ojtx")=%z("dl")_%z("pt")_qnum_tnum_"\ojtx"_%z("dl")
 s %zq("ojtbx")=%z("dl")_%z("pt")_qnum_tnum_"\ojtbx"_%z("dl")
 s %zq("ojtpx")=%zq("tag",qnum)
 s taga=%z("dl")_%z("pt")_qnum_tnum_"\oja"_%z("dl"),tagz=%z("dl")_%z("pt")_qnum_tnum_"\ojz"_%z("dl")
 s line=" "_"s"_" "_%zq("ojc")_"=0"_","_%zq("ojc1")_"=1"_" "_"g"_" "_tagz d addline^%mgsqlc(grp,.line)
 s line=taga_" "_"i"_" "_%zq("ojc")_">0 "_"g"_" "_%zq("tag",qnum) d addline^%mgsqlc(grp,.line)
 s %zq("tag",qnum)=taga
 s line=" "_"s"_" "_%zq("ojc1")_"=0" d addline^%mgsqlc(grp,.line)
 s kno=0 f i=1:1:$l(data(qnum,tnum,"pkey")) d
 . s cname=$p(data(qnum,tnum,"pkey"),",",i)
 . i cname'[%z("dsv") q
 . s kno=kno+1,line=" "_"s"_" "_cname_"=""""" d addline^%mgsqlc(grp,.line)
 . i kno=1 s %zq("ojkey")=cname
 . q
 s cname="" f  s cname=$o(data(qnum,tnum,"col",cname)) q:cname=""  s line=" "_"s"_" "_%z("dsv")_cname_%z("dsv")_"=""""" d addline^%mgsqlc(grp,.line)
 s line=" "_"g"_" "_%zq("ojtbp") d addline^%mgsqlc(grp,.line)
 s line=tagz_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;
ojoinda(grp,qnum,tnum,data,error) ; process at end of parse, before get data
 s line=" g "_%zq("ojtbx") d addline^%mgsqlc(grp,.line)
 s line=%zq("ojtx")_" "_"g"_":'$l("_%zq("ojkey")_") "_%zq("ojtpx")_" "_"g"_" "_%zq("tag",qnum) d addline^%mgsqlc(grp,.line)
 s line=%zq("ojtbx")_" ;" d addline^%mgsqlc(grp,.line)
 s %zq("tag",qnum)=%zq("ojtx")
 q
 ;
ojoindz(grp,qnum,tnum,data,error) ; process after data retrieval
 n i,cname,alias,x
 s x="" f  s x=$o(^mgtmp($j,"where",x)) q:x=""  i (x+0)=qnum,x["gon" d
 . s line="" f i=1:1 q:'$d(^mgtmp($j,"where",x,i))  s line=line_^mgtmp($j,"where",x,i)
 . i $l(line) s line=" "_"i"_" '("_line_")"_" g "_%zq("tag",qnum) d addline^%mgsqlc(grp,.line)
 . q
 s cname="" f  s cname=$o(^mgtmp($j,"from","z",qnum,"join",cname)) q:cname=""  d
 . k x
 . s alias="" f i=1:1 s alias=$o(^mgtmp($j,"from","z",qnum,"join",cname,alias)) q:alias=""  s x(i)=alias_"."_cname
 . i $d(x(2)) s line=" i "_%z("dsv")_x(1)_%z("dsv")_"'="_%z("dsv")_x(2)_%z("dsv")_" g "_%zq("tag",qnum) d addline^%mgsqlc(grp,.line)
 . q
 s line=" "_"s"_" "_%zq("ojc")_"="_%zq("ojc")_"+1" d addline^%mgsqlc(grp,.line)
 s line=%zq("ojtbp")_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;
ojoindz1(grp,qnum,tnum,cname,alias) ; perform natural inner join on data
 q
 ;
gota(grp,qnum,tnum,zkey,no,got,data) ; new attribute available from single-level parse
 n i,x,sqvar
 f i=1:1:no s x=$p(zkey,",",i) i x[%z("dsv") s sqvar=$p(x,%z("dsv"),2) i sqvar'="" s got("a",sqvar)=""
 d corelate^%mgsqlc5(grp,qnum,.got)
 q
 ;
temps ; determine subscripts for order/group sort file
 ; TODO see if we can eliminate secondary sort where an order by is applied to groups
 q
 ;

%mgsqlc2
%mgsqlc2 ; was 3 (CM) sql compiler - sub driver ; 28 Jan 2022  9:57 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc2") q
 ;
output ; process output from subquery
 d where
 i $d(%zq("drec",0)) d delrec
 d outrec
 i qnum'=1,$d(sql("union",qnum)) g exit
 d updfun^%mgsqlc6
 d outrow
 d endsq^%mgsqlc3
exit ; exit
 q
 ;
where ; set up test data lines on basis of explicit criteria
 s var="" f  s var=$o(^mgtmp($j,"notnull",qnum,var)) q:var=""  s line=" "_"i"_" "_var_"="""" "_"s"_" "_var_"="" """ d addline^%mgsqlc(grp,.line)
 s test=1,line="" k gcont
 s hostes=1
 d sqinc
 f i=1:1 q:'$d(^mgtmp($j,"where",qnum,i))  s x=^mgtmp($j,"where",qnum,i) d where1(qnum,x,i,.line)
 k hostes
 s goto=1 i qnum=1,$g(^mgtmp($j,"unique",1))=2 s goto=0
 s reset=""
 s wexcl="" f  s wexcl=$o(^mgtmp($j,"wexcl",qnum,wexcl)) q:wexcl=""  i $l(line,wexcl)=2 d wexcl
 i $l(line) s line=" "_"i"_" '("_line_")"_reset_$s(goto:" "_"g"_" "_%zq("tag",qnum),1:"") d addline^%mgsqlc(grp,.line)
 q
 ;
wexcl ; remove clause from where predicate if possible
 n pre,pst,ok
 s pre=$p(line,wexcl,1),pst=$p(line,wexcl,2)
 i pre?."(",pst?.")" s line="" q
 i $e(pre,$l(pre))'="("!($e(pst)'=")") q
 s pre=$e(pre,1,$l(pre)-1),pst=$e(pst,2,32000)
 s ok=0 i "&"[$e(pre,$l(pre)) s ok=1,pre=$e(pre,1,$l(pre)-1)
 i 'ok,"&"[$e(pst) s ok=1,pst=$e(pst,2,32000)
 i 'ok q
 s line=pre_pst
 q
 ;
where1(qnum,item,no,line) ; for each word in predicate
 i ":<:>:'>:'<:]:']:"[(":"_item_":") s item=$$trans(qnum,item,no)
 s line=line_item
 q
 ;
trans(qnum,item,no) ; translate operator
 n item1,mtype,test,other
 s item1=item,other=^mgtmp($j,"where",qnum,no+1) i other="(" q item1
 s mtype="" i $d(^mgtmp($j,"mtype",other)) s mtype=^mgtmp($j,"mtype",other)
 i mtype="" s:other?.1"-".n.1"."1n.n mtype="num" s:$e(other)=$c(34) mtype="str" i mtype="" q item1
 i mtype="str" s test=$s(x="<":"']",x=">":"]",1:"") i test'="" s item1=test q item1
 i mtype="num" s test=$s(x="[":">",x="'[":"'>",1:"") i test'="" s item1=test q item1
 q item1
 ;
sqinc ; include subqueries into body of parents where predicate
 n i,subq,x,cmnd,relist,l
 s relist=0
 f i=1:1 q:'$d(^mgtmp($j,"where",qnum,i))  s x=^(i) i x[%z("dq") s subq=$p(x,%z("dq"),2),cmnd=^(i-1) d sqinc1
 i relist s l=0,i="" f  s i=$o(^mgtmp($j,"where",qnum,i)) q:i=""  s x=^(i) k ^(i) s l=l+1,^(l)=x
 q
 ;
sqinc1 ; include subquery
 n v
 i cmnd="exists" k ^mgtmp($j,"where",qnum,i),^(i-1) s ^(i-2)="$d("_%z("ctg")_"("_%z("cts")_","_","_subq_"))",relist=1 q
 i cmnd="not exists" k ^mgtmp($j,"where",qnum,i),^(i-1) s ^(i-2)="'$d("_%z("ctg")_"("_%z("cts")_","_subq_"))",relist=1 q
 i cmnd="in" s v=^mgtmp($j,"where",qnum,i-2) k ^(i),^(i-1) s ^(i-2)="$d("_%z("ctg")_"("_%z("cts")_","_subq_","_v_"))",relist=1 q
 i cmnd="not in" s v=^mgtmp($j,"where",qnum,i-2) k ^(i),^(i-1) s ^(i-2)="'$d("_%z("ctg")_"("_%z("cts")_","_subq_","_v_"))",relist=1 q
 i '$g(^mgtmp($j,"unique",subq)) s ^mgtmp($j,"where",qnum,i)="$o("_%z("ctg")_"("_%z("cts")_","_subq_","_""""""_"))" q
 i $g(^mgtmp($j,"unique",subq)) s ^mgtmp($j,"where",qnum,i)=^mgtmp($j,"sel",subq,1) q
 q
 ;
outrec ; set up record for output and test for 'distinct'
 f i=1:1 q:'$d(^mgtmp($j,"sel",qnum,i))  s lvar=$p(^mgtmp($j,"sel",qnum,i),%z("dsv"),2) i $l(lvar) d
 . n i
 . s pvar=$$subvar1^%mgsqlc(lvar)
 . s lvar=$p($p(lvar,")",1),"(",2) i $l(lvar) s pvar=$$subvar1^%mgsqlc(lvar)
 . q
 i $d(sql("union",qnum)) s x="" f  s x=$o(uvar(0,qnum,x)) q:x=""  s line=" "_"s"_" "_x_"="_uvar(0,qnum,x) d addline^%mgsqlc(grp,.line)
 i $d(sql("union",qnum)) s ret=%z("pv")_"(""u"")" s line=" "_"s"_" "_ret_"="_$s(%zq("tag",qnum)?1"@".e:$e(%zq("tag",qnum),2,999),1:""""_%zq("tag",qnum)_"""") s %zq("tag",qnum)="@"_ret d addline^%mgsqlc(grp,.line)
 i qnum'=1,$d(sql("union",qnum)) s line=" "_"g"_" "_%z("dl")_%z("pt")_"du"_%z("dl") d addline^%mgsqlc(grp,.line)
 i qnum=1,$d(sql("union",1)) s line=%z("dl")_%z("pt")_"du"_%z("dl")_" ;" d addline^%mgsqlc(grp,.line)
 ;
 s rec="",recc="",rdel="",rdelc=""
 f i=1:1 q:'$d(^mgtmp($j,"outsel",qnum,i))  s x=^(i) d outrec2
 i $d(^mgtmp($j,"order")) s rec=recc
 i $g(^mgtmp($j,"sel",qnum,0))'="distinct"!$d(^mgtmp($j,"group",qnum)) q
 s line=" s "_rec d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("vck")_"="_recc_","_%z("vckcrc")_"="_"$$crc^%mgsqls("_%z("vck")_",7)" d addline^%mgsqlc(grp,.line)
 s line=" i $d("_%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_","_"""x""_"_%z("vck")_")) g "_%zq("tag",qnum)
 ; cope with long select lines
 s line=" s "_%z("vckcrcdef")_"=0,"_%z("vnx")_"="""" f  s "_%z("vnx")_"=$o("_%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_","_%z("vckcrc")_","_%z("vnx")_")) q:"_%z("vnx")_"=""""  i $g("_%z("ctg")_"("_%z("cts")_",""d"","_qnum_","_%z("vckcrc")_","_%z("vnx")_"))="_%z("vck")_" s "_%z("vckcrcdef")_"=1 q"
 d addline^%mgsqlc(grp,.line)
 s line=" i "_%z("vckcrcdef")_" g "_%zq("tag",qnum)
 d addline^%mgsqlc(grp,.line)
 ;s line=" s "_%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_","_"""x""_"_%z("vck")_")"_"=""""" d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_","_%z("vckcrc")_","_"$i("_%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_","_%z("vckcrc")_"))"_")="_%z("vck") d addline^%mgsqlc(grp,.line)
 s ^mgtmp($j,"ktmp")=1
 q
 ;
outrec1 ; substitute physical variables
 n line
 s line=rec d subvar^%mgsqlc(.line) s rec=line
 q
 ;
outrec2 ; output record
 i x[%z("dsv")&(x["(")&$d(^mgtmp($j,"group",qnum)) s x=0
 s recc=recc_rdelc_x,rdelc="_"_$c(34)_"~"_$c(34)_"_" d outrec1
 s rec=rec_rdel_"%d("_i_")="_x,rdel=","
 d outrec1
 q
 ;
outrow ; set up output to intermediate file
 i qnum=1,$d(^mgtmp($j,"upd","update")) d main^%mgsqlcu q
 i qnum=1,$d(^mgtmp($j,"upd","delete")) d main^%mgsqlcd q
 i qnum=1,$d(^mgtmp($j,"upd","insert")) d main^%mgsqlci q
 i qnum=1,$d(^mgtmp($j,"create","index")) d crind^%mgsqlc5(grp,qnum) q
 i $d(^mgtmp($j,"group",qnum)) s line=" g "_%zq("tag",qnum) d addline^%mgsqlc(grp,.line) q
 i $g(^mgtmp($j,"unique",qnum)),qnum'=1 s line=" g "_%zq("tag",qnum) d addline^%mgsqlc(grp,.line) q
 i $d(^mgtmp($j,"order")),qnum=1 g outrow2
 i qnum=1 g outrow1
 d outrowsq
 s x="" i $d(^mgtmp($j,"sqcom",qnum)) s x=^(qnum)
 i x="exists"!(x="not exists") s line=" g "_%zq("tagx") d addline^%mgsqlc(grp,.line) q
 s line=" g "_%zq("tag",qnum) d addline^%mgsqlc(grp,.line)
 q
outrow1 ; output from outer query - take data as it comes
 s %zq("tagp")=$g(%zq("tag",qnum))
 i '$g(^mgtmp($j,"unique",qnum)) d row^%mgsqlc3(grp,qnum,0,""),top^%mgsqlc3(grp,qnum,0)
 s line=line_" g "_%zq("tagp") d addline^%mgsqlc(grp,.line) q
 q
outrow2 ; output is 'ordered'
 s com="",ordsub="" f i=1:1 q:'$d(^mgtmp($j,"order",i))  d
 . s x=$g(^mgtmp($j,"order",i)) ;,y=%z("dsv")_"__order"_$p(^mgtmp($j,"order",i,0),"~",1)_%z("dsv")
 . s ordsub=ordsub_com_"$s("_x_"="""":"" "",1:"_x_")",com=","
 . q
 s line=" k %zo("_%z("vrc")_")" d addline^%mgsqlc(grp,.line)
 s outsel=^mgtmp($j,"outsel",qnum)
 f i=1:1:outsel s line=line_" s %zo("_%z("vrc")_","_i_")="_^mgtmp($j,"outsel",qnum,i) d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("pv")_"n="_%z("pv")_"n+1" d addline^%mgsqlc(grp,.line)
 ;d linel
 s line=" m "_%z("ctg")_"("_%z("cts")_","_"""x"",1,"_ordsub_","_%z("pv")_"n"_")="_"%zo("_%z("vrc")_")" d addline^%mgsqlc(grp,.line)
 s line=" g "_%zq("tag",qnum) d addline^%mgsqlc(grp,.line)
 q
 ;
outrowsq ; output from inner query
 s x=^mgtmp($j,"sel",qnum,1)
 s line=" s:"_x_"="""" "_x_"="" """ d addline^%mgsqlc(grp,.line)
 ; add data
 s line=" s "_%z("ctg")_"("_%z("cts")_","_qnum_","_x_")=""""" d addline^%mgsqlc(grp,.line)
 q
 ;
linel ; split long lines
 n del,i,pre,psp,rx,nx
 s del="_""~""_",rx=rec,nx=0
 s line=line_" s sqlcnt(0)=""""" d addline^%mgsqlc(grp,.line)
linel1 i $l(rx)<200 g linel2
 f i=1:1 s pre=$p(rx,del,1,i),pst=$p(rx,del,i+1,9999) q:pst=""  i $l(pre)>200 q
 s nx=nx+1,line=line_" s sqlcnt(0)=sqlcnt(0)"_$s(nx=1:"_",1:del)_pre d addline^%mgsqlc(grp,.line)
 s rx=pst g linel1
linel2 ; output line
 i $l(rx) s nx=nx+1,line=line_" s sqlcnt(0)=sqlcnt(0)"_$s(nx=1:"_",1:del)_rx d addline^%mgsqlc(grp,.line)
 q
 ;
order(sql,qnum,tnum,data,dir) ; determine order in which data will come out
 n i,ord,key,item,ok
 i qnum'=1!(tnum'=1)!$d(^mgtmp($j,"group",qnum))!$d(sql("union",1)) q
 s key=data(qnum,tnum,"key")
 i '$d(^mgtmp($j,"order")) q
 i '$d(^mgtmp($j,"order",$l(key,","))) q
 s ok=1,kno=1
 f i=1:1:$l(key,",") s item=$p(key,",",i) s ok=$$order1(qnum,key,item,.kno,.dir) i 'ok q
 i 'ok k dir q
 k ^mgtmp($j,"order")
 q
 ;
order1(qnum,key,item,kno,dir) ; check if order is in keeping with required order
 n x,ord,ok
 s ok=0
 i item'[%z("dsv") q 0
 s ord=$g(^mgtmp($j,"order",kno,0))
 s x=$p(ord,",",kno),dir=$p(x,"~",2),x=$p(x,"~",1) i x="" q 1
 s x=^mgtmp($j,"sel",qnum,x) i key'[x q 0
 i x=item s kno=kno+1
 i x'=item s ok=$$order2(qnum,item) q 0
 ;
 i ok=1,x=item d  i 'ok q ok
 . n link,or
 . s link=$o(^mgtmp($j,"pre",qnum,item,""))
 . i link'="" s or=$o(^mgtmp($j,"pre",qnum,item,link)) i $l(or) s ok=0 q
 . q
 ;
 s dir=$s(dir="desc":"-1",1:"1")
 s dir(x)=dir
 q ok
 ;
order2(qnum,item) ; check if 'leading' subscript is uniquely fixed
 n link,op,cnst,or
 s link=$o(^mgtmp($j,"pre",qnum,item,"")) i link="" q 0
 s or=$o(^mgtmp($j,"pre",qnum,item,link)) i $l(or) q 0
 s op=^mgtmp($j,"pre",qnum,item,link,1,"op"),cnst=^("cnst") i op'="="!(cnst[%z("dsv")) q 0
 s link=$o(^mgtmp($j,"pre",item,link)) i $l(link) q 0
 q 1
 ;
dist(qnum,tnum) ; optimise distinct clause if possible
 n dn,zkey,outsel,i,x
 s zkey=data(qnum,tnum,"key")
 i $d(^mgtmp($j,"from",1,2)) q zkey
 s outsel=$g(^mgtmp($j,"outsel")) i outsel="" q zkey
 f i=1:1:outsel q:'$d(^mgtmp($j,"sel",qnum,i))  s x=^(i),dn("x",x)=""
 f i=1:1:$l(z,",") s y=$p(zkey,",",i) i y[%z("dsv") q:'$d(dn("x",y))  k dn("x",y) s dn=i
 i $d(dn("x")) q zkey
 i dn=$l(zkey,",") s ^mgtmp($j,"sel",qnum,0)=""
 i dn<$l(zkey,","),'$d(^mgtmp($j,"sel",qnum,outsel+1)) s zkey=$p(zkey,",",1,dn),^mgtmp($j,"sel",qnum,0)=""
 q zkey
 ;
delrec ; delete selected record
 q
 n %tagz,%refile,tname,alias,dtyp,key,dat
 s alias=$o(%zq("drec",0,"")) i alias="" q
 i '$d(^mgtmp($j,"from","x",qnum,alias)) q
 s tname=$p(^mgtmp($j,"from",qnum,^mgtmp($j,"from","x",qnum,alias)),"~",1)
 s %tagz=%z("dl")_"delete"_qnum_alias_%z("dl")
 k dtyp d xfid^%mgsqlct
 s line=" k %do,%dn,%dx" d addline^%mgsqlc(grp,.line)
 f i=1:1 q:'$d(xfid(0,i))  s cname=xfid(0,i,1) i cname?1a.e d data^%mgsqlcd
 s %refile=0 d kill^%mgsqlci
 s line=%tagz_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;

%mgsqlc3
%mgsqlc3 ;(CM) sql compiler ; 28 Jan 2022  9:57 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc3") q
 ;
endsq ; code to be executed on leaving a sub-query
 s line=%z("dl")_%z("pt")_qnum_"x"_%z("dl")
 i $d(^mgtmp($j,"group",qnum)) d regroup g endsqx
 d endsq1
 i qnum'=1 s line=line_" q" d addline^%mgsqlc(grp,.line) g endsqx
 i qnum=1,$d(^mgtmp($j,"order")) d reorder g endsqx
 s line=line_" g "_%z("dl")_%z("pt")_$s($d(sql("union",qnum)):nxtun_"s",1:"x")_%z("dl") d addline^%mgsqlc(grp,.line)
endsqx i qnum=1,$d(eof("l")) s line=%z("dl")_%z("pt")_"d"_%z("dl")_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;
endsq1 ; unique result but expected as a list
 n com
 i qnum=1,$g(^mgtmp($j,"unique",qnum)) d row(grp,qnum,0,"")
 i qnum=1 q
 i '$g(^mgtmp($j,"unique",qnum)) q
 s com=^mgtmp($j,"sqcom",qnum)
 i com'["in",com'["exists" q
 s line=line_" ;" d addline^%mgsqlc(grp,.line)
 d outrowsq^%mgsqlc2
 q
 ;
regroup ; reorganise data for 'group by' clause
 n i,codezo,x,sort2,funtyp,sort2
 i line'="" s line=line_" ; groups" d addline^%mgsqlc(grp,.line)
 s sort2=0 i qnum=1,$d(^mgtmp($j,"order")) s sort2=1
 i sort2 s line=" k "_%z("ctg")_"("_%z("cts")_","_"""x2"")"_" s "_%z("pv")_"n=0" d addline^%mgsqlc(grp,.line)
 s (keyo,como)="" f i=1:1 q:'$d(^mgtmp($j,"group",qnum,i))  d
 . s x=$g(^mgtmp($j,"group",qnum,i,0))
 . s varo=%z("dsv")_"__order"_i_%z("dsv")
 . s dir=$p(x,"~",2),dir=$s(dir="desc":-1,1:1)
 . s line=" s "_varo_"=""""" d addline^%mgsqlc(grp,.line)
 . d reorder1(grp,qnum,i,.keyo,varo,.como,.tag,sort2,dir)
 . q
 s x="" f  s x=$o(^mgtmp($j,"sqag",qnum,x)) q:x=""  s fun="" f  s fun=$o(^mgtmp($j,"sqag",qnum,x,fun)) q:fun=""  d
 . s funtyp=$p(fun,"_",1)
 . i funtyp'="avg",funtyp'="min" q
 . s line=" s "_%z("vdata")_"=$g("_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_keyo_","_^mgtmp($j,"sqag",qnum,x,fun)_"))" d addline^%mgsqlc(grp,.line)
 . s line=" s "_%z("vdata")_"=$p("_%z("vdata")_",""#"",1)" d addline^%mgsqlc(grp,.line)
 . s line=" s "_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_keyo_","_^mgtmp($j,"sqag",qnum,x,fun)_")="_%z("vdata") d addline^%mgsqlc(grp,.line)
 . q
 i $d(^mgtmp($j,"having",1)) d having(grp,qnum,keyo,tag)
 i sort2 d sort2(grp,qnum,.keyo)
 s codezo=" m "_"%zo("_%z("vrc")_")="_%z("ctg")_"("_%z("cts")_","""_$s(sort2:"x2",1:"x")_""","_qnum_","_keyo_")"
 i qnum=1 s %data=0,%zq("tagp")=tag d row(grp,qnum,1,codezo),top(grp,qnum,1) s line=line_" g "_%zq("tagp") d addline^%mgsqlc(grp,.line) q
 i qnum'=1 d
 . s %zq("tag",qnum)=tag
 . s line=" s "_^mgtmp($j,"sel",qnum,1)_"="_%z("pv")_"d" d addline^%mgsqlc(grp,.line)
 . d outsq^%mgsqlc2
 . q
 q
 ;
having(grp,qnum,keyo,tag) ; set up test for 'having' clause
 n i,x,fun
 s line=""
 f i=1:1 q:'$d(^mgtmp($j,"having",i))  s x=^mgtmp($j,"having",i) d  s line=line_x
 . i x'[%z("dsv") q
 . s x=$p(x,%z("dsv"),2),fun=$p(x,"(",1),x=$p($p(x,"(",2,999),")",1)
 . s x="$g("_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_keyo_","_^mgtmp($j,"sqag",qnum,x,fun)_"))"
 . q
 i line="" q
 s line=" i '("_line_") g "_tag d addline^%mgsqlc(grp,.line)
 q
 ;
reorder ; reorder data for 'order by' clause
 n i,com,como,key0,varo,codezo,x,sort2
 s sort2=0
 s line=line_" s (",com=""
 f i=1:1 q:'$d(^mgtmp($j,"order",i))  s line=line_com_%z("dsv")_"__order"_$p(^mgtmp($j,"order",i,0),"~",1)_%z("dsv"),com=","
 s line=line_","_%z("pv")_"n)=""""" d addline^%mgsqlc(grp,.line)
 s (keyo,como)="" f i=1:1 q:'$d(^mgtmp($j,"order",i))  d
 . s x=$g(^mgtmp($j,"order",i,0))
 . s varo=%z("dsv")_"__order"_$p(x,"~",1)_%z("dsv")
 . s dir=$p(x,"~",2),dir=$s(dir="desc":-1,1:1)
 . d reorder1(grp,qnum,i,.keyo,varo,.como,.tag,sort2,dir)
 . q
 s tag=%z("dl")_%z("pt")_qnum_"o"_(i)_%z("dl"),%zq("tagp")=%z("dl")_%z("pt")_qnum_"o"_(i-1)_%z("dl")
 s line=tag_" s "_%z("pv")_"n=$o("_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_keyo_","_%z("pv")_"n))"_" i "_%z("pv")_"n="""" g "_%zq("tagp") d addline^%mgsqlc(grp,.line)
 s codezo=" m "_"%zo("_%z("vrc")_")="_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_keyo_","_%z("pv")_"n"_")"
 s %data=0,%zq("tagp")=tag d row(grp,qnum,1,codezo),top(grp,qnum,1) s line=line_" g "_%zq("tagp") d addline^%mgsqlc(grp,.line) q
 q
 ;
reorder1(grp,qnum,kno,keyo,varo,como,tago,sort2,dir) ; for each grouped attribute
 s keyo=keyo_como_varo,como=","
 s tago=%z("dl")_%z("pt")_qnum_"o"_kno_%z("dl")
 s %zq("tagp")=$s(kno=1:$s(sort2:%z("dl")_%z("pt")_qnum_"on2"_%z("dl"),1:%zq("tagout")),kno>1:%z("dl")_%z("pt")_qnum_"o"_(kno-1)_%z("dl"),1:"")
 s line=tag_" s "_varo_"="_"$o("_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_keyo_"),"_dir_") i "_varo_"="""""
 i kno=1,qnum'=1 s line=line_" q" d addline^%mgsqlc(grp,.line) q
 s line=line_" g "_%zq("tagp") d addline^%mgsqlc(grp,.line)
 q
 ;
sort2(grp,qnum,keyo) ; perform secondary sort
 n i,x,y,keyn,keyx,varx,com,dir
 s line=" ; secondary sort" d addline^%mgsqlc(grp,.line)
 s line=" m "_%z("vdata")_"="_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_keyo_")" d addline^%mgsqlc(grp,.line)
 s (keyn,com)="" f i=1:1 q:'$d(^mgtmp($j,"order",i))  d
 . s x=$g(^mgtmp($j,"order",i,0)),y=$p(x,"~",1) i y="" s y=1
 . s keyn=keyn_com_"$s("_%z("vdata")_"("_y_")"_"="""":"" "",1:"_%z("vdata")_"("_y_")"_")",com=","
 . q
 s line=" s "_%z("pv")_"n="_%z("pv")_"n+1" d addline^%mgsqlc(grp,.line)
 s line=" m "_%z("ctg")_"("_%z("cts")_","_"""x2"","_qnum_","_keyn_","_%z("pv")_"n)="_%z("vdata") d addline^%mgsqlc(grp,.line)
 s line=" g "_tag d addline^%mgsqlc(grp,.line)
 s line=%z("dl")_%z("pt")_qnum_"on2"_%z("dl")_" ; secondary sort output" d addline^%mgsqlc(grp,.line) ;_" s ("_keyo_","_%z("pv")_"n)=""""" d addline^%mgsqlc(grp,.line)
 s (keyx,com)="" f i=1:1 q:'$d(^mgtmp($j,"order",i))  d
 . s x=$g(^mgtmp($j,"order",i,0))
 . s varx=%z("dsv")_"__order"_$p(x,"~",1)_%z("dsv")
 . s dir=$p(x,"~",2),dir=$s(dir="desc":-1,1:1)
 . s keyx=keyx_com_varx,com=","
 . s tag=%z("dl")_%z("pt")_qnum_"on2"_i_%z("dl")
 . s %zq("tagp")=$s(i=1:%zq("tagout"),i>1:%z("dl")_%z("pt")_qnum_"on2"_(i-1)_%z("dl"),1:"")
 . s line=" s "_varx_"=""""" d addline^%mgsqlc(grp,.line)
 . s line=tag_" s "_varx_"="_"$o("_%z("ctg")_"("_%z("cts")_","_"""x2"","_qnum_","_keyx_"),"_dir_")"_" i "_varx_"="""""
 . i i=1,qnum'=1 s line=line_" q" d addline^%mgsqlc(grp,.line) q
 . s line=line_" g "_%zq("tagp") d addline^%mgsqlc(grp,.line)
 . q
 s line=" s "_%z("pv")_"n=""""" d addline^%mgsqlc(grp,.line)
 s tag=%z("dl")_%z("pt")_qnum_"on2"_(i)_%z("dl"),%zq("tagp")=%z("dl")_%z("pt")_qnum_"on2"_(i-1)_%z("dl")
 s line=tag_" s "_%z("pv")_"n=$o("_%z("ctg")_"("_%z("cts")_","_"""x2"","_qnum_","_keyx_","_%z("pv")_"n))"_" i "_%z("pv")_"n="""" g "_%zq("tagp") d addline^%mgsqlc(grp,.line)
 s keyo=keyx_","_%z("pv")_"n"
 q
 ;
row(grp,qnum,havezo,codezo) ; output a line of sql data
 n outsel,i
 s line=line_" s "_%z("vrc")_"="_%z("vrc")_"+1" d addline^%mgsqlc(grp,.line)
 i codezo'="" s line=codezo d addline^%mgsqlc(grp,.line)
 i $d(^mgtmp($j,"upd")) q
 i 'havezo d
 . s outsel=^mgtmp($j,"outsel",qnum)
 . f i=1:1:outsel s line=line_" s %zo("_%z("vrc")_","_i_")="_^mgtmp($j,"outsel",qnum,i) d addline^%mgsqlc(grp,.line)
 . q
 s line=line_" s "_%z("vok")_"=$$ss^%mgsqlz(.%zi,.%zo,"_%z("vrc")_") i "_%z("vok")_" g "_%zq("tagx") d addline^%mgsqlc(grp,.line)
 q
 ;
top(grp,qnum,sort) ; sql top
 n top
 s top=$g(^mgtmp($j,"sel",qnum,0)) i top'?1"top#"1n.n q
 s top=$p(top,"#",2)
 i sort s line=" i "_%z("vrc")_"'<"_top_" g "_%zq("tagout") d addline^%mgsqlc(grp,.line)
 i 'sort s line=" i "_%z("vrc")_"'<"_top_" g "_%zq("tagx") d addline^%mgsqlc(grp,.line)
 q
 ;

%mgsqlc4
%mgsqlc4 ;(CM) sql compiler - restrictions ; 28 Jan 2022  9:58 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc4") q
 ;
pre(dbid,qnum,tnum,item,data,dir,got,cond) ; preset subscript and determine stop condition(s)
 n i,preop,postop,sqlv,cname,op,other,link
 s dir=$g(dir(item)) i dir="" s dir=1
 s preop=$s(dir=-1:":=:']:<:'>:",1:":=:]:>:'<:")
 s postop=$s(dir=-1:":=:]:>:'<:",1:":=:']:<:'>:")
 s sqlv=$p(item,%z("dsv"),2),cname=$p(sqlv,".",2)
 s link="" f  s link=$o(^mgtmp($j,"pre",qnum,item,link)) q:link=""  d
 . f i=1:1 q:'$d(^mgtmp($j,"pre",qnum,item,link,i))  d
 . . s op=^mgtmp($j,"pre",qnum,item,link,i,"op"),other=^mgtmp($j,"pre",qnum,item,link,i,"cnst")
 . . s line=""
 . . d pre1(dbid,qnum,tnum,item,op,other,link,.got,.cond,preop,postop)
 . . ;d addpre(qnum,line,item,op,other,link,type,0,.cond)
 . . q
 . q
prex s link="" f  s link=$o(cond(item,"post",link)) q:link=""  i '$d(cond(item,"pre",link)) s cond(item,"pre",link)=" "_"s"_" "_item_"=""""",cond(item,"pre","nostrt")=""
 i '$d(cond(item,"pre",1)) s cond(item,"pre",1)=" "_"s"_" "_item_"=""""",cond(item,"pre","nostrt")="" i $d(cond(item,"pre",2)) s cond(item,"pre",1)=cond(item,"pre",2) k cond(item,"pre",2)
 k cond(item,"link")
 q
 ;
pre1(dbid,qnum,tnum,item,op,other,link,got,cond,preop,postop) ; evaluate restriction
 n type,mtype
 s line=""
 i '$$dep(qnum,line,item,op,other,.got) q
 i op="=" s line=" "_"s"_" "_item_op_other d addpre(qnum,line,item,op,other,link,"pre",1,.cond) q
 i postop[(":"_op_":") g pre2
 ; pre condition
 s line=$$preset(dbid,qnum,tnum,item,op,other)
 d addpre(qnum,line,item,op,other,link,"pre",0,.cond)
 q
pre2 ; post condition
 s line=$$post(dbid,qnum,tnum,item,op,other)
 d addpre(qnum,line,item,op,other,link,"post",0,.cond)
 q
 ;
preset(dbid,qnum,tnum,item,op,other) ; set up starting point for subscript
 s line=""
 i op=">"!(op="<") s line=" "_"s"_" "_item_"="_other q line
 i op="]" s line=" "_"s"_" "_item_"="_other q line
 s mtype=$$mtype(dbid,qnum,tnum,item,other)
 s ^mgtmp($j,"mtype",other)=mtype
 i op="'<",mtype="str" d  q line
 . i other?.1"-".n.1"."1n.n s line=" "_"s"_" "_item_"="_other_"-0.00001" q
 . s line=" "_"s"_" "_item_"="_$e(other,1,$l(other)-2)_$c($a(other,$l(other)-1)-1)_$c(34) q
 . q
 i op="'<",mtype="num" s line=" "_"s"_" "_item_"="_other_"-0.00001" q line
 i op="'<",mtype="var" s line=" "_"s"_":"_other_"?.1""-"".n.1"".""1n.n "_item_"="_other_"-0.00001 "_"s"_":"_other_"'?.1""-"".n.1"".""1n.n "_item_"="_"$e"_"("_other_",1,"_"$l"_"("_other_")-1)_"_"$c"_"("_"$a"_"("_"$e"_"("_other_","_"$l"_"("_other_")))-1)_""~""" q line
 i op="']"!(op="'>"),mtype="str" s line=" "_"s"_" "_item_"="_$e(other,1,$l(other)-2)_$c($a(other,$l(other)-1)+1)_$c(34) q line
 i op="']"!(op="'>"),mtype="num" s line=" "_"s"_" "_item_"="_other_"+0.00001" q line
 i op="']"!(op="'>"),mtype="var" s line=" "_"s"_":"_other_"?.1""-"".n.1"".""1n.n "_item_"="_other_"+0.00001 "_"s"_":"_other_"'?.1""-"".n.1"".""1n.n "_item_"="_"$e"_"("_other_",1,"_"$l"_"("_other_")-1)_"_"$c"_"("_"$a"_"("_"$e"_"("_other_","_"$l"_"("_other_")))+1)" q line
 q line
 ;
post(dbid,qnum,tnum,item,op,other) ; set up stop condition for subscript
 s line=""
 s mtype=$$mtype(dbid,qnum,tnum,item,other)
 s ^mgtmp($j,"mtype",other)=mtype
 i mtype="str" s line=" "_"i"_" "_$s(op="<":item_"="_other_"!("_item_"]"_other_")",op="'>":item_"]"_other,op="']":item_"]"_other,op=">":item_"']"_other,op="]":item_"']"_other,op="'<":item_"'="_other_","_item_"']"_other,1:"") q line
 i mtype="num" s line=" "_"i"_" "_$s(op="<":item_"'<"_other,op="'>":item_">"_other,op="']":item_"="_other_"!("_item_"]"_other_")",op=">":item_"'>"_other,op="]":item_"'>"_other,op="'<":item_"'="_other_","_item_"'>"_other,1:"") q line
 i mtype="var",op="]"!(op=">") s line=" "_"k"_" %s "_"s"_" %s("_item_")="""",%xx="_"$o"_"(%s("_other_")) "_"k"_" %s "_"i"_" %xx'="_item q line
 i mtype="var",op="'<" s line=" "_"i"_" "_"$l"_"("_other_") "_"k"_" %s "_"s"_" %s("_item_")="""",%xx="_"$o"_"(%s("_other_"),-1) "_"k"_" %s "_"i"_" %xx="_item q line
 i mtype="var",op="<" s line=" "_"k"_" %s "_"s"_" %s("_item_")="""",%xx="_"$o"_"(%s("_other_"),-1) "_"k"_" %s "_"i"_" %xx'="_item q line
 i mtype="var",op="']"!(op="'>") s line=" "_"i"_" "_"$l"_"("_other_") "_"k"_" %s "_"s"_" %s("_item_")="""",%xx="_"$o"_"(%s("_other_")) "_"k"_" %s "_"i"_" %xx="_item q line
 q line
 ;
dep(qnum,line,item,op,other,got) ; look for (bad) dependencies and bind sub-queries if necessary
 n i,sqvar,qnum1,subvar,ok
 s ok=1
 f i=2:2 s sqvar=$p(other,%z("dsv"),i) q:sqvar=""  s ok=$$got(qnum,sqvar,.got) i 'ok q
 i 'ok q 0
 f  q:other'[%z("dq")  s qnum1=$p(other,%z("dq"),2) s ok=$$gotsq(qnum,qnum1,.got,.subvar) q:'ok  s other=$p(other,%z("dq"),1)_subvar_$p(other,%z("dq"),3,999)
 i 'ok q 0
 q 1
 ;
got(qnum,sqvar,got) ; check that data restricted upon is available
 n alias,cname
 s alias=$p(sqvar,".",1),cname=$p(sqvar,".",2)
 i alias="" q 1
 i qnum>1,'$d(^mgtmp($j,"from","x",qnum,alias)) q 1 ; coorelated sq, must be ok
 i '$d(got("f",alias)),'$d(got("a",sqvar)) q 0
 q 1
 ;
gotsq(qnum,qnum1,got,subvar) ; look for availability of data from subquery
 n alias1,sqvar1,notgot,cmax,x,ok
 s subvar=""
 s cmax=0,x="" f  s cmax=$o(^mgtmp($j,"corel",qnum,x)) q:x=""  s cmax=x
 i cmax>0,qnum1=cmax,^mgtmp($j,"corel",qnum,qnum1)'=1 q 0
 s alias1="" f  s alias1=$o(^mgtmp($j,"corel",qnum,qnum1,alias1)) q:alias1=""  i '$d(got("f",alias1)) s notgot(alias1)=""
 s alias1="" f  s alias1=$o(notgot(alias1)) q:alias1=""!'ok  d
 . s sqvar1=""
 . f  s sqvar1=$o(^mgtmp($j,"corel",qnum,qnum1,alias1,sqvar1)) q:sqvar1=""  i '$d(got("a",sqvar1)) s ok=0 q
 . q
 i 'ok q 0
 s subvar=^mgtmp($j,"sel",qnum1,1)
 q 1
 ;
addpre(qnum,line,item,op,other,link,type,fixed,cond) ; add line of code to subscript initialisation array
 n ln
 i line="" q
 s ^mgtmp($j,"wexcl",qnum,item_op_other)="",^(other_op_item)=""
 i '$d(cond(item)) s cond(item)=0
 i '$d(cond(item,"link",link)) s ln=$i(cond(item)),cond(item,"link",link)=ln
 s ln=cond(item,"link",link)
 s cond(item,type,ln)=line
 i fixed s cond(item,"fixed",ln)=""
 q
 ;
mtype(dbid,qnum,tnum,item,other) ; determine sort of data
 n %d,tname,cname,mtype
 s %d=^mgtmp($j,"from",qnum,tnum)
 s tname=$p(%d,"~",1)
 s cname=$p($p(item,%z("dsv"),2),".",2)
 s %d=$$col^%mgsqld(dbid,tname,cname) s mtype=$p(%d,"\",11)
 i mtype'="",other[%z("dev"),mtype="str" s mtype="var" q mtype
 i other?1"""".e s mtype="str" q mtype
 i other?.1"-".n.1"."1n.n s mtype="num" q mtype
 s mtype="var"
 q mtype
 ;

%mgsqlc5
%mgsqlc5 ;(CM) sql compiler - get data ; 28 Jan 2022  9:58 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc5") q
 ;
keyidx(qnum,tnum) ; file key for index
 n y,z,i
 s y=$g(data(qnum,tnum,"pkey")) i y="" q
 f i=1:1:$l(y,",") s z=$p($p(y,",",i),%z("dsv"),2) i z'="" s ^mgtmp($j,"get",z)=""
 q
 ;
data(grp,qnum,tnum,data,got,error) ; retrieve required data from file
 n col,pkey,zglo,zgloz,zkey,subt,fail,col
 s pkey=data(qnum,tnum,"pkey")
 d keyidx(qnum,tnum)
 i $g(^mgtmp($j,"dontgetdata",qnum,tnum))=1 q
 i $d(^mgtmp($j,"from","z",qnum,"pass",alias)) d ojoinda^%mgsqlc1(grp,qnum,tnum,.data,.error)
 s zglo=data(qnum,tnum,"pglo"),zgloz=$s(zglo[%z("dev"):""")",1:"")
 s zkey=data(qnum,tnum,"pkey")
 s subt="" i qnum=1,$g(^mgtmp($j,"unique",1))=2 s subt=%z("vdef")
 i $d(data(qnum,tnum,"col")) s fail=$s($d(%zq("tag",qnum)):" g "_%zq("tag",qnum),1:"") d g^%mgsqlci(grp,subt,%z("vdata"),zglo,zkey,zgloz)
 s col="" f  s col=$o(data(qnum,tnum,"col",col)) q:col=""  d data1(grp,qnum,tnum,col,%z("vdata"),.data,.error)
 i $d(^mgtmp($j,"from","z",qnum,"pass",alias)) d ojoindz^%mgsqlc1(grp,qnum,tnum,.data,.error)
 d corelate(grp,qnum,.got)
 q
 ;
data1(grp,qnum,tnum,col,dstr,data,error) ; retrieve data item or just check if in parsed index
 n sm,ssubs,pce,fail,pkey,pglo,key,subt,ssubs,derv
 s ^mgtmp($j,"get",col)=""
 s pkey=data(qnum,tnum,"pkey"),pglo=data(qnum,tnum,"pglo")
 s subt="" i qnum=1,$g(^mgtmp($j,"unique",1))=2 s subt=%z("vdef")
 i $l(col,".")>2 s col=$p(col,".",1,2) i $d(data(qnum,tnum,"col",col))#10 q
 i data(qnum,tnum,"pkey")[(%z("dsv")_col_%z("dsv")) q  ; primary key
 s pce=$p(data(qnum,tnum,"col",col),"\",1),sm=$p(data(qnum,tnum,"col",col),"\",3)
 s ssubs=$g(data(qnum,tnum,"col",col,"s")),derv=$g(data(qnum,tnum,"col",col,"d"))
 i derv'="" d derv(grp,qnum,tnum,col,dstr,derv,.data,.error) q
 i pce="" s line=" s "_%z("dsv")_col_%z("dsv")_"=""""" g data1x
 i sm="d",$l(data(qnum,tnum,"dlm")) s line="$p"_"("_dstr_","_data(qnum,tnum,"dlm")_","_pce_")"
 i sm="d",'$l(data(qnum,tnum,"dlm")) s line=dstr
 i sm="s",$l(subt) s line=" s %ds=""""" d addline^%mgsqlc(grp,.line)
 i sm="s" s key=pkey_","_ssubs,dat="%ds",fail="" d g^%mgsqlci(grp,subt,dat,pglo,key,"") s line="%ds"
 i pkey[(%z("dsv")_col_%z("dsv")) s line=" "_"i"_" "_line_"'="_%z("dsv")_sqat_%z("dsv")_" "_"s"_" ^sqlerr("_$c(34)_tname_$c(34)_","_pkey_")="""" "_"g"_" "_%zq("tag",qnum)
 i pkey'[(%z("dsv")_col_%z("dsv")) s line=" "_"s"_" "_%z("dsv")_col_%z("dsv")_"="_line
data1x d addline^%mgsqlc(grp,.line)
 q
 ;
derv(grp,qnum,tnum,col,dstr,derv,data,error) ; derived column
 n %d,tname,alias,cn,pn,cname,ex,outv,word,zcode,fun,arg
 s %d=^mgtmp($j,"from",qnum,tnum)
 s tname=$p(%d,"~",1),alias=$p(%d,"~",2)
 s ex(1)="$$"_derv d ex^%mgsqle(col,.ex,.word,.zcode,.fun,.error) i $l(error) q
 f cn=1:1 q:'$d(zcode(cn))  f pn=4:2 s cname=$p(zcode(cn),%z("dsv"),pn) q:cname=""  d
 . s arg=alias_"."_cname
 . s $p(zcode(cn),%z("dsv"),pn)=arg
 . i '$d(^mgtmp($j,"get",arg)) d data1(grp,qnum,tnum,arg,dstr,.data,.error)
 . q
 f cn=1:1 q:'$d(zcode(cn))  s line=zcode(cn) d addline^%mgsqlc(grp,.line)
 q
 ;
corelate(grp,qnum,got) ; provide calls to correlated sub-queries
 n i,alias,ok,notgot,qnum1,com,sqvar,line,cmax,x
 s qnum1="",line="",com=""
 f  s qnum1=$o(^mgtmp($j,"corel",qnum,qnum1)) q:qnum1=""  d
 . i ^mgtmp($j,"corel",qnum,qnum1) q
 . s alias="" f  s alias=$o(^mgtmp($j,"corel",qnum,qnum1,alias)) q:alias=""  i '$d(got("f",alias)) s notgot(alias)=""
 . s ok=1 s alias="" f  s alias=$o(notgot(alias)) q:alias=""!'ok  s sqvar="" f  s sqvar=$o(^mgtmp($j,"corel",qnum,qnum1,alias,sqvar)) q:sqvar=""  i '$d(got("a",sqvar)) s ok=0 q
 . i 'ok q
 . s cmax=0,x="" f  s x=$o(^mgtmp($j,"corelx",qnum1,x)) q:x=""  s cmax=x
 . i cmax>0,qnum'=cmax q
 . s line=%z("dl")_%z("pt")_qnum1_"s"_%z("dl")_com_line,com=",",^mgtmp($j,"corel",qnum,qnum1)=1
 . q
 i $l(line) s line=" d "_line d addline^%mgsqlc(grp,.line)
 q
 ;
crind(grp,qnum) ; create required index
 n %def,%ind,%ref,r,tname,alias,ref,x,xd,test,comr,comt,idx,ino,sc
 s r=^mgtmp($j,"create","index"),tname=$p(r,"~",1),idx=$p(r,"~",2)
 s alias=$p(tname," ",2),tname=$p(tname," ",1)
 s ino=idx s %ref=$$ref^%mgsqld(dbid,tname,ino) s ref=%ref_"(",test="",comr="",comt=""
 s ino=idx s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(idx,i))  d
 . s (cname,xd)=%ind(idx,i)
 . k %ind(idx,i)
 . i cname?1a.e s xd=%z("dsv")_alias_"."_cname_%z("dsv")
 . s ref=ref_comr_xd,comr=","
 . i xd[%z("dsv") s ino=$$pkey^%mgsqld(dbid,tname) s %def=$$defkdi^%mgsqld(dbid,tname,cname,ino) i '%def s test=test_comt_"$l("_xd_")",comt=","
 . q
 i $l(test) s line=" i "_test
 s line=line_" s "_ref_")=""""" d addline^%mgsqlc(grp,.line)
 s line=" g "_%zq("tag",qnum) d addline^%mgsqlc(grp,.line)
 q
 ;
klind(grp,qnum) ; kill off index to be created
 k %ind,%ref,r,tname,alias,idx,x,com,ino,i
 s r=^mgtmp($j,"create","index"),tname=$p(r,"~",1),idx=$p(r,"~",2)
 s alias=$p(tname," ",2),tname=$p(tname," ",1)
 s line="",com=""
 s ino=idx s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(idx,i))  s x=%idx(idx,i) k %idx(idx,i) q:x?1a.e  s line=line_com_x,com=","
 i $l(line) s line="("_line_")"
 s ino=idx s %ref=$$ref^%mgsqld(dbid,tname,ino) s line=" k "_%ref_line d addline^%mgsqlc(grp,.line)
 q
 ;

%mgsqlc6
%mgsqlc6 ;(CM) sql compiler - aggregates ; 28 Jan 2022  9:58 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlc6") q
 ;
aginit(grp,qnum,tnum) ; initialise select functions on data attributes
 n ag,item,kdist
 i qnum=1,$g(^mgtmp($j,"unique",1))=3 d init(grp,qnum)
 i $d(^mgtmp($j,"ktmp",qnum)) s line=" k "_%z("ctg")_"("_%z("cts")_","_qnum_")" d addline^%mgsqlc(grp,.line)
 i $d(^mgtmp($j,"group",qnum)) s ^mgtmp($j,"ktmp")=1,line=" k "_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_")" d addline^%mgsqlc(grp,.line) q
 s kdist=0
 s item="" f  s item=$o(^mgtmp($j,"sqag",qnum,item)) q:item=""  s ag="" f  s ag=$o(^mgtmp($j,"sqag",qnum,item,ag)) q:ag=""  d aginit1(grp,qnum,tnum,item,ag,.kdist)
 q
 ;
aginit1(grp,qnum,tnum,item,ag,kdist) ; generate line of code to initilalise each specific aggregate
 n sqvar,agtyp,notnull
 s agtyp=$p(ag,"_",1)
 s notnull=0 i $p(ag,"_",2)="notnull" s notnull=1
 s sqvar=%z("dsv")_ag_"("_item_")"_%z("dsv")
 i agtyp="count" s:item'["*" line=line_" s "_%z("dsv")_ag_"("_item_")"_%z("dsv")_"=0" i item["*" s line=line_" s "_sqvar_"=0"
 i agtyp="cntd",item'["*",qnum'=1,'kdist s kdist=1,line=" k "_%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_")" d addline^%mgsqlc(grp,.line)
 i agtyp="cntd",item'["*" s line=" s "_%z("dsv")_"cntd("_item_")"_%z("dsv")_"=0" d addline^%mgsqlc(grp,.line)
 i agtyp="sum" s line=line_" s "_%z("dsv")_ag_"("_item_")"_%z("dsv")_"=0"
 i agtyp="avg" s line=line_" s "_%z("dsv")_ag_"avsum("_item_")"_%z("dsv")_"=0,"_%z("dsv")_ag_"avcnt("_item_")"_%z("dsv")_"=0"
 i agtyp="max" s line=line_" s "_%z("dsv")_ag_"("_item_")"_%z("dsv")_"="""""
 i agtyp="min" s line=line_" s "_%z("dsv")_ag_"("_item_")"_%z("dsv")_"="""","_%z("dsv")_ag_"nullindata("_item_")"_%z("dsv")_"=0"
 d addline^%mgsqlc(grp,.line)
 q
 ;
updfun ; update aggregates
 s ordsub=""
 i $d(^mgtmp($j,"group",qnum)) d ggroup
 s x="" f  s x=$o(^mgtmp($j,"sqag",qnum,x)) q:x=""  s fun="" f  s fun=$o(^mgtmp($j,"sqag",qnum,x,fun)) q:fun=""  d updfun1
 i $d(^mgtmp($j,"group",qnum)) d ugroup
 k gvaru
 q
 ;
updfun1 ; generate line of code to update specific aggregate
 n z,funtyp,nulltest
 i $d(^mgtmp($j,"ktmp",qnum)) s line=" k "_%z("ctg")_"("_%z("cts")_","_qnum_")" d addline^%mgsqlc(grp,.line)
 s funtyp=$p(fun,"_",1),nulltest="" i $p(fun,"_",2)="notnull" s nulltest=" "_"i"_" $l("_%z("dsv")_x_%z("dsv")_")"
 s z=%z("dsv")_fun_"("_x_")"_%z("dsv")
 ;
 i funtyp="count",$d(index(0,alias,"a")) s nulltest=""
 ;
 i funtyp="count",$d(index(0,alias,"a")) s line=nulltest_" "_"s"_" "_z_"="_z_"+"_%z("dsv")_x_%z("dsv") d addline^%mgsqlc(grp,.line) q
 i funtyp="count",x'["*" s line=nulltest_" "_"s"_" "_z_"="_z_"+1" d addline^%mgsqlc(grp,.line) q
 i funtyp="count",x["*" s line=" "_"s"_" "_z_"="_z_"+1" d addline^%mgsqlc(grp,.line) q
 i funtyp="cntd",x'["*" s ^mgtmp($j,"ktmp")=1
 i funtyp="cntd",x'["*" d cntd q
 i funtyp="sum" s line=nulltest_" "_"s"_" "_z_"="_z_"+"_%z("dsv")_x_%z("dsv") d addline^%mgsqlc(grp,.line) q
 i funtyp="avg" s line=nulltest_" "_"s"_" "_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"="_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"+1,"_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"="_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"+"_%z("dsv")_x_%z("dsv")_","_z_"="_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"/"_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv") d addline^%mgsqlc(grp,.line)
 i funtyp="max" s line=nulltest_" "_"k"_" %s s:$l("_%z("dsv")_x_%z("dsv")_") %s("_%z("dsv")_x_%z("dsv")_")="""" s:$l("_z_") %s("_z_")="""" s "_z_"=$o(%s(""""),-1) k %s" d addline^%mgsqlc(grp,.line) q
 i funtyp="min" s line=nulltest_" s:'$l("_%z("dsv")_x_%z("dsv")_") "_z_"="""","_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")_"=1 i '"_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")_" k %s s %s("_%z("dsv")_x_%z("dsv")_")="""" s:$l("_z_") %s("_z_")="""" s "_z_"=$o(%s("""")) k %s" d addline^%mgsqlc(grp,.line) q
 i $d(^mgtmp($j,"group",qnum)) q
 q
 ;
cntd ; count distinct
 n tag,notnullx
 s notnullx="" i $l(nulltest) s notnullx="{notnull}"
 s tag=%z("dl")_%z("pt")_"cntd"_notnullx_x_%z("dl")
 i $l(nulltest) s line=" i '$l("_%z("dsv")_x_%z("dsv")_") g "_tag d addline^%mgsqlc(grp,.line)
 s ref=%z("ctg")_"("_%z("cts")_","_"""d"","_qnum_$s($l(ordsub):","_ordsub,1:"")_","_""""_%z("dsv")_notnullx_x_%z("dsv")_""""_","_%z("dsv")_x_%z("dsv")_")"
 s line=" s:'$l("_%z("dsv")_x_%z("dsv")_") "_%z("dsv")_x_%z("dsv")_"="" "" i $d("_ref_") g "_tag d addline^%mgsqlc(grp,.line)
 s line=" s "_ref_"=""""" d addline^%mgsqlc(grp,.line)
 s line=" s "_%z("dsv")_fun_"("_x_")"_%z("dsv")_"="_%z("dsv")_fun_"("_x_")"_%z("dsv")_"+1" d addline^%mgsqlc(grp,.line)
 s line=tag_" ;" d addline^%mgsqlc(grp,.line)
 q
 ;
ggroup ; retrieve data for current update on 'grouped' items
 k gvaru s gvaru=0
 s tk0=""",""""x"""","_qnum
 s ordsub="",com=""
 f i=1:1 q:'$d(^mgtmp($j,"group",qnum,i))  d
 . s x=$g(^mgtmp($j,"group",qnum,i)) ;,y=%z("dsv")_"__order"_$p(^mgtmp($j,"order",i,0),"~",1)_%z("dsv")
 . s ordsub=ordsub_com_"$s("_x_"="""":"" "",1:"_x_")",com=","
 . q
 s line=" k "_%z("vdata")_" m "_%z("vdata")_"="_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_ordsub_")" d addline^%mgsqlc(grp,.line)
 s x="" f  s x=$o(^mgtmp($j,"sqag",qnum,x)) q:x=""  s fun="" f  s fun=$o(^mgtmp($j,"sqag",qnum,x,fun)) q:fun=""  d ggroup1
 k rec0,rec
 q
 ;
ggroup1 ; retrieve data for specific function
 n z,ref,funtyp
 s funtyp=$p(fun,"_",1)
 s z=%z("dsv")_fun_"("_x_")"_%z("dsv")
 s line=" s "_%z("vdatax")_"=$g("_%z("vdata")_"("_^mgtmp($j,"sqag",qnum,x,fun)_"))" d addline^%mgsqlc(grp,.line)
 i funtyp="count"!(funtyp="cntd")!(funtyp="sum")!(funtyp="max") s line=" s "_z_"="_%z("vdatax")_" i "_z_"="""" s "_z_"=0"
 i funtyp="avg" s line=" s:"_%z("vdatax")_"'="""" "_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"=$p("_%z("vdatax")_",""#"",2),"_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"=$p("_%z("vdatax")_",""#"",3) s:"_%z("vdatax")_"="""" "_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"=0,"_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")_"=0"
 i funtyp="min" s line=" s:"_%z("vdatax")_"'="""" "_z_"=$p("_%z("vdatax")_",""#"",1),"_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")_"=$p("_%z("vdatax")_",""#"",2) s:"_%z("vdatax")_"="""" "_z_"="""","_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")_"=0"
 d addline^%mgsqlc(grp,.line)
 q
 ;
ugroup ; update goups
 f i=1:1 q:'$d(^mgtmp($j,"outsel",qnum,i))  s x=^(i) d
 . i x[%z("dsv")&(x["(")&$d(^mgtmp($j,"group",qnum)) s x=0
 . s line=" s "_%z("vdata")_"("_i_")="_x
 . d addline^%mgsqlc(grp,.line) ;s recc=recc_rdelc_x,rdelc="_"_$c(34)_"~"_$c(34)_"_" d outrec1
 . q
 s x="" f  s x=$o(^mgtmp($j,"sqag",qnum,x)) q:x=""  s fun="" f  s fun=$o(^mgtmp($j,"sqag",qnum,x,fun)) q:fun=""  d ugroup1
 s line=" ; set the record" d addline^%mgsqlc(grp,.line)
 s line=" m "_%z("ctg")_"("_%z("cts")_","_"""x"","_qnum_","_ordsub_")="_%z("vdata") d addline^%mgsqlc(grp,.line)
 q
 ;
ugroup1 ; update group for specific function
 n funtyp,z
 s funtyp=$p(fun,"_",1)
 s z=%z("dsv")_fun_"("_x_")"_%z("dsv")
 i funtyp="count"!(funtyp="cntd")!(funtyp="sum")!(funtyp="max") s line=" s "_%z("vdata")_"("_^mgtmp($j,"sqag",qnum,x,fun)_")="_z
 i funtyp="min" s line=" s "_%z("vdata")_"("_^mgtmp($j,"sqag",qnum,x,fun)_")="_z_"_""#""_"_%z("dsv")_fun_"nullindata("_x_")"_%z("dsv")
 i funtyp="avg" s line=" s "_%z("vdata")_"("_^mgtmp($j,"sqag",qnum,x,fun)_")="_z_"_""#""_"_%z("dsv")_fun_"avcnt("_x_")"_%z("dsv")_"_""#""_"_%z("dsv")_fun_"avsum("_x_")"_%z("dsv")
 d addline^%mgsqlc(grp,.line)
 q
 ;
init(grp,qnum) ; initialise select statement for unique queries
 n line,outsel,com,i,x
 s outsel=^mgtmp($j,"outsel")
 s (line,com)="" f i=1:1:outsel s x=^mgtmp($j,"sel",qnum,i) i x[%z("dsv"),x'["(" s line=line_com_x,com="," i $l(line)>200 s line=" s ("_line_")=""""",com="" d addline^%mgsqlc(grp,.line)
 i $l(line) s line=" s ("_line_")=""""" d addline^%mgsqlc(grp,.line)
 q
 ;

%mgsqlcd
%mgsqlcd ;(CM) sql compiler - delete ; 28 Jan 2022  9:59 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlcd") q
 ;
main ; start
 s %tagz=%zq("tag",1)
 s tname=^mgtmp($j,"upd","delete"),alias=$p($p(tname," ",2),":",1),tname=$p(tname," ",1)
 k dtyp d xfid^%mgsqlct
 s line=" "_"k"_" %do,%dn,%dx" d addline^%mgsqlc(grp,.line)
 s inop=$$pkey^%mgsqld(dbid,tname)
 f i=1:1 q:'$d(xfid(inop,i))  s cname=xfid(inop,i,1) i cname?1a.e d data
 s %refile=0 d kill^%mgsqlci
 s line=" "_"g"_" "_%tagz d addline^%mgsqlc(grp,.line)
exit ; exit
 k upd,key,nkey,nkeyt,okey,okeyt,pkey,pref,idx,apc,cde,z
 q
 ;
data ; determine values for delete and set r.i. interface
 d dtyp^%mgsqlct
 s key("o",cname)="%do("_dtyp(cname)_")"
 s line=" "_"s"_" "_key("o",cname)_"="_%z("dsv")_alias_"."_cname_%z("dsv") d addline^%mgsqlc(grp,.line)
 q
 ;
hilev ; kill file off at high level
 n n,alias
 s tname=$p(^mgtmp($j,"upd","delete")," ",1),alias=$p(^mgtmp($j,"upd","delete")," ",2) i alias="" s alias=tname
 s ^mgtmp($j,"sqlupd",tname)="~1"
 d xfid^%mgsqlct
 s ino="" f i=0:0 s ino=$o(xfid(ino)) q:ino=""  d hilev1
hilev3 ; link
 s line=" "_"k"_" %do" d addline^%mgsqlc(grp,.line)
 s ino=$$pkey^%mgsqld(dbid,tname) f i=1:1 q:'$d(xfid(ino,i))  s cname=xfid(ino,i,1) i cname?1a.e q:'$d(^mgtmp($j,"upd","attx",cname))  s val=^mgtmp($j,"upd","attx",cname),key=key_com_val,com="," i val[%z("dev") s n=$p($$col^%mgsqld(dbid,tname,cname),"\",5) i $l(n) s line=" "_"s"_" %do("_n_")="_val d addline^%mgsqlc(grp,.line)
 q
 ;
hilev1 ; kill off single index
 s (line,key,keyt,com,comt)=""
 i ino=$$pkey^%mgsqld(dbid,tname) f i=1:1 q:'$d(xfid(ino,i))  s cname=$g(xfid(ino,i,1)) i cname?1a.e s ^mgtmp($j,"get",alias_"."_cname)=""
 f i=1:1 q:'$d(xfid(ino,i))  s cname=xfid(ino,i,1) s:cname'?1a.e key=key_com_cname,com="," i cname?1a.e q:'$d(^mgtmp($j,"upd","attx",cname))  s val=^mgtmp($j,"upd","attx",cname),key=key_com_val,com="," i val[%z("dev") s keyt=keyt_comt_"$l"_"("_val_")",comt=","
 i $l(keyt) s line=" "_"i"_" "_keyt
 i $l(key) s key="("_key_")"
 s line=line_" "_"k"_" "_xfid(ino)_key d addline^%mgsqlc(grp,.line)
 q
 ;

%mgsqlci
%mgsqlci ;(CM) sql compiler - insert ; 28 Jan 2022  9:59 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlci") q
 ;
main ; start
 s %tagz=$s('$d(sql(1,1)):%zq("tagout"),1:%zq("tag",1))
 s (tname,alias)=^mgtmp($j,"upd","insert")
 k dtyp d xfid^%mgsqlct
 f i=1:1 q:'$d(^mgtmp($j,"upd","att",i))  d data
 s %refile=1 d set
 i $d(sql(1,1)) s line=" "_"g"_" "_%zq("tag",1) d addline^%mgsqlc(grp,.line)
 ;
exit ; exit
 k upd,null,key,nkey,nkeyt,okey,okeyt,pkey,pref,idx,apc,cde,z
 q
 ;
data ; determine values for update
 s cname=^mgtmp($j,"upd","att",i)
 d dtyp^%mgsqlct
 s (y,var)=^mgtmp($j,"upd","val",i)
 ;i y?.1"."1a.e s var=%z("dsv")_y_%z("dsv")
 i y?1":"1a.e s var=%z("dev")_y_%z("dev")
 i $d(xfidx(cname)) s (key("o",cname),key("n",cname))=var
 i '$d(xfidx(cname)) s dat("n",cname)=var
 q
 ;
 ;  key("o",cname)=val : must supply
 ;  key("n",cname)=val : supply all/partial/none
 ;  dat("o",cname)=val : optional
 ;  dat("n",cname)=val : optional
 ;  %refile         : flag for forced refiling of all indices
 ;  %tagz           : label for exit
 ;
index ; generate physical index references
 s ino=""
index1 s ino=$o(xfid(ino)) i ino="" q
 s pst="",typo="o",typn="n"
 s (zo,to)="" i %set s (zn,tn,zx,tx)=""
 s (com,ando,andn)="" f kno=1:1 q:'$d(xfid(ino,kno))  d index2 s com=","
 s pkey("o",ino)=zo,subt("o",ino)=to
 i %set s pkey("n",ino)=zn,subt("n",ino)=tn,pkey("x",ino)=zx,subt("x",ino)=tx
 g index1
 ;
index2 ; process single key element
 s zo=zo_com i %set s zn=zn_com,zx=zx_com
 s com1="" f ano=1:1 q:'$d(xfid(ino,kno,ano))  d index3 s com1="_"""_","_"""_"
 q
 ;
index3 ; process a single key attribute
 s cname=xfid(ino,kno,ano)
 i cname'?1a.e s pvar=cname g index4
 i '$d(dtyp(cname)) d dtyp^%mgsqlct
 i $d(xfidx(cname)),$d(key(typo,cname)) s pvar=key(typo,cname) g index4
 i '$d(dat(typo,cname)) s dat(typo,cname)="%d"_pst_"("_dtyp(cname)_")"
 s pvar=dat(typo,cname)
index4 s zo=zo_com1_pvar
 i cname?1a.e,'$d(xfidx(cname)) s to=to_ando_"$l"_"("_pvar_")",ando=","
 i '%set q
 i cname'?1a.e s pvar=cname g index5
 i $d(xfidx(cname)) s:'$d(key(typn,cname)) key(typn,cname)=key(typo,cname) s pvar=key(typn,cname) g index5
 i '$d(dat(typn,cname)) s dat(typn,cname)=dat(typo,cname)
 s pvar=dat(typn,cname)
index5 s xvar=$s(cname?1a.e&'$d(xfidx(cname)):"%dx"_pst_"("_dtyp(cname)_")",1:pvar)
 s zn=zn_com1_pvar,zx=zx_com1_xvar
 i cname?1a.e,'$d(xfidx(cname)) s tn=tn_andn_"$l"_"("_pvar_")",tx=tx_andn_"$l"_"("_xvar_")",andn=","
 q
 ;
elim ; eliminate indices not affected by update
 s ino=$$pkey^%mgsqld(dbid,tname) f  s ino=$o(pkey("n",ino)) q:ino=""  i pkey("n",ino)=pkey("o",ino) k pkey("n",ino),pkey("o",ino)
 s cname="" f  s cname=$o(dat("n",cname)) q:cname=""  i $d(dat("o",cname)),dat("n",cname)=dat("o",cname) k dat("n",cname),dat("o",cname)
 q
 ;
getold ; get old data
 n agg,or,getno
 k out
 k ^mgtmp($j,"got")
 s get="y" ;$p(^%mguser("sys"),"~",10)
 s line="",or="",cname="" f  s cname=$o(key("o",cname)) q:cname=""  i cname?1a.e s or(key("o",cname))="",line=line_or_"'"_"$l"_"("_key("o",cname)_")",or="!"
 i %set s cname="" f  s cname=$o(key("n",cname)) q:cname=""  i cname?1a.e,'$d(or(key("n",cname))) s line=line_or_"'"_"$l"_"("_key("n",cname)_")",or="!"
 i $l(line) s line=" "_"i"_" "_line_" "_"g"_" "_%tagz d addline^%mgsqlc(grp,.line)
 d getold2
 s getno=0
 s inop=$$pkey^%mgsqld(dbid,tname),ino="" f  s ino=$o(pkey("o",ino)) q:ino=""  i ino'=inop d getold0
 q
 ;
getold0 ; get all attibutes involved in indices
 f i=1:1 q:'$d(xfid(ino,i))  f ii=1:1 q:'$d(xfid(ino,i,ii))  s cname=xfid(ino,i,ii) i cname?1a.e d getold1
 ;f i=1:1 q:'$d(xfid(ino,"a",i))  s cname=$p(xfid(ino,"a",i),"~",2) i cname?1a.e d getold1
 q
 ;
getold1 ; get all old attribute values
 n i,ii,inop
 i $d(xfidx(cname))!$d(^mgtmp($j,"got",cname)) q
 s ^mgtmp($j,"got",cname)=""
 i '$d(dtyp(cname)) d dtyp^%mgsqlct
 s pvar="%d("_dtyp(cname)_")"
 i '$d(dtyp(cname,"e")) q
 s r=dtyp(cname,"e"),smeth=$p(r,"\",3),pce=$p(r,"\",1)
 s out(pce,pvar)=""
 s inop=$$pkey^%mgsqld(dbid,tname)
 i smeth="d" s line=" "_"s"_" "_pvar_"="_"$p"_"(%d,"_dlm_","_pce_")"
 i smeth="s" s line=" "_"s"_" "_pvar_"="_"$g"_"("_xfid(inop)_"("_pkey("o",inop)_","_$$seps^%mgsqld(dbid,tname,cname)_"))"
 d addline^%mgsqlc(grp,.line)
 q
 ;
getold2 ; get old data record
 s ino=$$pkey^%mgsqld(dbid,tname)
 i get="n" s line=" "_"s"_" %def="_"$d"_"("_xfid(ino)_"("_pkey("o",ino)_"))" d addline^%mgsqlc(grp,.line) s line=" "_"s"_" %d="""" "_"i"_" %def#10 "_"s"_" %d="_xfid(ino)_"("_pkey("o",ino)_")" d addline^%mgsqlc(grp,.line)
 i get="y" s line=" "_"s"_" %d="_"$g"_"("_xfid(ino)_"("_pkey("o",ino)_"))" d addline^%mgsqlc(grp,.line)
 q
 ;
killold ; kill old data record for index
 i '$d(pkey("o",ino)) q
 s subt="" i $l(subt("o",ino)) s subt=subt("o",ino)
 s glo=xfid(ino),key=pkey("o",ino)
 d k(grp,subt,glo,key)
 i '%set q
 i '%upd!(ino=$$pkey^%mgsqld(dbid,tname)) q
 s subt="" i $l(subt("x",ino)) s subt=subt("x",ino)
 s glo=xfid(ino),key=pkey("x",ino)
 d k(grp,subt,glo,key)
 q
 ;
getnew ; get indexed data associated with new keys
 n inop
 k ^mgtmp($j,"got")
 s inop=$$pkey^%mgsqld(dbid,tname)
 s subt="",dat="%dx",glo=xfid(inop),key=pkey("n",inop),zgloz="",fail="" d g(grp,subt,dat,glo,key,zgloz)
 f  s ino=$o(pkey("o",ino)) q:ino=""  i ino'=inop f i=1:1 q:'$d(xfid(ino,i))  f ii=1:1 q:'$d(xfid(ino,i,ii))  s cname=xfid(ino,i,ii) i cname?1a.e d getnew1
 q
 ;
getnew1 ; get individual data item
 n i,ii,inop
 s inop=$$pkey^%mgsqld(dbid,tname)
 i $d(xfidx(cname))!$d(^mgtmp($j,"got",cname)) q
 s ^mgtmp($j,"got",cname)=""
 i '$d(dtyp(cname)) d dtyp^%mgsqlct
 s pvar="%dx("_dtyp(cname)_")"
 i '$d(dtyp(cname,"e")) q
 s r=dtyp(cname,"e"),smeth=$p(r,"\",3),pce=$p(r,"\",1)
 i smeth="d" s line=" "_"s"_" "_pvar_"="_"$p"_"(%dx,"_dlm_","_pce_")"
 i smeth="s" s line=" "_"s"_" "_pvar_"="_"$g"_"("_xfid(inop)_"("_pkey("n",inop)_","_$$seps^%mgsqld(dbid,tname,cname)_"))"
 d addline^%mgsqlc(grp,.line)
 q
 ;
setnew ; set new record for data/index
 n setdstr
 s setdstr=1
 i '$d(pkey("n",ino)) q
 i inop=$$pkey^%mgsqld(dbid,tname)
 i ino=inop s setdstr=0,cname="" f  s cname=$o(dat("n",cname)) q:cname=""  d setnew1
 i ino=inop,%upd k out d setnew2
 s subt="" i $l(subt("o",ino)) s subt=subt("n",ino)
 s glo=xfid(ino),key=pkey("n",ino),dat=$s(ino=$$pkey^%mgsqld(dbid,tname):"%d",1:"""""")
 i setdstr d s(grp,subt,dat,glo,key)
 q
 ;
setnew1 ; set all new attribute values
 i '$d(dtyp(cname)) d dtyp^%mgsqlct
 s var=dat("n",cname)
 i '$d(dtyp(cname,"e")) q
 s r=dtyp(cname,"e"),smeth=$p(r,"\",3),pce=$p(r,"\",1)
 i $l(var)<250,$d(out(pce,var)) q
 i smeth="d" s line=" "_"s"_" $p(%d,"_dlm_","_pce_")="_var,setdstr=1
 i smeth="s" s line=" "_"s"_" "_xfid(ino)_"("_pkey("n",ino)_","_$$seps^%mgsqld(dbid,tname,cname)_")="_var
 d addline^%mgsqlc(grp,.line)
 q
 ;
setnew2 ; for cases where primary key has potentially changed
 s cname="",com="" f  s cname=$o(key("o",cname)) q:cname=""  s line=line_com_key("n",cname)_"="_key("o",cname),com=","
 i $l(line) s line=" "_"i"_" "_line_" "_"g"_" "_%tagz d addline^%mgsqlc(grp,.line)
 s line=" k %xx" d addline^%mgsqlc(grp,.line)
 s subt="",glo=xfid(inop),key=pkey("o",inop),dvar="%xx" d gm(grp,subt,dvar,glo,key)
 s subt="",glo=xfid(inop),key=pkey("n",inop),dat="%xx" d m(grp,subt,dat,glo,key)
 s line=" k %xx" d addline^%mgsqlc(grp,.line)
 s subt="",glo=xfid(inop),key=pkey("o",inop) d k(grp,subt,glo,key)
 q
 ;
set ; set a file reference
 s %set=1,^mgtmp($j,"sqlupd",tname)="~1"
 d index
 s ino=$$pkey^%mgsqld(dbid,tname)
 s %upd=($g(pkey("o",ino))'=$g(pkey("n",ino)))
 i '%upd,'%refile d elim
sete ; set new
 d getold
 i %upd d getnew
 s inop=$$pkey^%mgsqld(dbid,tname)
 s ino=inop d setnew
 s ino="" f  s ino=$o(pkey("n",ino)) q:ino=""  i ino'=inop d killold,setnew
 k %data,data,pkey,subt,zn,zo,tn,to,andn,ando,com,com1,out,ltst
 q
 ;
kill ; kill an entity reference
 s %set=0,^mgtmp($j,"sqlupd",tname)="~1"
 d index
kille ; exit
 d getold
 s ino="" f  s ino=$o(pkey("o",ino)) q:ino=""  d killold
 k %data,data,pkey,subt,zn,zo,tn,to,andn,ando,com,com1,out,ltst
 q
 ;
g(grp,test,dvar,glo,key,default) ; get command
 n line
 s line=$s($l(test):" i "_test,1:"")_" "_"s"_" "_dvar_"="_"$g"_"("_glo_"("_key_")"_default_")" d addline^%mgsqlc(grp,.line)
 q
 ;
gm(grp,test,dvar,glo,key) ; get via merge command
 n line
 s line=$s($l(test):" i "_test,1:"")_" "_"m"_" "_dvar_"="_glo_"("_key_")" d addline^%mgsqlc(grp,.line)
 q
 ;
gd(grp,test,dvar,glo,key,default,fail) ; get command with failed definition rejection
 s line=" "_"s"_" "_%z("vdef")_"="_"$d"_"("_glo_"("_key_")"_default_")" s:$l(fail) line=line_" "_"i"_" '"_%z("vdef")_fail d addline^%mgsqlc(grp,.line)
 s line=" "_"s"_" "_dvar_"="""" "_"i"_" "_%z("vdef")_"#10 "_"s"_" "_dvar_"="_glo_"("_key_")"_default d addline^%mgsqlc(grp,.line)
 q
 ;
s(grp,test,dvar,glo,key) ; set command
 s line=$s($l(test):" "_"i"_" "_test,1:"")_" "_"s"_" "_glo_"("_key_")="_dvar d addline^%mgsqlc(grp,.line)
 q
 ;
m(grp,test,dvar,glo,key) ; merge command
 s line=$s($l(test):" "_"i"_" "_test,1:"")_" "_"m"_" "_glo_"("_key_")="_dvar d addline^%mgsqlc(grp,.line)
 q
 ;
k(grp,test,glo,key) ; kill command
 s line=$s($l(test):" "_"i"_" "_test,1:"")_" "_"k"_" "_glo_"("_key_")" d addline^%mgsqlc(grp,.line)
 q
 ;
dbg ; set up referential actions audit trail
 n arg,args,i
 s line=""
 i '$d(^mgtmp($j,"ra-audit")) q
 s line=^("ra-audit")
 s line=line_",%k(0)="""_glo_""""
 s arg=key s args=$$arg^%mgsqle(arg,.args)
 f i=1:1:args s line=line_",%k("_i_")="_args(i)
 q
 ;

%mgsqlct
%mgsqlct ;(CM) sql compiler - get table details ; 28 Jan 2022  9:59 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlct") q
 ;
table(dbid,qnum,data,error) ; get file particulars for each alias
 n tnum
 f tnum=1:1 q:'$d(^mgtmp($j,"from",qnum,tnum))  d table1(dbid,qnum,tnum,.data,.error) i $l(error) q
 q
 ;
table1(dbid,qnum,tnum,data,error) ; get file particulars for alias alias (fid)
 n %d,%dv,%ref,%s,i,x,y,z,tname,alias,ino,dlm,pk,glo,com
 s %d=^mgtmp($j,"from",qnum,tnum)
 s tname=$p(%d,"~",1),alias=$p(%d,"~",2)
 s pk=$$pkey^%mgsqld(dbid,tname)
 s ino=pk i $d(^mgtmp($j,"from","i",0,alias)) s ino=^mgtmp($j,"from","i",0,alias)
 s %d=$$tab^%mgsqld(dbid,tname),%ref=$$ref^%mgsqld(dbid,tname,.ino),glo=%ref
 s dlm=$p(%d,"\",1)
 i dlm?1n.n,dlm>31,dlm<127 s dlm=""""_$c(dlm)_""""
 i dlm?1n.n,dlm<32!dlm>126 s dlm="$char("_dlm_")"
 s data(qnum,tnum,"dlm")=dlm
 s data(qnum,tnum,"glo")=glo
 s sc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 s (z,com)="" f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) s:x?1a.e x=%z("dsv")_alias_"."_x_%z("dsv") s z=z_com_x,com=","
 s data(qnum,tnum,"key")=z
 i ino=pk s data(qnum,tnum,"pkey")=data(qnum,tnum,"key"),data(qnum,tnum,"pglo")=glo
 i ino'=pk d table2
 f i=1:1 q:'$d(^mgtmp($j,"sel",qnum,i))  s x=$p(^mgtmp($j,"sel",qnum,i),%z("dsv"),2)  d table3
 s y="" f  s y=$o(^mgtmp($j,"from","z",qnum,"join",y)) q:y=""  i $d(^mgtmp($j,"from","z",qnum,"join",y,alias)) s x=alias_"."_y d table3
 s cname="" f  s cname=$o(^mgtmp($j,"join",qnum,alias,cname)) q:cname=""  d
 . s %d=$$item^%mgsqld(dbid,tname,cname),%s=$$seps^%mgsqld(dbid,tname,cname),%dv=$$derv^%mgsqld(dbid,tname,cname)
 . s data(qnum,tnum,"col",alias_"."_at)=%d
 . s data(qnum,tnum,"col",alias_"."_at,"s")=%s
 . i %dv'="" s data(qnum,tnum,"col",alias_"."_at,"d")=%dv
 . q
 i $l(error) q
 q
 ;
table2 ; get details for primary key (for indexed search)
 n ino
 s ino=$$pkey^%mgsqld(dbid,tname)
 s sc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 s data(qnum,tnum,"pkey")="",com=""
 f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) s:x?1a.e x=%z("dsv")_alias_"."_x_%z("dsv") s data(qnum,tnum,"pkey")=data(qnum,tnum,"pkey")_com_x,com=","
 s %ref=$$ref^%mgsqld(dbid,tname,ino) s data(qnum,tnum,"pglo")=%ref
 q
 ;
table3 ; process data item to be retrieved/derived
 i x="*" q
 i x["(",x[")" s x=$p($p(x,"(",2),")",1)
 s cname=x,ext="",f=""
 i x["." s cname=$p(x,".",2),f=$p(x,".",1)
 i f'=alias,f'=alias_"g" q
 s %d=$$item^%mgsqld(dbid,tname,cname),%s=$$seps^%mgsqld(dbid,tname,cname),%dv=$$derv^%mgsqld(dbid,tname,cname)
 s %defm=$$remap^%mgsqlv2(f,cname)
 i (%d'="")!%defm s data(qnum,tnum,"col",$p(x,".",1,2))=%d,data(qnum,tnum,"col",$p(x,".",1,2),"s")=%s,data(qnum,tnum,"col",$p(x,".",1,2),"d")=%dv
 q
 ;
xfid ; retrieve all indices for table
 k xfid
 s rc=$$ind^%mgsqld(dbid,tname,.%ind) s ino=$$pkey^%mgsqld(dbid,tname) i (ino="")!'$d(%ind(ino)) g xfidx
 s ino="" f  s ino=$o(%ind(ino)) q:ino=""  s xfid(ino)=%ind(ino) k %ind(ino) d xfid1
 s %d=$$tab^%mgsqld(dbid,tname) s dlm=$c(34)_$c($p(%d,"\",1)+0)_$c(34)
xfidx k %ind
 q
 ;
xfid1 ; retrieve data for index
 s sc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 s xfidx=0 f i=1:1 q:'$d(%ind(ino,i))  s cname=%ind(ino,i),xfid(ino,i,1)=cname s:ino=$$pkey^%mgsqld(dbid,tname)&(cname?1a.e) xfidx=xfidx+1,xfidx(cname)=""
 k %ind(ino)
 q
 ;
dtyp ; get attribute details
 i cname'?1a.e q
 i $d(dtyp(cname)) q
 s %d=$$col^%mgsqld(dbid,tname,cname) s dtyp(cname)=$p(%d,"\",5)
 i $d(xfidx(cname)) q
 s %d=$$item^%mgsqld(dbid,tname,cname) i %d'="" s dtyp(cname,"e")=%d
 q
 ;

%mgsqlcu
%mgsqlcu ;(CM) sql compiler update ; 28 Jan 2022  9:59 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlcu") q
 ;
main ; start
 n inop
 s inop=$$pkey^%mgsqld(dbid,tname)
 s %tagz=%zq("tag",1)
 s tname=^mgtmp($j,"upd","update"),alias=$p(tname," ",2),tname=$p(tname," ",1)
 k dtyp d xfid^%mgsqlct
 s line=" "_"k"_" %do,%dn,%dx" d addline^%mgsqlc(grp,.line)
 s %kupd=0,cname="" f  s cname=$o(xfidx(cname)) q:cname=""  i $d(^mgtmp($j,"upd","set",cname)) s %kupd=1
 f i=1:1 q:'$d(xfid(inop,i))  s cname=xfid(inop,i,1) i cname?1a.e d key
 s cname="" f  s cname=$o(^mgtmp($j,"upd","set",cname)) q:cname=""  i cname?1a.e,'$d(xfidx(cname)) d dat
 s %refile=0 d set^%mgsqlci
 s line=" "_"g"_" "_%tagz d addline^%mgsqlc(grp,.line)
exit ; exit
 k upd,key,nkey,nkeyt,okey,okeyt,pkey,pref,idx,apc,cde,z
 q
 ;
key ; determine values for keys in update
 d dtyp^%mgsqlct
 s key("o",cname)="%do("_dtyp(cname)_")"
 s line=" "_"s"_" "_key("o",cname)_"="_%z("dsv")_alias_"."_cname_%z("dsv") d addline^%mgsqlc(grp,.line)
 i '$d(^mgtmp($j,"upd","set",cname)) s line=" "_"s"_" "_"%dn("_dtyp(cname)_")="_key("o",cname) d addline^%mgsqlc(grp,.line)
 i '%kupd q
 s key("n",cname)="%dn("_dtyp(cname)_")"
 s var=key("n",cname) d setto
 q
 ;
dat ; determine values for update and set r.i. interface
 d dtyp^%mgsqlct
 s dat("o",cname)="%do("_dtyp(cname)_")"
 s line=" "_"s"_" "_dat("o",cname)_"="_%z("dsv")_alias_"."_cname_%z("dsv") d addline^%mgsqlc(grp,.line)
 s dat("n",cname)="%dn("_dtyp(cname)_")"
 s var=dat("n",cname) d setto
 q
 ;
setto ; reconstruct set-to statement
 n i
 i '$d(^mgtmp($j,"upd","set",cname)) s line=" "_"s"_" "_var_"="_"%do("_dtyp(cname)_")" d addline^%mgsqlc(grp,.line) q
 f i=1:1 q:'$d(^mgtmp($j,"upd","set",cname,"zcode",i))  s line=^mgtmp($j,"upd","set",cname,"zcode",i) d setto1
 q
 ;
setto1 ; add to line
 n i
 s pn=0 i line[%z("dsv") f  s pn=pn+2,x=$p(line,%z("dsv"),pn) q:x=""  i x["**set**" s line=$p(line,%z("dsv"),1,pn-1)_var_$p(line,%z("dsv"),pn+1,999) s pn=pn-2
 d addline^%mgsqlc(grp,.line)
 q
 ;

%mgsqld
%mgsqld ;(CM) data model access points ; 28 Jan 2022  9:59 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqld") q
 ;
dbid(dbid) ; schema list
 k dbid
 s dbid="" f  s dbid=$$nxtdbid(dbid) q:dbid=""  s dbid(dbid)=""
 q 1
 ;
nxtdbid(dbid) ; next schema
 n dbid1
 s dbid1=$o(^mgsqld(0,dbid))
 q dbid1
 ;
nxttname(dbid,tname) ; next table
 s tname=$o(^mgsqld(0,dbid,"t",tname))
 q tname
 ;
col(dbid,tname,cname) ; column details
 n %d,type,mtype,ano,sm
 s %d=$g(^mgsqld(0,dbid,"t",tname,"tc",cname))
 s type=$p(%d,"\",2)
 s mtype="num" i type["varchar" s mtype="str"
 s $p(%d,"\",11)=mtype
 q %d
 ;
dtype(dbid,tname,cname)
 n %d,type
 i dbid=""!(tname="")!(cname="") q ""
 s %d=$g(^mgsqld(0,dbid,"t",tname,"tc",cname))
 s type=$p(%d,"\",2)
 q type
 ;
tab(dbid,tname) ; table details
 n %d
 s %d=$g(^mgsqld(0,dbid,"t",tname,"t")) i %d="" q %d
 q %d
 ;
pkey(dbid,tname) ; primary key name
 n %d,%pkey
 s %d=$g(^mgsqld(0,dbid,"t",tname,"t"))
 s %pkey=$p(%d,"\",2)
 q %pkey
 ;
ind(dbid,tname,%ind) ; entity indices
 k %ind
 s ino="" f  s ino=$o(^mgsqld(0,dbid,"t",tname,"ti",ino)) q:ino=""  s rc=$$ind1(dbid,tname,ino,.%ind)
 q 1
 ;
ind1(dbid,tname,ino,%ind) ; entity index
 k %ind(ino)
 s %ind(ino)=$$ref(dbid,tname,ino)
 q 1
 ;
ref(dbid,tname,ino) ; entity physical reference for index
 s %ref=$g(^mgsqld(0,dbid,"t",tname,"ti",ino))
 q %ref
 ;
key(dbid,tname,ino,%ind) ; entity index key
 n i
 f i=1:1 q:'$d(^mgsqld(0,dbid,"t",tname,"ti",ino,i))  s %ind(ino,i)=$p(^(i),"\",1)
 q 1
 ;
data(dbid,tname,%data) ; entity data
 n %d,cname
 k %data
 s cname="" f  s cname=$o(^mgsqld(0,dbid,"t",tname,"tc",cname)) q:cname=""  s %d=$$item(dbid,tname,cname) s %data(cname)=%d
 q 1
 ;
item(dbid,tname,cname) ; entity data item
 n %d,sm,cno,nnull
 s %d=$g(^mgsqld(0,dbid,"t",tname,"tc",cname)) i %d="" q %d
 q %d
 ;
seps(dbid,tname,cname) ; trailing keys for separately subscripted items
 n pce,smeth,ssubs
 s %d=$$item(dbid,tname,cname),smeth=$p(%d,"\",3),pce=$p(%d,"\",1)
 s ssubs="" i smeth="s" s ssubs=$g(^mgsqld(0,dbid,"t",tname,"tc",cname,"s"))
 i ssubs="" s ssubs=pce
 q ssubs
 ;
derv(dbid,tname,cname) ; derived columns
 n derv
 s derv=$g(^mgsqld(0,dbid,"t",tname,"tc",cname,"d"))
 q derv
 ;
defk(dbid,tname,cname) ; item defined in entity primary key
 n i,ino
 s %defk=0
 s ino=$$pkey(dbid,tname) i ino="" q
 f i=1:1 q:'$d(^mgsqld(0,dbid,"t",tname,"ti",ino,i))  i $g(^(i))=cname s %defk=1 q
 q %defk
 ;
defd(dbid,tname,cname) ; item defined in entity data
 n %defd
 s %defd=$d(^mgsqld(0,dbid,"t",tname,"tc",cname))
 q %defd
 ;
defkdi(dbid,tname,cname,ino) ; item defined in specific entity index
 n i
 s %def=0
 f i=1:1 q:'$d(^mgsqld(0,dbid,"t",tname,"ti",ino,i))  i $g(^(i))=cname s %def=1 q
 q %def
 ;
indexr(dbid,tname,ino,xsub) ; retrieve index details
 k xsub
 s tname=id
 s rc=$$ind1(dbid,tname,ino,.%ind) s ino=0 f  s ino=$o(%ind(ino)) q:ino=""  s xsub(ino)=%ind(ino) d indexr1
 q 1
 ;
indexr1 ; key + aggregates
 n y,z
 s rc=$$key(dbid,tname,ino,.%ind)
 s (xsub(ino,"k"),com)="" f i=1:1 q:'$d(%ind(ino,i))  s y=%ind(ino,i),xsub(ino,i)=y,xsub(ino,"k")=xsub(ino,"k")_com_y,com=","
 q 1
 
indexw(dbid,tname,ino,%ind)   ; write index details
 n i,%indo
 k ^mgsqld(0,dbid,"t",tname,"ti",ino)
 s ^mgsqld(0,dbid,"t",tname,"ti",ino)=%ind(ino)
 f i=1:1 q:'$d(%ind(ino,i))  s ^mgsqld(0,dbid,"t",tname,"ti",ino,i)=%ind(ino,i)
 q 1
 ;
nxtpname(dbid,pname) ; next proedure
 s pname=$o(^mgsqld(0,dbid,"p",pname))
 q pname
 ;
prc(dbid,pname) ; process details
 n %d
 s %d=$g(^mgsqld(0,dbid,"p",pname,"p")) i %d="" q %d
 q %d
 ;
pdata(dbid,pname,%data) ; process data
 n %d,cname
 k %data
 s cname="" f  s cname=$o(^mgsqld(0,dbid,"p",pname,"pc",cname)) q:cname=""  s %d=$$pitem(dbid,pname,cname) s %data(cname)=%d
 q 1
 ;
pitem(dbid,pname,cname) ; process data item
 n %d,sm,cno,nnull
 s %d=$g(^mgsqld(0,dbid,"p",pname,"pc",cname)) i %d="" q %d
 q %d
 ;
ctable(dbid,tname,cols) ; create table
 n idx,idxx,col,i,ii,in,cname,ano,ano1,atu,pk,glo,dlm,olddata,cno,sm,type,typeu,nnull,cons,consu,subs
 s glo=$g(tname("global")) i $e(glo,1)'="^" s glo="^"_glo
 s dlm=$g(tname("delimiter")) s dlm=$a(dlm)
 i glo="" s glo="^"_tname
 i dlm="" s dlm=35
 s rc=$$data(0,tname,.olddata)
 s rc=$$dtable(dbid,tname)
 f i=1:1 q:'$d(cols(i))  d
 . s cname=$p(cols(i)," ",1),atu=$$lcase^%mgsqls(cname) i atu="constraint" d  q
 . . s pk=$p(cols(i)," ",2),idx=$p($p(cols(i),"(",2),")",1)
 . . s idx(pk)=glo
 . . f ii=1:1:$l(idx,",") s cname=$p(idx,",",ii),idx(pk,ii)=cname,idxx(pk,cname)=ii
 . . q
 . q
 s ano=0
 f i=1:1 q:'$d(cols(i))  d
 . s nnull=0
 . s cname=$p(cols(i)," ",1),atu=$$lcase^%mgsqls(cname) i atu="constraint" q
 . s type=$p(cols(i)," ",2),typeu=$$lcase^%mgsqls(type)
 . f ii=3:1:$l(cols(i)," ") s name=$p(cols(i)," ",ii) d
 . . i name="" q
 . . s name=$$lcase^%mgsqls(name)
 . . i name="not",$$lcase^%mgsqls($p(cols(i)," ",ii+1))="null" s nnull=1
 . . i name="separate" s cols(i,name)="" d  i ($l(subs,"""")#2) s cols(i,name)=$$rstring^%mgsqlp(subs)
 . . . n n,x
 . . . s subs=""
 . . . s x=$p(cols(i)," ",ii+1,999)
 . . . i $e(x)="(" s x=$e(x,2,999) f n=1:1 s subs=$p(x,")",1,n) q:($l(subs,"""")#2)
 . . . i subs'="" q
 . . . f n=1:1 s subs=$p(x," ",1,n) q:($l(subs,"""")#2)
 . . . q
 . . i name="derived" s cols(i,name)=$p(cols(i)," ",ii+1)
 . . q
 . s cons=$p(cols(i)," ",3,999),consu=$$lcase^%mgsqls(cons)
 . s nnull=0 i consu["not null" s nnull=1
 . s ano1=0 i '$d(idxx(pk,cname)) s ano=ano+1,ano1=ano
 . s cno=$p($g(olddata(cname)),"\",5)+0 i 'cno s cno=$$cno()
 . s sm="d" i $d(cols(i,"separate")) s sm="s"
 . s col(cname)=ano1_"\"_typeu_"\"_sm_"\"_nnull_"\"_cno
 . s name="" f  s name=$o(cols(i,name)) q:name=""  s col(cname,name)=cols(i,name)
 . q
 ;b
 s ^mgsqld(0,dbid,"t",tname,"t")=dlm_"\"_pk
 s cname="" f  s cname=$o(col(cname)) q:cname=""  d
 . s ^mgsqld(0,dbid,"t",tname,"tc",cname)=col(cname)
 . s name="" f  s name=$o(col(cname,name)) q:name=""  s ^mgsqld(0,dbid,"t",tname,"tc",cname,$e(name,1))=$$rstring^%mgsqlp(col(cname,name))
 . q
 s in="" f i=1:1 s in=$o(idx(in)) q:in=""  d
 . s ^mgsqld(0,dbid,"t",tname,"ti",in)=idx(in)
 . f i=1:1 q:'$d(idx(in,i))  s ^mgsqld(0,dbid,"t",tname,"ti",in,i)=$$rstring^%mgsqlp(idx(in,i))
 q 1
 ;
dtable(dbid,tname) ; delete table
 k ^mgsqld(0,dbid,"t",tname)
 q 1
 ;
cindex(dbid,tname,ino,cols) ; create index
 n %ind
 s glo=$g(tname("global")) i $e(glo,1)'="^" s glo="^"_glo
 i glo="" s glo="^"_tname_ino
 s %ind(ino)=glo
 f i=1:1 q:'$d(cols(i))  s %ind(ino,i)=$$rstring^%mgsqlp(cols(i))
 s rc=$$indexw^%mgsqld(dbid,tname,ino,.%ind)
 q 1
 ;
cproc(dbid,pname,cols) ; create procedure
 n idx,idxx,col,i,ii,in,cname,ano,ano1,atu,pk,rou,dlm,olddata,cno,sm,type,typeu,nnull,cons,consu
 s rou=$p(pname,"_",2)_"^"_$p(pname,"_",1),dlm=35
 s rc=$$dproc(dbid,pname)
 s ano=0
 f i=1:1 q:'$d(cols(i))  d
 . s cname=$p(cols(i)," ",1),atu=$$lcase^%mgsqls(cname) i atu="constraint" q
 . s type=$p(cols(i)," ",2),typeu=$$lcase^%mgsqls(type)
 . s cons=$p(cols(i)," ",3,999),consu=$$lcase^%mgsqls(cons)
 . s nnull=0 i consu["not null" s nnull=1
 . s ano=ano+1
 . s cno=0
 . s sm="d"
 . s col(cname)=ano_"\"_typeu_"\"_sm_"\"_nnull_"\"_cno
 . q
 s ^mgsqld(0,dbid,"p",pname,"p")=dlm_"\"_rou
 s cname="" f  s cname=$o(col(cname)) q:cname=""  s ^mgsqld(0,dbid,"p",pname,"pc",cname)=col(cname)
 q 1
 ;
dproc(dbid,tname) ; delete table
 k ^mgsqld(0,dbid,"p",pname)
 q 1
 ;
cno() ; next column name number
 l +^mgsqld(0)
 s x=$g(^mgsqld(0))+1,^mgsqld(0)=x
 l -^mgsqld(0)
 q x
 ;


%mgsqle
%mgsqle ;(CM) SQL : Embedded expressions ; 28 Jan 2022  10:00 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqle") q
 ;
ex(outv,ex,word,code,sqlfn,error) ; 'ex' expression
 n i,en,fn,fun,ops
 i $g(ex)'="",'$d(ex(1)) s ex(1)=ex
 s en=0,fn=0,error=""
 s ops=$$ops(.ops)
 d word^%mgsqle1(en,.ex,.word,.ops,.error) i $l(error) g exe
 d vrfy^%mgsqle1(en,.word,.ops,.error) i $l(error) g exe
 d brac^%mgsqle1(en,.word,.ops,.error) i $l(error) g exe
 f i=1:1 q:'$d(word(en,i))  s fun=word(en,i) i fun[%z("df") s fun=$p(fun,%z("df"),2),fn=$$fun(fun,.sqlfn,.ops,.error) s word(en,i)=%z("df")_fn_%z("df") i $l(error) q
 i $l(error) g exe
 d comp^%mgsqle2(en,outv,.word,.sqlfn,.code,.error)
exe ; exit
 q
 ;
where(ex,word,error) ; validate sql 'where' predicate
 n en,ops
 i $g(ex)'="",'$d(ex(1)) s ex(1)=ex
 s en=0,error=""
 s ops=$$ops(.ops)
 d word^%mgsqle1(en,.ex,.word,.ops,.error) i $l(error) g wheree
 d vrfy^%mgsqle1(en,.word,.ops,.error) i $l(error) g wheree
 d brac^%mgsqle1(en,.word,.ops,.error) i $l(error) g wheree
wheree ; exit
 q
 ;
arg(arg,args) ; produce argument list from arguments string
 n pn,an,i,str,obr,cbr,chr,arg1
 k args s pn=0,an=0
arg1 s pn=pn+1 i pn>$l(arg,",") g argx
 s arg1=$p(arg,",",pn)
 f i=pn+1:1 q:i>$l(arg,",")!($l(arg1,"""")#2)  s arg1=arg1_","_$p(arg,",",i),pn=pn+1
 i arg1["(" s str=arg1_","_$p(arg,",",pn+1,999),(obr,cbr)=0 f i=1:1 s chr=$e(str,i) q:chr=""  i $l($e(str,1,i),"""")#2 s:chr="(" obr=obr+1 s:chr=")" cbr=cbr+1 i chr=",",obr=cbr q
 i arg1["(" s arg1=$e(str,1,i-1),pn=pn+$l(arg1,",")-1
 s an=an+1,args(an)=arg1
 g arg1
argx s args=an
 q args
 ;
ops(ops) ; operator list
 n i,op
 s ops=":*:/:\:#:-:+:=:i=:<>:!=:'=:?:>:<:>=:'<:<=:'>:[:[:]:]:in:not in:like:not like:exists:not exists:between:not between:and:&:or:!:"
 f i=2:1:$l(ops,":") s op=$p(ops,":",i) i op'="" s ops(op)=i
 q ops
 ;
oper(ops,props,neops) ; get list of valid operators
 n x
 s ops=$$ops(.x)
 ; list of operators which may be translated into physical restrictions
 s props=":=:>:<:'>:'<:>=:<=:'>=:'<=:]:']:"
 ; list of operators which may be used to exclude null only
 s neops=":'=:[:"
 s ops("=")="=",ops("'=")="'="
 s ops(">")="<",ops("<")=">"
 s ops("'>")="'<",ops("'<")="'>"
 s ops(">=")="<=",ops("<=")=">="
 s ops("]")="<",ops("']")="'<"
 s ops("+")="-",ops("-")="+"
 s ops("*")="/",ops("/")="*"
 q ops
 ;
fun(fun,sqlfn,ops,error) ; decompose function fun (number fn)
 n funlin,pars,fn
 s fn=0
 s fun=$$fun1(fun)
 i fun'?1"{a}".e s error="invalid function "_fun,error(5)="HY000" q fn
fun2 i fun'["{a}" g funx
 s funlin=$p(fun,"{a}",$l(fun,"{a}")),fn=$i(sqlfn)
 s wrd=$$funlin(funlin,.error) i $l(error) g funx
 s fun=$p(fun,"{a}",1,$l(fun,"{a}")-1)_%z("df")_fn_%z("df")_$e(funlin,$l(wrd)+1,999),sqlfn(fn)=wrd
 s pars=$p(wrd,"(",2,999),pars=$e(pars,1,$l(pars)-1)
 d pars(funlin,pars,.sqlfn,fn,.ops,.error) i $l(error) g funx
 g fun2
funx ; exit
 q fn
 ;
fun1(fun) ; insert leading delimiter '{a}' for each nested function
 n i,pn,pre,post
 s pn=0
fun11 s pn=pn+1 i pn>$l(fun,"(") q fun
 s pre=$p(fun,"(",1,pn),post=$p(fun,"(",pn+1,999)
 i pre=""!(post="")!(pre=fun)!'($l(pre,"""")#2) g fun11
 f i=$l(pre):-1:0 i " ,("[$e(pre,i) q
 s fun=$e(pre,1,i)_"{a}"_$e(pre,i+1,999)_"("_post
 g fun11
 ;
pars(funlin,pars,sqlfn,fn,ops,error) ; get parameter list for function
 n select,pn,parn,par,i
 s select=0 i funlin?1"$s(".e s select=1
 s pn=0,parn=0
pars1 s pn=pn+1 i pn>$l(pars,",") g parsx
 s par=$p(pars,",",pn)
 f i=pn+1:1 q:i>$l(pars,",")!($l(par,"""")#2)  s par=par_","_$p(pars,",",i),pn=pn+1
 i select s select("a",2)=$p(par," : ",2,999),par=$p(par," : ",1)
pars11 s parn=parn+1
 d pars2(par,parn,.sqlfn,fn,.ops,.error) i $l(error) g parsx
 i select,$d(select("a",2)) s par=select("a",2) k select("a") g pars11
 g pars1
parsx ; exit
 q
 ;
pars2(par,parn,sqlfn,fn,ops,error) ; validate/bracket expression for parameter
 n en,ex,pn,word
 i par="" q  ; niladic
 s en="f"
 i par?1u1":"1a.e s word(en,1)=par,entpar(par)="" g pars3
 s ex(1)=par d word^%mgsqle1(en,.ex,.word,.ops,.error) i $l(error) q
 d vrfy^%mgsqle1(en,.word,.ops,.error) i $l(error) q
 d brac^%mgsqle1(en,.word,.ops,.error) i $l(error) q
pars3 f i=1:1 q:'$d(word(en,i))  s sqlfn(fn,"p",parn,i)=word(en,i)
 k word(en)
 q
 ;
funlin(funlin,error) ; extract function & parameters wrd from funlin
 n obr,cbr,chr,i,wrd
 s (obr,cbr)=0 f i=1:1:$l(funlin) s chr=$e(funlin,i) i "()"[chr,$l($e(funlin,1,i),"""")#2 s:chr="(" obr=obr+1 s:chr=")" cbr=cbr+1 i obr=cbr q
 s wrd=$e(funlin,1,i)
 i 'obr!(obr'=cbr) s error="error in function "_wrd,error(5)="HY000" q wrd
 q wrd
 ;

%mgsqle1
%mgsqle1 ;(CM) SQL : Bracket expression in word array ; 28 Jan 2022  10:00 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqle1") q
 ;
sqlvar(ctx,word,var) ; sql variables in expression
 n no
 i $d(word("sqv",ctx,"x",var)) q
 s no=$i(word("sqv",ctx,"e"))
 s word("sqv",ctx,"e",no)=var,word("sqv",ctx,"x",var)=no
 q
 ;
exbr(tmp,ops,error) ; extract individual bracketed sub-statements and set in temporary array
 n sn,i,ok,wn1,wn2
 s sn=0
exbr1 i '$d(tmp("x",0,"(")) g exbrx
 s ok=0,wn1="" f  s wn1=$o(tmp("e",0,wn1)) q:wn1=""!ok  i tmp("e",0,wn1)="(" s wn2=wn1 f  s wn2=$o(tmp("e",0,wn2)) q:wn2=""  q:tmp("e",0,wn2)="("  i tmp("e",0,wn2)=")" s ok=1 q
 s wn1=wn1-1
 i 'ok s error="error in bracketing",error(5)="HY000" q
 s sn=sn+1,wn=0 s tmp("e",0,wn1)="{{"_sn_"{{" k tmp("x",0,"(",wn1)
 f  s wn1=$o(tmp("e",0,wn1)),wrd=tmp("e",0,wn1)  k tmp("e",0,wn1) d tmpxk(.tmp,0,wrd,wn1) q:wn1=wn2  s wn=wn+1,tmp("e",sn,wn)=wrd d tmpxs(.tmp,sn,wrd,wn,.ops)
 g exbr1
exbrx ; tidy up holes in primary expression (if necessary)
 i '$d(tmp("e",1)) q
 k tmp("x",0) s wn="" f i=1:1 s wn=$o(tmp("e",0,wn)) q:wn=""  s wrd=tmp("e",0,wn) k tmp("e",0,wn) s tmp("e",0,i)=wrd d tmpxs(.tmp,0,wrd,i,.ops)
 q
 ;
oper(tmp,ops,error) ; for each sub-statement parse operator string in order of precedence
 n sn,op,opn
 f sn=0:1 q:'$d(tmp("e",sn))  f opn=1:1:$l(ops,":") s op=$p(ops,":",opn) i op'="",op'="'" d oper1(.tmp,sn,op,.ops,.error)
 q
 ;
oper1(tmp,sn,op,ops,error) ; find all occurances of current operator in sub-statement
 n wn
 i '$d(tmp("x",sn,op)) q
 s wn="" f  s wn=$o(tmp("x",sn,op,wn)) q:wn=""  d obr(.tmp,sn,.wn),cbr(.tmp,sn,.wn)
 q
 ;
cbr(tmp,sn,wn) ; insert 'closed' bracket
 n obr,cbr,x,wrd
 s (obr,cbr)=0
 i '$d(tmp("e",sn,wn+1,"o")) f x=wn+1:1 q:'$d(tmp("e",sn,x))  s wrd=tmp("e",sn,x) s:$d(tmp("e",sn,x,"o")) obr=obr+tmp("e",sn,x,"o") s:$d(tmp("e",sn,x,"c")) cbr=cbr+tmp("e",sn,x,"c") i obr=cbr,ops'[(":"_wrd_":"),$d(tmp("e",sn,x+1)),tmp("e",sn,x+1)'=op q
 i $d(tmp("e",sn,wn+1,"o")) f x=wn+1:1 q:'$d(tmp("e",sn,x))  s wrd=tmp("e",sn,x) s:$d(tmp("e",sn,x,"o")) obr=obr+tmp("e",sn,x,"o") s:$d(tmp("e",sn,x,"c")) cbr=cbr+tmp("e",sn,x,"c") i obr>0,obr=cbr,$d(tmp("e",sn,x,"c")),$d(tmp("e",sn,x+1)),tmp("e",sn,x+1)'=op q
 i '$d(tmp("e",sn,x)) s x=x-1
 s tmp("e",sn,x,"c")=$s($d(tmp("e",sn,x,"c")):tmp("e",sn,x,"c")+1,1:1),wn=x
 q
 ;
obr(tmp,sn,wn) ; insert 'open' bracket
 n obr,cbr,x,wrd
 s (cbr,obr)=0
 i '$d(tmp("e",sn,wn-1,"c")) s x=wn-1
 i $d(tmp("e",sn,wn-1,"c")) f x=wn-1:-1:1 s:$d(tmp("e",sn,x,"c")) cbr=cbr+tmp("e",sn,x,"c") s:$d(tmp("e",sn,x,"o")) obr=obr+tmp("e",sn,x,"o") i cbr>0,cbr=obr q
 i '$d(tmp("e",sn,x)) q
 i $d(tmp("e",sn,x-1)),tmp("e",sn,x-1)="'" s x=x-1
 s tmp("e",sn,x,"o")=$s($d(tmp("e",sn,x,"o")):tmp("e",sn,x,"o")+1,1:1)
 q
 ;
asm(en,tmp,word) ; re-assemble complete statement from processed sub-statements
 n sn1,wn,wn1
 s sn1=0,wn1=0,wn=0
 d asm1(en,.tmp,.word,.wn,sn1,wn1)
 q
 ;
asm1(en,tmp,word,wn,sn1,wn1) ; assemble statement
 n wrd,i
asm11 s wn1=wn1+1 i '$d(tmp("e",sn1,wn1)) q
 s wrd=tmp("e",sn1,wn1)
 i $d(tmp("e",sn1,wn1,"o")) f i=1:1:tmp("e",sn1,wn1,"o") s wn=wn+1,word(en,wn)="("
 i $e(wrd,1,2)="{{" d asm2(en,.tmp,.word,.wn,wrd)
 i $e(wrd,1,2)'="{{" s wn=wn+1,word(en,wn)=wrd
 i $d(tmp("e",sn1,wn1,"c")) f i=1:1:tmp("e",sn1,wn1,"c") s wn=wn+1,word(en,wn)=")"
 g asm11
 ;
asm2(en,tmp,word,wn,wrd) ; swap out to nested sub expression
 n sn1,wn1
 s sn1=$p(wrd,"{{",2)
 s wn1=0
 d asm1(en,.tmp,.word,.wn,sn1,wn1)
 q
 ;
brac(en,word,ops,error) ; bracket expression in word array
 n i,tmp,wrd
 f i=1:1 q:'$d(word(en,i))  s wrd=word(en,i),tmp("e",0,i)=wrd d tmpxs(.tmp,0,wrd,i,.ops) k word(en,i)
 d exbr(.tmp,.ops,.error) i $l(error) g brace
 d oper(.tmp,.ops,.error)
 d asm(en,.tmp,.word)
brace ; exit
 q
 ;
word(en,ex,word,ops,error) ; generate word array from expression lines en(1->n)
 n lin,ln
 s lin="" f ln=1:1 q:'$d(ex(ln))  s lin=lin_ex(ln)
 d word1(lin,.word,.fun,.ops,.error)
 d type(en,.word)
 q
 ;
word1(lin,word,fun,ops,error) ; decompose line lin
 n pn,wn,i,wrd,wrd1,wrdlc,nwrd,obr,cbr,like,mpm,in,between,extvar,ok,in,like,mpm,between,wk,c,ca,cz,sa,sz
 f  q:$e(lin)'=" "  s lin=$e(lin,2,999)
 s wk=lin,lin="" f i=1:1:$l(wk) d
 . s c=$e(wk,i),sa="",sz=""
 . s ca=$s(i>1:$e(wk,i-1),1:"")
 . s cz=$e(wk,i+1)
 . i c="*",ca="(",cz=")" s lin=lin_c q
 . i c?1p,$d(ops(c)) d
 . . i ca'="",'$d(ops(ca)),ca'=" " s sa=" "
 . . i cz'="",'$d(ops(cz)),cz'=" " s sz=" "
 . . q
 . s lin=lin_sa_c_sz
 . q
 s pn=0,wn=0,in="",like="",mpm="",between=""
word2 s pn=pn+1 i pn>$l(lin," ") q
 s wrd=$p(lin," ",pn)
 f i=pn+1:1 q:i>$l(lin," ")!($l(wrd,"""")#2)  s wrd=wrd_" "_$p(lin," ",i),pn=pn+1
 s obr=0 f i=1:1:$l(wrd) q:$e(wrd)'="("  s obr=obr+1,wrd=$e(wrd,2,999) i $d(in) q
 i wrd="" s cbr=0 g word3
 s wrdlc=$$lcase^%mgsqls(wrd)
 i wrd="missing_value" s wrd="$$mv^%mgsqls()"
 i wrd="current_date" s wrd="$$cdate^%mgsqls()"
 i wrd="current_time" s wrd="$$ctime^%mgsqls()"
 i wrd="current_timestamp" s wrd="$$ts^%mgsqls()"
 i wrdlc?1"lower(".e1")" s wrd="$$lcase^%mgsqls("_$e(wrd,7,9999)
 i wrdlc?1"upper(".e1")" s wrd="$$ucase^%mgsqls("_$e(wrd,7,9999)
 i wrdlc?1"trim(".e1")" s wrd="$$trim^%mgsqls("_$e(wrd,7,9999)
 i wrdlc?1"rtrim(".e1")" s wrd="$$rtrim^%mgsqls("_$e(wrd,7,9999)
 i wrdlc?1"ltrim(".e1")" s wrd="$$ltrim^%mgsqls("_$e(wrd,7,9999)
 i wrdlc?1"{d".e1"}" s wrd="$$edate^%mgsqls("_$e(wrd,3,$l(wrd)-1)_","""")"
 i wrd?1"$"1a.e1"("1e.e s wrd=$$func(lin,.pn,wrd,.error) i $l(error) q
 i wrd?1"$$"1a.e1"("1e.e s wrd=$$func(lin,.pn,wrd,.error) i $l(error) q
 i wrd?1a.a1"("1e.e1")".e s wrd1=$p(wrd,")",1)_")" d sqlvar(0,.word,wrd1) s wrd=%z("dsv")_wrd1_%z("dsv")_$p(wrd,")",2,999)
 s cbr=0 f i=$l(wrd)-1:1 q:$e(wrd,$l(wrd))'=")"  s wrd=$e(wrd,1,$l(wrd)-1),cbr=cbr+1 i $d(in) q
 i wrd=""!(wrd[%z("df"))!(wrd[%z("dev"))!(wrd[%z("dsv"))!(wrd[%z("dq")) g word3
 i wrd?1"{"1a.e,wrd=lin d sqlvar(1,.word,wrd) s wrd=%z("dev")_wrd_%z("dev") g word3
 ; translate logical operators into physical equivalents
 i wrdlc="is" s nwrd=$$ucase^%mgsqls($p(lin," ",pn+1)) i nwrd="not" s wrd=wrd_" "_nwrd,wrdlc=wrdlc_" "_nwrd,pn=pn+1
 i wrdlc="not" s nwrd=$$ucase^%mgsqls($p(lin," ",pn+1)) i nwrd="like"!(nwrd="in")!(nwrd="exists")!(nwrd="after")!(nwrd="before")!(nwrd="null") s wrd=wrd_" "_nwrd,wrdlc=wrdlc_" "_nwrd,pn=pn+1
 i like'="" s like=$$like^%mgsqle2(.wrd,.error) q:$l(error)  g word3
 i wrd="like"!(wrd="not like") s like=wn
 i mpm'="" s mpm=$$mpm^%mgsqle2(.wrd,.error) q:$l(error)  g word3
 i wrd="?"!(wrd="'?") s mpm=wn
 i in'="" s in=$$in^%mgsqle2(en,.wrd,.word,.wn,obr,cbr,.error) q:$l(error)  g word2
 i wrd="in"!(wrd="not in"),$p(lin," ",pn+1)'[%z("dq") s in=wn
 i between'="" s between=$$between^%mgsqle2(en,.wrd,.word,.wn,obr,cbr,.error) q:$l(error)  g word2
 i wrd="between"!(wrd="not between") s between=wn
 i wrdlc="is" s wrd="=" g word3
 i wrdlc="is not" s wrd="'=" g word3
 i wrdlc="null" s wrd="""""" g word3
 i wrd="<>"!(wrd="!=") s wrd="'=" g word3
 s wrd=$s(wrd=">=":"'<",wrd="<=":"'>",wrd="and":"&",wrd="or":"!",wrd="not":"'",wrd="like":"?",wrd="not like":"'?",1:wrd)
 i $d(ops(wrd)) g word3
 i wrd?1"""".e1"""",($l(wrd,"""")#2) g word3
 i wrd[%z("ds") g word3
 i wrd?.1"-".n.1"."1n.n g word3
 i $e(wrd)="[" s wrd=$e(wrd,2,999)
 i $e(wrd,$l(wrd))="]" s wrd=$e(wrd,1,$l(wrd)-1)
 i wrd?1a.e1"."1a.e!(wrd?.1"."1a.e) s extvar=0,ok=$$word4(wrd) i ok d sqlvar(0,.word,wrd) s wrd=%z("dsv")_wrd_%z("dsv") g word3
 i wrd?1a.e1"."1"{".e1"}"1"."1a.e d sqlvar(0,.word,wrd) s wrd=%z("dsv")_wrd_%z("dsv") g word3
 i wrd?1":"1a.e s wrd=$p(wrd,":",2,999),extvar=1,ok=$$word4(wrd) i ok d sqlvar(1,.word,wrd) s wrd=%z("dev")_wrd_%z("dev") g word3
 s error="invalid item "_wrd,error(5)="HY000" q
word3 ; valid word found
 f i=1:1:obr s wn=wn+1,word(en,wn)="("
 i wrd="exists"!(wrd="not exists") s wn=wn+1,word(en,wn)=1
 i $l(wrd) s wn=wn+1,word(en,wn)=wrd
 f i=1:1:cbr s wn=wn+1,word(en,wn)=")"
 g word2
 ;
word4(wrd) ; validate sql variable wrd
 n ok,wrd1
 s ok=0,wrd1=wrd
 s wrd1=$tr(wrd1,"-_","")
 f  q:wrd1'["."  s wrd1=$p(wrd1,".",1)_$p(wrd1,".",2,999)
 i 'extvar,wrd1["$" s wrd1=$p(wrd1,"$",1)_$p(wrd1,"$",2,999)
 i wrd1[";" s wrd1=$p(wrd1,";",1)_$p(wrd1,";",2,999)
 i wrd1?1a.an s ok=1 q ok
 q ok
 ;
func(lin,pn,wrd,error) ; extract function
 n lin1,spcn,funlin
 s spcn=$l(wrd," ")-1
 s funlin=wrd_" "_$p(lin," ",pn+1,999)
 s lin1=$e(funlin,$l(wrd)+1,999)
 s lin1=$p(lin1," ",1) i lin1'?.")" s error="error in syntax after function "_wrd,error(5)="HY000" q wrd
 s wrd=%z("df")_wrd_%z("df")_lin1,pn=pn+$l(wrd," ")-1-spcn
 q wrd
 ;
vrfy(en,word,ops,error) ; verify statement in word array
 n wn,wtyp,lwtyp,obr,cbr,wrd,wrd1
 s wn=0,(wtyp,lwtyp)="",(obr,cbr)=0
vrfy1 s wn=wn+1 i '$d(word(en,wn)) g vrfyx
 s wrd=word(en,wn)
 i wrd="(" s obr=obr+1 g vrfy1
 i wrd=")" s cbr=cbr+1 g:cbr'>obr vrfy1 s error="error in bracketing",error(5)="HY000" q
 i wrd="'" s wrd1="" s:$d(word(en,wn+1)) wrd1=word(en,wn+1) i wrd1'[%z("dev"),wrd1'[%z("dsv"),wrd1'[%z("df"),wrd1'="(" s error="the 'not' operator must preceed a variable or sub-expression",error(5)="HY000" q
 i wrd="'" g vrfy1
 s wtyp=$s($d(ops(wrd)):"o",1:"c")
 i wtyp="o",lwtyp'="c" s error=$$error(en,.word,wn,"an operator must be preceeded by a constant"),error(5)="HY000" q
 i wtyp="c",$l(lwtyp),lwtyp'="o" s error=$$error(en,.word,wn,"a constant must be preceeded by an operator"),error(5)="HY000" q
 i '$l(lwtyp),wtyp'="c" s error=$$error(en,.word,wn,"the first word in an expression should be a constant"),error(5)="HY000" q
 s lwtyp=wtyp
 g vrfy1
vrfyx ; line verification complete
 i lwtyp'="c" s error=$$error(en,.word,wn,"the last word in an expression should be a constant"),error(5)="HY000" q
 i cbr'=obr s error="the number of open and closed brackets should be equal",error(5)="HY000" q
 q
 ;
error(en,word,wn,error) ; form helpful error message
 n x,y,i
 s x="" f i=wn-5:1:wn+5 i $d(word(en,i)) s y=word(en,i) s:y[%z("dsv") y=$p(y,%z("dsv"),2) s:y[%z("dev") y=$p(y,%z("dev"),2) s x=x_" "_y
 s error=error_":"_x
 q error
 ;
type(en,word) ; work out pointer to data type
 n var,wrd
 s var="" f  s var=$o(word("sqv",1,"x",var)) q:var=""  i '$d(word("sqv",1,"type",var)) d type1(en,.word,var)
 q
 ;
type1(en,word,var) ; find variable in expression
 n wn,i,wrd,alias,tname,cname,qnum,ok
 f wn=1:1 q:'$d(word(en,wn))  i word(en,wn)[%z("dev"),$p(word(en,wn),%z("dev"),2)=var q
 i '$d(word(en,wn)) q
 s ok=0 f i=wn:1:1 q:'$d(word(en,i))  s wrd=word(en,i) q:wrd="&"!(wrd="!")  i wrd[%z("dsv") s wrd=$p(wrd,%z("dsv"),2) i wrd?1a.e1"."1a.e s ok=1 q
 i ok g type2
 s ok=0 f i=wn:-1:1 s wrd=word(en,i) q:wrd="&"!(wrd="!")  i wrd[%z("dsv") s wrd=$p(wrd,%z("dsv"),2) i wrd?1a.e1"."1a.e s ok=1 q
 i ok g type2
 q
type2 ; file type
 s alias=$p(wrd,".",1),cname=$p(wrd,".",2)
 s ok=0 f qnum=1:1 q:'$d(^mgtmp($j,"from","x",qnum))  i $d(^mgtmp($j,"from","x",qnum,alias)) s tname=$p(^mgtmp($j,"from",qnum,^mgtmp($j,"from","x",qnum,alias)),"~",1),ok=1 q
 i ok s word("sqv",1,"type",var)=tname_"."_cname
 q
 ;
tmpxs(tmp,sn,wrd,wn,ops) ; set node in snx array
 i $l(wrd)>32 q
 i '$d(ops(wrd)),wrd'="(",wrd'=")" q
 s tmp("x",sn,wrd,wn)=""
 q
 ;
tmpxk(tmp,sn,wrd,wn) ; remove node from snx array
 i $l(wrd)>32 q
 k tmp("x",sn,wrd,wn)
 q
 ;

%mgsqle2
%mgsqle2 ;(CM) SQL : Compile code for an expression ; 28 Jan 2022  10:00 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqle2") q
 ;
comp(en,outv,word,sqlfn,code,error) ; compile expression
 n wrdl
 d lines(en,.word,.wrdl)
 d code(en,.wrdl,.sqlfn,.word,outv,.code)
compe ; exit
 q
 ;
addline(code,line) ; add line of code
 s code($i(code))=line
 q
 ;
lines(en,word,wrdl) ; translate word array into line arrays for coding
 n wrd,lno,wno,wno1,obr,cbr
 s lno=0
lines1 s (wno,obr)=0,cbr=""
 f  s wno=$o(word(en,wno)) q:wno=""  s wrd=word(en,wno) q:wrd=")"  i wrd="(" s obr=wno
 k word(en,obr)
 s lno=lno+1
 s cbr=wno i $l(cbr) s word(en,cbr)=%z("de")_lno_%z("de")
 s wno1=0,wno=obr
 f  s wno=$o(word(en,wno)) q:wno=""!(wno=cbr)  s wno1=wno1+1,wrdl(lno,wno1)=word(en,wno) k word(en,wno)
 i obr=0 q
 g lines1
 ;
code(en,wrdl,sqlfn,word,outv,code) ; generatate code for each line
 n ln,exp,expx,offs,tmp,line
 s ln=0,expx="",offs=$l(outv)+9
code1 s ln=ln+1 i '$d(wrdl(ln)) g code3
 s exp=$$line(ln,.wrdl,.sqlfn,.word,.code,.error) i $l(error) q
 f  q:exp'[%z("de")  d code2(en,.exp,.tmp,offs)
 s tmp(ln)=exp
 g code1
code3 ; insert line(s) into routine
 s ln=ln-1
 s tmp(ln)=" "_"s"_" "_%z("dsv")_outv_%z("dsv")_"="_tmp(ln)
 s ln="" f  s ln=$o(tmp(ln)) q:ln=""  s line=tmp(ln) d addline(.code,line)
 q
 ;
code2(en,exp,tmp,offs) ; try to insert sub-lines into current line
 n ln
 s ln=$p(exp,%z("de"),2)
 i ($l(exp)+$l(tmp(ln))+offs)<240 s exp=$p(exp,%z("de"),1)_"("_tmp(ln)_")"_$p(exp,%z("de"),3,999) k tmp(ln) q
 s exp=$p(exp,%z("de"),1)_%z("pv")_"("_ln_")"_$p(exp,%z("de"),3,999)
 s tmp(ln)=" "_"s"_" "_%z("pv")_"("_ln_")="_tmp(ln)
 q
 ;
line(ln,wrdl,sqlfn,word,code,error) ; process individual line
 n wno,wrd,exp
 s wno=0,exp=""
line1 s wno=wno+1 i '$d(wrdl(ln,wno)) q exp
 s wrd=wrdl(ln,wno)
 f  q:wrd'[%z("df")  s wrd=$$fun(wrd,.sqlfn) q:$l(error)
 i error'="" q exp
 i wrd?1a.u1"."1a.e!(wrd?1a.u1"("1a.e1")") d sqlvar^%mgsqle1(0,.word,wrd) s wrd=%z("dsv")_wrd_%z("dsv")
 s exp=exp_wrd
 g line1
 ;
fun(wrd,sqlfn) ; generate code for in-line functions
 n code,fn,pre,post
 s code=""
 s pre=$p(wrd,%z("df"),1),post=$p(wrd,%z("df"),3,999)
 s fn=$p(wrd,%z("df"),2)
 s fun=sqlfn(fn),fun=$p(fun,"(",1)
 i fun?1"$"1a.e s code=$$m(.sqlfn,fn,fun)
 i fun?1"$$"1a.e s code=$$ext(.sqlfn,fn,fun)
 s code=pre_code_post
 q code
 ;
ext(sqlfn,fn,fun) ; generate code for m extrinsic function
 n line,sub,i,com
 i fun="$$trim^%mgsqls",'$d(sqlfn(fn,"p",2)) s sqlfn(fn,"p",2,1)=""" """
 i fun="$$rtrim^%mgsqls",'$d(sqlfn(fn,"p",2)) s sqlfn(fn,"p",2,1)=""" """
 i fun="$$ltrim^%mgsqls",'$d(sqlfn(fn,"p",2)) s sqlfn(fn,"p",2,1)=""" """
 s line=fun_"("
 s sub=fun_"("
 s com="" f i=1:1 q:'$d(sqlfn(fn,"p",i))  s sub=sub_com_sqlfn(fn,"p",i,1),com=","
 s sub=sub_")"
 s line=sub
 ;b
 q line
 ;
m(sqlfn,fn,fun) ; m function
 n line,sub,i,com
 s line=fun_"("
 s sub=fun_"("
 s com="" f i=1:1 q:'$d(sqlfn(fn,"p",i))  s sub=sub_com_sqlfn(fn,"p",i,1),com=","
 s sub=sub_")"
 s line=sub
 q line
 q
 ;
in(en,wrd,word,wn,obr,cbr,error) ; form expression for sql style 'in'
 n arg,i,op,andor,eq,obr1,cbr1,x,dlm,pre,post,arg,args,var,spc
 i obr'=1,'cbr s error="incorrect bracketing around arguments of the 'in' operator",error(5)="HY000" g inx
 s op=word(en,wn)
 i op="in" s andor="or",eq="="
 i op="not in" s andor="and",eq="'="
 s arg=wrd s args=$$arg^%mgsqle(arg,.args)
 s (obr1,cbr1)=0,var="",spc="" f wn=wn-1:-1:1 s x=word(en,wn) s:x="(" obr1=obr1+1 s:x=")" cbr1=cbr1+1 s var=x_spc_var,spc=" " i obr1=cbr1 s wn=wn-1 q
 s x="",dlm="" f i=1:1:args s x=x_dlm_var_" "_eq_" "_args(i),dlm=" "_andor_" "
 s x="( "_x_" )",pre=$p(lin," ",1,pn),post=$p(lin," ",pn+1,999)
 s lin=pre_" "_x i $l(post) s lin=lin_" "_post
inx ; exit
 q ""
 ;
between(en,wrd,word,wn,obr,cbr,error) ; form expression for sql style 'between'
 n arg,i,op,andor,eq1,eq2,obr1,cbr1,x,dlm,pre,post,arg,args,var,spc
 i obr'=1,'cbr s error="incorrect bracketing around arguments of the 'between' operator",error(5)="HY000" g betweenx
 s op=word(en,wn)
 i op="between" s andor="and",eq1=">=",eq2="<="
 i op="not between" s andor="or",eq1="<",eq2=">"
 s arg=wrd s args=$$arg^%mgsqle(arg,.args) i args<2 s error="the 'between' operator takes two arguments",error(5)="HY000" g betweenx
 s (obr1,cbr1)=0,var="",spc="" f wn=wn-1:-1:1 s x=word(en,wn) s:x="(" obr1=obr1+1 s:x=")" cbr1=cbr1+1 s var=x_spc_var,spc=" " i obr1=cbr1 s wn=wn-1 q
 s x="( "_var_" "_eq1_" "_args(1)_" "_andor_" "_var_" "_eq2_" "_args(2)_" )",pre=$p(lin," ",1,pn),post=$p(lin," ",pn+1,999)
 s lin=pre_" "_x i $l(post) s lin=lin_" "_post
betweenx ; exit
 q ""
 ;
like(wrd,error) ; form expression for sql style pattern-match
 n wrd1,chr,i
 i wrd'?1""""1e.e1"""",wrd'[%z("ds") s error="invalid 'like' argument "_wrd,error(5)="HY000" q ""
 i wrd[%z("ds") s wrd=$$rstring^%mgsqlp(wrd)
 s wrd1=wrd i wrd?1""""1e.e1"""" s wrd1=$e(wrd,2,$l(wrd)-1)
 s wrd="" f i=1:1:$l(wrd1) s chr=$e(wrd1,i) s wrd=wrd_$s(chr="_":"1e",chr="%":".e",1:1_$c(34)_chr_$c(34))
 q ""
 ;
mpm(wrd,error) ; form expression for m style pattern-match
 n cn,chr,pchr,x,i
 s cn=0,chr=""
 i wrd[%z("ds") s wrd=$$rstring^%mgsqlp(wrd)
mpm1 s pchr=chr,cn=cn+1 i cn>$l(wrd) g mpmx
 s chr=$e(wrd,cn)
 i chr="."!(chr?1n) f i=cn+1:1 s x=$e(wrd,i) q:x'?1n&(x'=".")  s cn=cn+1,chr=chr_x
 i chr?1u f i=cn+1:1 s x=$e(wrd,i) q:x'?1u  s cn=cn+1,chr=chr_x
 i chr?1a.u f i=1:1:$l(chr) s x=$e(chr,i) i "acelnpu"'[x s error="invalid pattern "_x_" in pattern match "_wrd,error(5)="HY000" q
 i $e(error) g mpmx
 i chr="""" f i=cn+1:1:$l(wrd) s x=$e(wrd,i) q:x'=""""&($l(chr,"""")#2)  s cn=cn+1,chr=chr_x
 i chr["""",'($l(chr,"""")#2) s error="invalid element "_chr_" in pattern match "_wrd,error(5)="HY000" g mpmx
 i pchr="",chr?.n.1".".n g mpm1
 i pchr'="",pchr?.n.1".".n,chr?1a.u!(chr["""") g mpm1
 i pchr'="",pchr?1a.u!(pchr[""""),chr?.n.1".".n g mpm1
 s error="invalid pattern match "_wrd,error(5)="HY000"
mpmx i chr'?1a.u,chr'["""" s error="invalid pattern match "_wrd,error(5)="HY000"
 q ""
 ;

%mgsqln
%mgsqln ;(CM) MGSQL odbc ; 28 Jan 2022  10:01 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqln") q
 ;
main ; start xDBC service
 n %user,%zi,%zo,dbid,data,info,line,status,error,cmnd
 s $zt="loope^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":loope^%mgsqln"
 k ^mgtmp($j)
 ; d logevent^%mgsqls("Process: "_$j,"Initialize Connection","ODBC")
 s data=$$v^%mgsql()
 d send(data,$l(data),0,"c",1)
loop ; next command
 s $zt="loope^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":loope^%mgsqln"
 k %zi,%zo,info,line,error
 s status=0,error="",%user=""
 s dbid=$$schema^%mgsql("")
 s %zi(0,"stmt")=$$read(.head,.cmnd,.size,.data)
 ; d logevent^%mgsqls("stmt="_%zi(0,"stmt")_"; cmnd="_cmnd_"; data="_data,"start","ODBC")
 i cmnd="i" s %user=$$info(dbid,data) g loop
 i cmnd="a" s status=$$typ^%mgsqln2(dbid,data,.%zi,.%zo) g loop
 i cmnd="s" s status=$$sql(dbid,data,.%zi,.%zo,%user,.info) i status=0 d send(%zo("xr"),$l(%zo("xr")),0,%zo("xc"),0) g loop
 i status=11 tstart  k info("tp",0,"start") s status=$$sql2(dbid,data,.%zi,.%zo,.info) i status=0 d send(%zo("xr"),$l(%zo("xr")),0,%zo("xc"),0) g loop
 i status=12 tstart  k info("tp",0,"start") d send(%zo("xr"),$l(%zo("xr")),0,%zo("xc"),0) g loop
 i status=13 tcommit  k info("tp",0,"commit") d send(%zo("xr"),$l(%zo("xr")),0,%zo("xc"),0) g loop
 i status=14 trollback  k info("tp",0,"rollback") d send(%zo("xr"),$l(%zo("xr")),0,%zo("xc"),0) g loop
 i cmnd="b" s status=$$prp(dbid,data,.%zi,.%zo,) g loop
 i cmnd="t" s status=$$tab^%mgsqln1(dbid,data,.%zi,.%zo) g loop
 i cmnd="h" s status=$$col^%mgsqln1(dbid,data,.%zi,.%zo) g loop
 i cmnd="n" s status=$$stt^%mgsqln1(dbid,data,.%zi,.%zo) g loop
 i cmnd="k" s status=$$pky^%mgsqln1(dbid,data,.%zi,.%zo) g loop
 i cmnd="m" s status=$$fky^%mgsqln1(dbid,data,.%zi,.%zo) g loop
 i cmnd="p" s status=$$prc^%mgsqln1(dbid,data,.%zi,.%zo) g loop
 i cmnd="q" s status=$$pcc^%mgsqln1(dbid,data,.%zi,.%zo) g loop
 i cmnd="f" s status=$$fetch(dbid,data,.%zi,.%zo) g loop
 d logerror^%mgsqls("MGSQL: bad message: "_cmnd,"ODBC Error")
 g loop
loope ; error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d logerror^%mgsqls("MGSQL:loop: "_error,"M Exception")
 d send(error,$l(error),0,"e",0)
 q
 ;
acc(user,dbid,tname,context,error,info) ; see if access is allowed
 s error=""
 q 1
 ;
base() ; get base for chunk headers
 q 10
 q
 ;
info(dbid,data) ; information
 n nv,uci,user,error
 s $zt="infoe^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":infoee^%mgsqln"
 s error=""
 ; d logevent^%mgsqls(data,"Information","ODBC")
 d nv(data,.nv)
 s uci=$g(nv("UCI"))
 s user=$g(nv("User"))
 i uci'="" s rc=$$cuci^%mgsqls(uci)
 s data=""
 s data=data_"mgv="_$$v^%mgsql()_$c(13,10)
 s data=data_"$zv="_$zv_$c(13,10)
 s data=data_$c(13,10)
 d send(data,$l(data),0,"i",1) ; send data
 q user
infoe ; error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d logerror^%mgsqls("MGSQL:info: "_error,"M Exception")
 d send(error,$l(error),0,"e",0)
 q ""
 ;
prp(dbid,data,%zi,%zo,%user) ; prepare sql
 n line,error
 s $zt="prpe^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":prpe^%mgsqln"
 k ^mgsqls($j,%zi(0,"stmt"))
 d sqline(data,.line)
 d logarray^%mgsqls(.line,"prp() array","ODBC")
 s error=""
 s response=$$sql1(dbid,.line,.%zi,.%zo,%user,.info,.error) i $l(error) g prperror
 d send(response,$l(response),0,"b",0) ; send data
 q
prperror ; prepare sql error
 d logerror^%mgsqls(error,"SQL Error")
 d send(error,$l(error),0,"e",0)
 q
prpe ; M error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d logerror^%mgsqls("MGSQL:prp: "_error,"M Exception")
 d send(error,$l(error),0,"e",0)
 q
 q
 ;
sql(dbid,data,%zi,%zo,%user,info) ; sql
 n at,tname,r,sn,dtyp,i,x,line,status,error
 s status=0,error=""
 d sqline(data,.line,.%zi)
 d logarray^%mgsqls(.line,"sql()","ODBC")
 s error=""
 s response=$$sql1(dbid,.line,.%zi,.%zo,%user,.info,.error) i $l(error) g sqlerror
 s %zo("xr")=response,%zo("xrl")=$l(response),%zo("xc")="s"
 i $d(info("tp",0)) d  i status=11 q status
 . i $d(info("tp",0,"start")),$g(%zo("routine"))'="" s status=11 q
 . i $d(info("tp",0,"start")) s status=12
 . i $d(info("tp",0,"commit")) s status=13
 . i $d(info("tp",0,"rollback")) s status=14
 . q
 i $g(%zo("routine"))="" q status
 s ok=$$sql2(dbid,data,.%zi,.%zo,.info)
 q status
sqlerror ; sql error
 d logerror^%mgsqls(error,"SQL Error")
 i $g(error(5))="" s error(5)="HY000"
 s %zo("xr")=":"_$g(error(5))_":"_error,%zo("xrl")=$l(error),%zo("xc")="e"
 ;d send(":"_$g(error(5))_":"_error,$l(error),0,"e",0)
 q status
 ;
sql1(dbid,line,%zi,%zo,%user,info,error) ; sql - compile query
 n i,x,qid,cname,cname,dtyp,ag,sn,response
 s error="",response=""
 k ^mgsqls($j,%zi(0,"stmt"))
 s %zo("routine")=$$main^%mgsqlx(dbid,.line,.info,.error)
 i $l(error) q error
 s qid=$g(info("qid")) i qid="" s response=response_$c(13,10) q response
 s x="" f  s x=$o(^mgsqlx(1,dbid,qid,"t",x)) q:x=""  i '$$acc(%user,"0",x,0,.error,.info) s error="No Permission",error(5)="42000" q
 i $l(error) q error
 s response="" f i=1:1 q:'$d(^mgsqlx(1,dbid,qid,"out",i))  d
 . s r=$g(^(i))
 . s cname=$p(r,"~",1)
 . s tname=$p(r,"~",2)
 . s dtyp=$p(r,"~",8)
 . i cname["(" d  q
 . . s ag=$p(cname,"("),cname=$p($p(cname,"(",2,999),")",1)
 . . i cname["." s cname=$p(cname,".",2)
 . . s ag=$$trim^%mgsqln(ag," ")
 . . s cname=$$trim^%mgsqln(cname," ")
 . . i cname="" s cname="col_"_i
 . . s cname=ag_"-"_cname
 . . s cname=$tr(cname,":","")
 . . q
 . i cname["." s cname=$p(cname,".",2)
 . i cname="" s cname="xxx"
 . s response=response_i_"~"_cname_"~"_cname_"~"_tname_$c(13,10)
 . q
 s sn=i-1,response=response_$c(13,10)
 q response
 ;
sql2(dbid,sql,%zi,%zo,info) ; sql - run compiled code
 n ok,rc,error,status
 s $zt="sqle^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":sqle^%mgsqln"
 s error="",status=0
 i $d(info("sp")) d  g sql21
 . s ok=-1
 . s rc=$$so^%mgsqlz()
 . s @("ok=$$"_%zo("routine")_"(.%zi,.%zo)")
 . s rc=$$sc^%mgsqlz()
 . q
 i %zo("routine")'="" s @("ok=$$exec^"_%zo("routine")_"(.%zi,.%zo)")
 i $d(%zo("error")) s error=$g(%zo("error")),error(5)="HY000" g sqle1
sql21 ; sql success
 i $d(info("tp",0,"commit")) s status=13
 i $d(info("tp",0,"rollback")) s status=14
 ; d logevent^%mgsqls($g(zo("xr")),"sql2() response","ODBC")
 q status
sqle ; M error
 s error=$$error^%mgsqls(),error(5)="HY000"
sqle1 ; SQL error
 d logerror^%mgsqls("MGSQL:sql: "_error,"M Exception")
 s %zo("xr")=error,%zo("xrl")=$l(error),%zo("xc")="e"
 q status
 ;
fetch(dbid,data,%zi,%zo) ; get data
 n eod,rn,cn,val,line,error
 s $zt="fetche^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":fetche^%mgsqln"
 s rn=$i(^mgsqls($j,%zi(0,"stmt"),0,-10))
 i '$d(^mgsqls($j,%zi(0,"stmt"),0,rn)) s line="",eod=1 g fetchx
 s line="",eod=0
 f cn=1:1 q:'$d(^mgsqls($j,%zi(0,"stmt"),0,rn,cn))  d
 . s val=$g(^mgsqls($j,%zi(0,"stmt"),0,rn,cn))
 . s line=line_$$esize($l(val),4,$$base())_val
 . q
fetchx ; dispatch result
 d send(line,$l(line),%zi(0,"stmt"),"f",eod) ; send data
 q 0
fetche ; error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d logerror^%mgsqls("MGSQL:fetch: "_error,"M Exception")
 d send(error,$l(error),0,"e",0)
 q 0
 ;
read(head,cmnd,size,data) ; read
 s $zt="reade^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":reade^%mgsqln"
 s cmnd="",data="",size=0
 s head=$$recv(14,0)
 i head="" g reade
 s size=$$dsize($e(head,1,4),4,$$base())
 s cmnd=$e(head,14)
 s stmt=$$dsize($e(head,10,13),4,$$base())
 i 'size q stmt
 s data=$$recv(size,0)
 q stmt
reade ; error
 d logerror^%mgsqls($$error^%mgsqls(),"read error")
 q 0
 ;
recv(len,timeout)
 n data,get,got,x,y
 s data="",get=len,got=0
 f  r x#get s y=$l(x),data=data_x,got=got+y,get=get-y i got=len q
 q data
 ;
send(data,len,stmt,type,eod) ; send data
 n head
 s len=$l(data)
 s head=$$esize(len,4,$$base())_"0000"_$$esize(stmt,4,$$base())_eod_type
 w head_data d flush^%mgsqls()
 q
 ;
esize(dsize,len,base)
 q $c(dsize#256)_$c(((dsize\256)#256))_$c(((dsize\(256**2))#256))_$c(((dsize\(256**3))#256))
 n esize
 s esize=+dsize f  q:$l(esize)=4  s esize="0"_esize
 q esize
 ;
dsize(esize,len,base)
 q ($a(esize,4)*(256**3))+($a(esize,3)*(256**2))+($a(esize,2)*256)+$a(esize,1)
 s dsize=+esize
 q dsize
 ;
nv(data,nv) ; name/value pairs
 n i,ii,n,v
 f i=1:1:$l(data,$c(13,10)) s r=$p(data,$c(13,10),i) s n=$p(r,"=",1),v=$p(r,"=",2,9999) i n'="" s nv(n)=v
 q
 ;
sqline(sql,line,%zi)
 n i,x,y,ln
 s ln=0
 f i=1:1:$l(sql,$c(10))  s x=$p(sql,$c(10),i) s y=$p(x,$c(13),1) d
 . i y="" q
 . i y?1"$:iv"1n.n.e s %zi($p(y,":",2))=$p(y,":",5) q
 . s ln=ln+1,line(ln)=y
 . q
 q
 ;
oname(cname) ; name
 s cname=$tr(cname,"-","_")
 q at
 ;
op(op,type,val) ; operation
 s res=val ; q res
 s $zt="ope^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":ope^%mgsqln"
 i '$d(%sql("op",%zi(0,"stmt"),op,type)) q res
 s in=val x %sql("op",%zi(0,"stmt"),op,type) s res=$g(out1)
 ; double decode ???
 i res="",in'="" s res=in
 q res
ope ; error
 q res
 ;
test ; test
 k
 s %user="cm"
 s %zi(0,"stmt")=0
 ;s nv("sql")="select * from patient1 a"
 ;s nv("sql")="create table patient (num int not null, name varchar(255), address varchar(255), constraint pk_patient primary key (num))"
 s nv("sql")="select a.num, a.name from patient a"
 ;s nv("sql")="insert into patient (num, name) values (100003, ""verna hammond"")"
 ;s nv("sql")="update patient a set a.address = ""alvie"" where a.num = 100002"
 s data=$g(nv("sql"))
 ;d sql
 ;s data="tablename=admission"_$c(13,10)_$c(13,10)
 s data="tablename=patient"_$c(13,10)_$c(13,10)
 d col^%mgsqln1
 f i=1:1 q:'$d(^mgsqls($j,i,0))  w !,$g(^(0))
 q
 ;
accept(port) ; Concurrent TCP service (Cache, M21, MSM)
 s $zt="accepth^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":accepth^%mgsqln"
 d seterror^%mgsqls("")
 s port=+$g(port)
 i 'port s port=7041
 s ^%mgsql("server",port)=$j 
 ; +ydb
 ; s dev="server$"_$j
 ; -ydb
 ; +not_ydb
 i $$isidb^%mgsqls() s dev="|TCP|"_port
 i $$ism21^%mgsqls() s dev=9050
 i $$ismsm^%mgsqls() d
 . s dev=56
 . ; Determine OS type, NT or not
 . x "s nt=($zb($v(0,-4,2),#F,1)=10)"
 . q
 ; -not_ydb
 s errors=0
 s timeout=10
accept1 ; Main accept loop
 ; Set up Socket Server
 c dev
 ; +ydb
 ; ; open tcp server device
 ; open dev:(listen=port_":tcp":attach="server"):timeout:"socket"
 ; ;
 ; ; use tcp server device
 ; use dev
 ; write /listen(5) 
 ; ;
 ; -ydb
 ; +not_ydb
 i $$isidb^%mgsqls() o dev:(:port:"SA"::8192:8192:10):10 i '$t d logevent^%mgsqls("Server StartUp timed-out","Server","ODBC") g acceptx
 i $$ism21^%mgsqls() d
 . o dev:("TCP"::port):10 i '$t  d logevent^%mgsqls("Server StartUp timed-out","Server","ODBC") g acceptx
 . i $device d logevent^%mgsqls("Unable to establish new listening socket for port "_port_" "_$device,"Server","ODBC") g acceptx
 . q
 i $$ismsm^%mgsqls() q:'nt  d
 . o dev:(:$s(nt:8,1:0)):"TCP"
 . u dev s %lddb=$key
 . u dev:(%lddb) w /SOCKET("",port) s %xddb=$key,lza=$za,lzb=$zb,lzc=$zc
 . q
 u dev
 i $$isidb^%mgsqls() d $zu(125,6,"",0,3,0),$zu(125,6,"",1,3,0)
 i $$ism21^%mgsqls() d
 . w /listen(10)
 . i $device d logerror^%mgsqls("Unable to set queue depth on new listening socket for port "_port_" "_$device,"ODBC Error") g acceptx
 . i $zsocket(dev)="" d logerror^%mgsqls("Aborting server startup for port"_port,"ODBC Error") g acceptx
 . q
 ; -not_ydb
accept2 ; Accept connection
 s $zt="accepte^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":accepte^%mgsqln"
 ; +ydb
 ; set %znsock="",%znfrom="",timeout=30
 ; s ok=1 f  d  q:ok  i $d(^%mgsql("stop")) s ok=0 k ^%mgsql("stop") q
 ; . write /wait(timeout)
 ; . i $key'="" s ok=1 q
 ; . s ok=0
 ; . q
 ; i 'ok g acceptx
 ; d logevent^%mgsqls("incoming connection from "_$piece($key,"|",3)_", starting child server process","Server","ODBC")
 ; s childsock=$p($key,"|",2)
 ; u dev:(detach=childsock)
 ; s childproc="child^%mgsqln(port,port):(output="_"""SOCKET:"_childsock_""""_":input="_"""SOCKET:"_childsock_""""_")"
 ; j @childproc ; fork a process to handle the detached socket
 ; -ydb
 ; +not_ydb
 ; For Cache :
 i $$isidb^%mgsqls() d
 . r x
 . d logevent^%mgsqls("Incoming connection from "_$A($ZU(111,0),1)_"."_$A($ZU(111,0),2)_"."_$A($ZU(111,0),3)_"."_$A($ZU(111,0),4)_":"_($A($ZU(111,0),5)*256+$A($ZU(111,0),6))_", starting child server process","Server","ODBC")
 . i $v(0,-2,$ZU(40,0,1))\(2**16)#2 d logevent^%mgsqls("System shutting down","Server","ODBC") G acceptx
 . j child^%mgsqln(port,port):(:24):timeout
 . i '$t d logerror^%mgsqls("Unable to start a child process","ODBC Error") w *-2
 ; For M21
 i $$ism21^%mgsqls() d
 . w /wait
 . i $device d logerror^%mgsqls("Problem with listening socket"_$device,"ODBC Error") g acceptx
 . q:$key=""
 . s %MuNsock=$zsocket(dev)
 . d logevent^%mgsqls("Incoming connection from "_$zsocket(dev,%MuNsock,"REMOTEADDRESS")_" starting child server process","Server","ODBC")
 . ; Detach socket and start child process
 . i $s($$Validate^%MuDate($p($p($zv,"(",2),")",1),0)>59470:$zinfo(1,"svector","ostype"),1:1)=1 d
 . . u dev:(::::::%MuNsock)
 . . i $device d
 . . . d logerror^%mgsqls("Unable to detach new socket $device="_$device,"ODBC Error")
 . . . c dev:%MuNsock
 . . . d logerror^%mgsqls("Client socket closed $device="_$device,"ODBC Error")
 . . . g acceptx
 . s ok=1 
 . i $s($$Validate^%MuDate($p($p($zv,"(",2),")",1),0)>59470:$zinfo(1,"svector","ostype"),1:1)=1 j child^%mgsqln(port,%MuNsock)::timeout i '$T s ok=0
 . i $s($$Validate^%MuDate($p($p($zv,"(",2),")",1),0)>59470:$zinfo(1,"svector","ostype"),1:1)=2 j child^%mgsqln(port,%MuNsock):(::1:%MuNsock):timeout i '$T s ok=0
 . i 'ok d logerror^%mgsqls("Unable to start a child process","ODBC Error") w !
 . q
 ; For MSM
 i $$ismsm^%mgsqls() d
 . u dev:(%lddb) w /SOCKET("",port) s %xddb=$key,lza=$za,lzb=$zb,lzc=$zc
 . ;
 . ; Check for accept error
 . q:lzc&(lzb=-8)
 . i lzc d logerror^%mgsqls("Error on Server socket - restarting","ODBC Error") g acceptx
 . j child^%mgsqls(port,$zh(%xddb))::timeout s jobno=$zb
 . i jobno=0 d logerror^%mgsqls("Unable to start a child process","ODBC Error") w !
 . q
 ; -not_ydb
 ;
 s errors=0
 g accept2
acceptx ; Exit
 d logevent^%mgsqls("Closing Server","Server","ODBC")
 c dev
 q
 ;
accepte ; Error
 s $zt="accepth^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":accepth^%mgsqln"
 s errors=errors+1
 I $$error^%mgsqls()["INT" h
 d logerror^%mgsqls("Accept Loop - Program Error: "_$$error^%mgsqls(),"ODBC Error")
 i errors>7 d logerror^%mgsqls("Accept Loop - Too many errors - Closing Down","ODBC Error") h
 i $g(dev)'="" u dev
 ; +not_ydb
 i $$isidb^%mgsqls() w *-2
 i $$ism21^%mgsqls() w !
 i $$ismsm^%mgsqls() w !
 ; -not_ydb
 g accept2
accepth ; Halt
 h
 ;
child(pport,port) ; Child
 n nato,buf,x
 s $zt="childe^%mgsqln" ; new $ztrap set $ztrap="zgoto "_$zlevel_":childe^%mgsqln"
 i 'pport g child2
 ; +ydb
 ; u $principal
 ; -ydb
 ; +not_ydb
 i $$isidb^%mgsqls() d
 . u $ZU(53)
 . d $zu(132)  ; Set the principal device
 . ;u 0:(::"+BDWC"::8192:8192)
 . u 0:(::"+S"::8192:8192)
 . q
 i $$ism21^%mgsqls() d
 . n %MuSdev
 . s %MuSdev=9050
 . ; Attach socket
 . i $s($$Validate^%MuDate($p($p($zv,"(",2),")",1),0)>59470:$zinfo(1,"svector","ostype"),1:1)=1 o %MuSdev:(:::::port)
 . i $s($$Validate^%MuDate($p($p($zv,"(",2),")",1),0)>59470:$zinfo(1,"svector","ostype"),1:1)=2 o %MuSdev:(:::::::port)
 . u %MuSdev
 . ; Set principal device
 . i $zinfo(7,"pvector","pridev",%MuSdev)
 . q
 i $$ismsm^%mgsqls() d
 . x "v port+46::$j-$v(272,-4,4):2"
 . n addr s addr=$v(port+16,-3,0)
 . s %("ADDRESS")=$v(addr+13,-3,$v(addr+12,-3,1),9)
 . u 56:$zh(+port)
 . q
 ; -not_ydb
 ;
 s nato=0
child2 ; Child request loop
 i '($d(nato)#10) s nato=0
child3 ; Read Request
 i 'nato r *x
 i nato r *x:nato i '$t g childh ; No-activity timeout
 ; +not_ydb
 i $$ism21^%mgsqls(),$device,$device["EOF" g childh ; Client closed connection
 ; -not_ydb
 ; +ydb
 ; i x=0 d accepth ; client disconnect
 ; -ydb
 s buf=$c(x) f  r *x q:x=10!(x=0)  s buf=buf_$c(x)
 ; +ydb
 ; i x=0 d accepth ; client disconnect
 ; -ydb
 i buf="xDBC" g main^%mgsqln
 i buf?1U.E1"HTTP/"1N1"."1N1C s buf=buf_$c(10) g main^%mgsqlw
 g childh
 ;
childe ; Error
 d logerror^%mgsqls($$error^%mgsqls(),"ODBC Error")
 ; +not_ydb
 i $$error^%mgsqls()["READ" g childh
 ; -not_ydb
 ; +ydb
 ; i $$error^%mgsqls()["%gtm-e-ioeof" g childh
 ; -ydb
 ;
childh ; Halt
 ; +not_ydb
 i $$ism21^%mgsqls() i $zinfo(7,"pvector","pridev",0)
 ; -not_ydb
 h
 ;
m ; test
 n a,p,y,t,i,g
 s a=108
 s p=4
 s y=25
 s t=0
 f i=1:1:25 d
 . s t=t+(a*12)
 . s g=t*(p/100)
 . s t=t+g
 . w !,"Year: ",i," (",(a*12*i)," ===> ",t,")"
 . q
 w !,"total: ",t
 q
 ;

%mgsqln1
%mgsqln1 ;(CM) MGSQL odbc ; 28 Jan 2022  10:01 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqln1") q
 ;
tab(dbid,data,%zi,%zo) ; tables
 n a,tname,r,rn,sn,cn,nv,dtyp,i,x,n,desc,cols,error
 s $zt="tabe^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":tabe^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,%zi(0,"stmt"))
 ;d logarray^%mgsqls(.nv,"tab() array","ODBC")
 s error=""
 ; CatalogName=%s\r\nSchemaName=%s\r\nTableName=%s\r\nTableType=%s\r\n\r\n"
 s tname="TABLES"
 s cn=0
 s cn=cn+1,a(cn)="TABLE_CAT"
 s cn=cn+1,a(cn)="TABLE_SCHEM"
 s cn=cn+1,a(cn)="TABLE_NAME"
 s cn=cn+1,a(cn)="TABLE_TYPE"
 s cn=cn+1,a(cn)="REMARKS"
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 i $g(nv("CatalogName"))["%" d  g tab1
 . s rn=0
 . s rn=rn+1
 . s cn=0
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . q
 i $g(nv("SchemaName"))["%" d  g tab1
 . s rn=0
 . s dbid="" f  s dbid=$$nxtdbid^%mgsqld(dbid) q:dbid=""  d
 . . s rn=rn+1
 . . s cn=0
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=dbid
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . q
 . q
 i $g(nv("TableType"))["SYSTEM TABLE" d  g tab1
 . q
 . s rn=0
 . s rn=rn+1
 . s cn=0
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=dbid
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$g(nv("TableType"))
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . q
 i $g(nv("TableType"))["TABLE" d  g tab1
 . s rn=0
 . s dbid="" f  s dbid=$$nxtdbid^%mgsqld(dbid) q:dbid=""  d
 . . s tname="" f  s tname=$$nxttname^%mgsqld(dbid,tname) q:tname=""  d
 . . . s r=$$tab^%mgsqld(dbid,tname) i r="" q
 . . . s desc=$p(r,"\",1)
 . . . s rn=rn+1,cn=0
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=dbid
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=tname
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$g(nv("TableType"))
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=desc
 . . . q
 . . q
 . q
 i $g(nv("TableType"))["VIEW" d  g tab1
 . q
 . s rn=0
 . s rn=rn+1
 . s cn=0
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=dbid
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$g(nv("TableType"))
 . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . q
tab1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"t",1) ; send data
 q 0
tabe ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:tab: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q 0
 ;
col(dbid,data,%zi,%zo) ; table columns
 n %d,%data,%ind,%ref,a,cols,col,colx,ord,cname,cname1,tname,r,rc,rn,cn,pkey,sn,dtyp,type,i,x,cname,n,kn,knm,sc,ino,desc,pk,nv,error
 s $zt="cole^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":cole^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,0,%zi(0,"stmt"))
 ;d logarray^%mgsqls(.nv,"col() array","ODBC")
 s error=""
 s tname="TABLE_COLUMNS"
 s cn=0
 s cn=cn+1,a(cn)="TABLE_CAT"
 s cn=cn+1,a(cn)="TABLE_SCHEM"
 s cn=cn+1,a(cn)="TABLE_NAME"
 s cn=cn+1,a(cn)="COLUMN_NAME"
 s cn=cn+1,a(cn)="DATA_TYPE"
 s cn=cn+1,a(cn)="TYPE_NAME"
 s cn=cn+1,a(cn)="COLUMN_SIZE"
 s cn=cn+1,a(cn)="BUFFER_LENGTH"
 s cn=cn+1,a(cn)="DECIMAL_DIGITS"
 s cn=cn+1,a(cn)="NUM_PREC_RADIX"
 s cn=cn+1,a(cn)="NULLABLE"
 s cn=cn+1,a(cn)="REMARKS"
 s cn=cn+1,a(cn)="COLUMN_DEF"
 s cn=cn+1,a(cn)="SQL_DATA_TYPE"
 s cn=cn+1,a(cn)="SQL_DATETIME_SUB"
 s cn=cn+1,a(cn)="CHAR_OCTET_LENGTH"
 s cn=cn+1,a(cn)="ORDINAL_POSITION"
 s cn=cn+1,a(cn)="IS_NULLABLE"
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 s tname=$g(nv("TableName"))
 i tname="" g col1
 s cname=$g(nv("ColumnName"))
 s knm=0
 s %d=$$tab^%mgsqld(dbid,tname) i %d="" g col1
 s pk=$$pkey^%mgsqld(dbid,tname)
 s sc=$$ind^%mgsqld(dbid,tname,.%ind)
 s sc=$$key^%mgsqld(dbid,tname,pk,.%ind)
 s ord=0,kn="" f  s kn=$o(%ind(pk,kn)) q:kn=""  d
 . s cname1=$g(%ind(pk,kn))
 . i 'cname1?1a.e q
 . s r=$$col^%mgsqld(dbid,tname,cname1)
 . s desc=""
 . s ord=ord+1,knm=ord s col(ord)=cname1,col(ord,"k")=1,col(ord,"d")=desc
 . s colx(cname1)=ord
 . q
 s sc=$$data^%mgsqld(dbid,tname,.%data)
 s cname1="" f  s cname1=$o(%data(cname1)) q:cname1=""  d
 . s r=$g(%data(cname1))
 . s pkey=$g(colx(cname1))+0
 . s ord=$s(pkey:pkey,1:$p(r,"\",1)+knm)
 . ;s r=$$col^%mgsqld(dbid,tname,cname)
 . s desc=""
 . s type=$p(r,"\",2)
 . s col(ord)=cname1,col(ord,"k")=$s(pkey:1,1:0),col(ord,"d")=desc,col(ord,"t")=type
 . s colx(cname1)=ord
 . q
 i cname="" d  g col1
 . s rn=0
 . f ord=1:1 q:'$d(col(ord))  d
 . . s cname=col(ord)
 . . s rn=rn+1
 . . d col2(dbid,tname,cname,rn,ord,.col)
 . . q
 . q
 f ord=1:1 q:'$d(col(ord))  i $g(col(ord))=cname d  g col1
 . s rn=0
 . d col2(dbid,tname,cname,rn,ord,.col)
 . q
col1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"t",1) ; send data
 q 0
cole ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:col: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q 0
 ;
col2(dbid,tname,cname,rn,ord,cdata)
 n cn,type
 s type=$$ucase^%mgsqls($g(col(ord,"t")))
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=dbid
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=tname
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=cname
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid^%mgsqln2(type)
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=type
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="256"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="256"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid^%mgsqln2(type)
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=ord
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="NO"
 q
 ;
stt(dbid,data,%zi,%zo) ; table statistics
 n a,n,nv,tname,r,rn,sn,cn,cols,dtyp,i,x,kn,knx,idx,idxn,error
 s $zt="stte^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":stte^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,%zi(0,"stmt"))
 ;d logarray^%mgsqls(.nv,"stt() array","ODBC")
 s error=""
 s tname="TABLE_STATISTICS"
 s cn=0
 s cn=cn+1,a(cn)="TABLE_CAT" ; 1
 s cn=cn+1,a(cn)="TABLE_SCHEM" ; 2
 s cn=cn+1,a(cn)="TABLE_NAME" ; 3
 s cn=cn+1,a(cn)="NON_UNIQUE" ; 4
 s cn=cn+1,a(cn)="INDEX_QUALIFIER" ; 5
 s cn=cn+1,a(cn)="INDEX_NAME" ; 6
 s cn=cn+1,a(cn)="TYPE" ; 7
 s cn=cn+1,a(cn)="ORDINAL_POSITION" ; 8
 s cn=cn+1,a(cn)="COLUMN_NAME" ; 9
 s cn=cn+1,a(cn)="ASC_OR_DESC" ; 10
 s cn=cn+1,a(cn)="CARDINALITY" ; 11
 s cn=cn+1,a(cn)="PAGES" ; 12
 s cn=cn+1,a(cn)="FILTER_CONDITION" ; 13
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
stt1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"n",1) ; send data
 q 0
stte ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:stt: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q 0
 ;
pky(dbid,data,%zi,%zo) ; table primary key
 n %ind,%ref,a,n,tname,r,rc,sn,kn,sc,rn,cn,nv,cols,dtyp,pk,i,ino,x,n,r,cname,kn,error
 s $zt="pkye^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":pkye^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,%zi(0,"stmt"))
 ;d logarray^%mgsqls(.nv,"pky() array","ODBC")
 s error=""
 s tname="TABLE_PRIMARY_KEY"
 s cn=0
 s cn=cn+1,a(cn)="TABLE_CAL" ; 1
 s cn=cn+1,a(cn)="TABLE_SCHEM" ; 2
 s cn=cn+1,a(cn)="TABLE_NAME" ; 3
 s cn=cn+1,a(cn)="COLUMN_NAME" ; 4
 s cn=cn+1,a(cn)="KEY_SEQ" ; 5
 s cn=cn+1,a(cn)="PK_NAME" ; 6
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 s tname=$g(nv("TableName"))
 i tname'="" d  g pky1
 . s n=0
 . s pk=$$pkey^%mgsqld(dbid,tname)
 . s sc=$$ind^%mgsqld(dbid,tname,.%ind)
 . s sc=$$key^%mgsqld(dbid,tname,pk,.%ind)
 . s rn=0,kn=0
 . s n="" f  s n=$o(%ind(pk,n)) q:n=""  d
 . . s r=$g(%ind(pk,n)) i r=""!(r["""")!(r?1n.e) q
 . . s cname=r,kn=kn+1
 . . s rn=rn+1
 . . s cn=0
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=dbid
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=tname
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=cname
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=kn
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=pk
 . . q
 . q
pky1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"k",1) ; send data
 q 0
pkye ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:pky: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q 0
 ;
fky(dbid,data,%zi,%zo) ; table foreign key
 n %ind,%ref,a,n,tname,r,rc,sn,kn,sc,rn,cn,nv,cols,dtyp,pk,i,ino,x,n,r,cname,kn,error
 s $zt="fkye^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":fkye^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,%zi(0,"stmt"))
 ;d logarray^%mgsqls(.nv,"fky() array","ODBC")
 s error=""
 s tname="TABLE_PRIMARY_KEY"
 s cn=0
 s cn=cn+1,a(cn)="PKTABLE_CAT" ; 1
 s cn=cn+1,a(cn)="PKTABLE_SCHEM" ; 2
 s cn=cn+1,a(cn)="PKTABLE_NAME" ; 3
 s cn=cn+1,a(cn)="PKCOLUMN_NAME" ; 4
 s cn=cn+1,a(cn)="FKTABLE_CAT" ; 5
 s cn=cn+1,a(cn)="FKTABLE_SCHEM" ; 6
 s cn=cn+1,a(cn)="FKTABLE_NAME" ; 7
 s cn=cn+1,a(cn)="FKCOLUMN_NAME" ; 8
 s cn=cn+1,a(cn)="KEY_SEQ" ; 9
 s cn=cn+1,a(cn)="UPDATE_RULE" ; 10
 s cn=cn+1,a(cn)="DELETE_RULE" ; 11
 s cn=cn+1,a(cn)="FK_NAME" ; 12
 s cn=cn+1,a(cn)="PK_NAME" ; 13
 s cn=cn+1,a(cn)="DEFERRABILITY" ; 14
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 s tname=$g(nv("TableName"))
 i tname'="" d  g fky1
 . s n=0
 . s pk=$$pkey^%mgsqld(dbid,tname)
 . s sc=$$ind^%mgsqld(dbid,tname,.%ind)
 . s sc=$$key^%mgsqld(dbid,tname,pk,.%ind)
 . s rn=0,kn=0
 . s n="" f  s n=$o(%ind(pk,n)) q:n=""  d
 . . s r=$g(%ind(pk,n)) i r=""!(r["""")!(r?1n.e) q
 . . s cname=r,kn=kn+1
 . . s rn=rn+1
 . . s cn=0
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=dbid
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=tname
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=cname
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=dbid
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=tname
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=cname
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=kn
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="cascade"
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="cascade"
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=pk
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=pk
 . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 . . q
 . q
fky1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"m",1) ; send data
 q 0
fkye ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:fky: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q 0
 ;
prc(dbid,data,%zi,%zo) ; procedures
 ; PROCDURE_TYPE:  SQL_PT_UNKNOWN=0, SQL_PT_PROCEDURE=1, SQL_PT_FUNCTION=2
 n a,cname,pname,tname,r,rn,cn,sn,cols,nv,dtyp,i,x,n,desc,r,error
 s $zt="prce^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":prce^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,%zi(0,"stmt"))
 ;d logarray^%mgsqls(.nv,"prc() array","ODBC")
 s error=""
 s tname="PROCEDURES"
 s cn=0
 s cn=cn+1,a(cn)="PROCEDURE_CAT"
 s cn=cn+1,a(cn)="PROCEDURE_SCHEM"
 s cn=cn+1,a(cn)="PROCEDURE_NAME"
 s cn=cn+1,a(cn)="NUM_INPUT_PARAMS"
 s cn=cn+1,a(cn)="NUM_OUTPUT_PARAMS"
 s cn=cn+1,a(cn)="NUM_RESULT_SETS"
 s cn=cn+1,a(cn)="REMARKS"
 s cn=cn+1,a(cn)="PROCEDURE_TYPE"
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 s pname=$g(nv("ProcName"))
 i pname="" d  g prc1
 . s rn=0
 . s dbid="" f  s dbid=$$nxtdbid^%mgsqld(dbid) q:dbid=""  d
 . . s pname="" f  s pname=$$nxtpname^%mgsqld(dbid,pname) q:pname=""  d
 . . . s r=$$prc^%mgsqld(dbid,pname) i r="" q
 . . . s desc=$p(r,"\",1)
 . . . s rn=rn+1,cn=0
 . . . s cn=0
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=pname
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 . . . s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 . . . q
 . . q
 . q
 s r=$$prc^%mgsqld(dbid,pname) i r="" g prc1
 s desc=$p(r,"\",1)
 s rn=1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=pname
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
prc1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"p",1) ; send data
 q 0
prce ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:prc: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q 0
 ;
pcc(dbid,data,%zi,%zo) ; procedure columns
 ; PROCDURE_TYPE:  SQL_PT_UNKNOWN=0, SQL_PT_PROCEDURE=1, SQL_PT_FUNCTION=2
 n %data,a,cname,cname1,pname,tname,r,rn,sc,sn,cn,col,cols,colx,nv,ord,dtyp,type,i,x,n,desc,r,error
 s $zt="pcce^%mgsqln1" ; new $ztrap set $ztrap="zgoto "_$zlevel_":pcce^%mgsqln1"
 d nv^%mgsqln(data,.nv)
 s dbid=$$schema^%mgsql($g(nv("SchemaName")))
 k ^mgsqls($j,%zi(0,"stmt"))
 ;d logarray^%mgsqls(.nv,"pcc() array","ODBC")
 s error=""
 s tname="PROCEDURE_COLUMNS"
 s cn=0
 s cn=cn+1,a(cn)="PROCEDURE_CAT"
 s cn=cn+1,a(cn)="PROCEDURE_SCHEM"
 s cn=cn+1,a(cn)="PROCEDURE_NAME"
 s cn=cn+1,a(cn)="COLUMN_NAME"
 s cn=cn+1,a(cn)="COLUMN_TYPE"
 s cn=cn+1,a(cn)="DATA_TYPE"
 s cn=cn+1,a(cn)="TYPE_NAME"
 s cn=cn+1,a(cn)="COLUMN_SIZE"
 s cn=cn+1,a(cn)="BUFFER_LENGTH"
 s cn=cn+1,a(cn)="DECIMAL_DIGITS"
 s cn=cn+1,a(cn)="NUM_PREC_RADIX"
 s cn=cn+1,a(cn)="NULLABLE"
 s cn=cn+1,a(cn)="REMARKS"
 s cn=cn+1,a(cn)="COLUMN_DEF"
 s cn=cn+1,a(cn)="SQL_DATA_TYPE"
 s cn=cn+1,a(cn)="SQL_DATETIME_SUB"
 s cn=cn+1,a(cn)="CHAR_OCTET_LENGTH"
 s cn=cn+1,a(cn)="ORDINAL_POSITION"
 s cn=cn+1,a(cn)="IS_NULLABLE"
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 s pname=$g(nv("ProcName"))
 s cname=$g(nv("ColumnName"))
 s sc=$$pdata^%mgsqld(dbid,pname,.%data)
 s cname1="" f  s cname1=$o(%data(cname1)) q:cname1=""  d
 . s r=$g(%data(cname1))
 . s ord=$p(r,"\",1)
 . s desc=""
 . s type=$p(r,"\",2)
 . s col(ord)=cname1,col(ord,"k")=0,col(ord,"d")=desc,col(ord,"t")=type
 . s colx(cname1)=ord
 . q
 i cname="" d  g pcc1
 . s rn=0
 . f ord=1:1 q:'$d(col(ord))  d
 . . s cname=col(ord)
 . . s rn=rn+1
 . . d pcc2(dbid,tname,cname,rn,ord,.col)
 . . q
 . q
 f ord=1:1 q:'$d(col(ord))  i $g(col(ord))=cname d  g col1
 . s rn=0
 . d pcc2(dbid,pname,cname,rn,ord,.col)
 . q
pcc1 ; send result
 d send^%mgsqln(cols,$l(cols),0,"q",1) ; send data
 q 0
pcce ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:pcc: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q 0
 ;
pcc2(dbid,pname,cname,rn,ord,cdata)
 n cn,type
 s type=$$ucase^%mgsqls($g(col(ord,"t")))
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=pname
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=cname
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="12"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="VARCHAR"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="256"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="256"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="12"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="NO"
 q
 ;
test ; test harness
 k
 s dbid="mgsql"
 s %zi(0,"stmt")=0
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName="_$c(13,10)_"TableType=TABLE"_$c(13,10,13,10) d tab
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName=admission"_$c(13,10)_"ColumnName="_$c(13,10,13,10) d col
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName=admission"_$c(13,10)_"ColumnName=dadm"_$c(13,10,13,10) d col
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName="_$c(13,10,13,10) d stt
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName=admission"_$c(13,10,13,10) d pky
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"TableName=admission"_$c(13,10,13,10) d fky
 ;s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"ProcName="_$c(13,10,13,10) d prc
 s data="CatalogName="_$c(13,10)_"SchemaName=mgsql"_$c(13,10)_"ProcName=patient_getdata"_$c(13,10)_"ColumnName="_$c(13,10,13,10) d pcc(dbid,data,.%zi,.%zo)
 m z=^mgsqls($j,%zi(0,"stmt"))
 q
 ;

%mgsqln2
%mgsqln2 ;(CM) MGSQL odbc ; 28 Jan 2022  10:01 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqln2") q
 ;
typ(dbid,data,%zi,%zo) ; data types
 n tname,r,sn,cn,cols,dtyp,i,x,error
 s $zt="type^%mgsqln2" ; new $ztrap set $ztrap="zgoto "_$zlevel_":type^%mgsqln2"
 d nv^%mgsqln(data,.nv)
 s error=""
 k ^mgsqls($j,%zi(0,"stmt"))
 s tname="DATA_TYPE"
 s cn=0
 s cn=cn+1,a(cn)="TYPE_NAME"            ;  1
 s cn=cn+1,a(cn)="DATA_TYPE"            ;  2
 s cn=cn+1,a(cn)="COLUMN_SIZE"          ;  3
 s cn=cn+1,a(cn)="LITERAL_PREFIX"       ;  4
 s cn=cn+1,a(cn)="LITERAL_SUFFIX"       ;  5
 s cn=cn+1,a(cn)="CREATE_PARAMS"        ;  6
 s cn=cn+1,a(cn)="NULLABLE"             ;  7
 s cn=cn+1,a(cn)="CASE_SENSITIVE"       ;  8
 s cn=cn+1,a(cn)="SEARCHABLE"           ;  9
 s cn=cn+1,a(cn)="UNSIGNED_ATTRIBUTE"   ; 10
 s cn=cn+1,a(cn)="FIXED_PREC_SCALE"     ; 11
 s cn=cn+1,a(cn)="AUTO_UNIQUE_VALUE"    ; 12
 s cn=cn+1,a(cn)="LOCAL_TYPE_NAME"      ; 13
 s cn=cn+1,a(cn)="MINIMUM_SCALE"        ; 14
 s cn=cn+1,a(cn)="MAXIMUM_SCALE"        ; 15
 s cn=cn+1,a(cn)="SQL_DATA_TYPE"        ; 16
 s cn=cn+1,a(cn)="SQL_DATETIME_SUB"     ; 17
 s cn=cn+1,a(cn)="NUM_PREC_RADIX"       ; 18
 s cn=cn+1,a(cn)="INTERVAL_PRECISION"   ; 19
 ;s tname="data_type"
 s cols="" f cn=1:1 q:'$d(a(cn))  s cols=cols_cn_"~"_a(cn)_"~"_a(cn)_"~"_tname_$c(13,10)
 s cols=cols_$c(13,10)
 ;
 s rn=0
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="BIT"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("BIT")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("BIT")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="TINYINT"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("TINYINT")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("TINYINT")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="BIGINT"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("BIGINT")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="19"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("BIGINT")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="LONGVARBINARY"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("LONGVARBINARY")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="2147483647"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="MAX LENGTH"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("LONGVARBINARY")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="VARBINARY"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("VARBINARY")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="4096"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="MAX LENGTH"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("VARBINARY")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="LONGVARCHAR"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("LONGVARCHAR")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="2147483647"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="MAX LENGTH"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("LONGVARCHAR")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="NUMERIC"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("NUMERIC")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="15"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="PRECISION,SCALE"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="15"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("NUMERIC")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="INTEGER"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("INTEGER")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="10"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("INTEGER")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="SMALLINT"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("SMALLINT")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="5"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("SMALLINT")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="DOUBLE"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("DOUBLE")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="15"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("DOUBLE")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="DATE"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("DATE")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="10"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("DATE")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="TIME"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("TIME")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="8"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("TIME")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="TIMESTAMP"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("TIMESTAMP")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="23"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("TIMESTAMP")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 ;
 s rn=rn+1
 s cn=0
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="VARCHAR"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("VARCHAR")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="4096"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="'"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="MAX LENGTH"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="3"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="1"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)="0"
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=$$sqltypeid("VARCHAR")
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
 s cn=cn+1,^mgsqls($j,%zi(0,"stmt"),0,rn,cn)=""
typ1 d send^%mgsqln(cols,$l(cols),0,"t",1) ; send data
 q 0
type ; error
 s error=$$error^%mgsqls()
 d logerror^%mgsqls("MGSQL:typ: "_error,"M Exception")
 d send^%mgsqln(error,$l(error),0,"e",0)
 q 0
 ;
sqltypeid(type) ; get sql/odbc type ID
 s type=$$ucase^%mgsqls(type)
 i type["VARCHAR" q 12
 i type="TIMESTAMP" q 11
 i type="TIME" q 10
 i type="DATE" q 9
 i type="DOUBLE" q 8
 i type="SMALLINT" q 5
 i type="INTEGER" q 4
 i type="NUMERIC" q 2
 i type="LONGVARCHAR" q -1
 i type="VARBINARY" q -3
 i type="LONGVARBINARY" q -4
 i type="BIGINT" q -5
 i type="TINYINT" q -6
 i type="BIT" q -7
 i type="LONGVARCHAR" q -1
 q 12
 ;

%mgsqlo
%mgsqlo ;(CM) query optimisation procedure ; 28 Jan 2022  10:01 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlo") q
 ;
main(dbid,qid,sql,error) ; optimiser
 n qnum,word,table,rec
 s qnum=0
opt1 s qnum=qnum+1 i '$d(^mgtmp($j,"from",qnum)) g exit
 d word(dbid,qnum,.word)
 d table(dbid,qnum,.table)
 d opt^%mgsqlo1(dbid,qnum,.word,.table,.rec)
 k word,table
 g opt1
exit ; exit
 d rec(dbid,qid,.rec)
 q
 ;
word(dbid,qnum,word) ; generate word array for sub-query
 n i,wrd
 f i=1:1 q:'$d(^mgtmp($j,"where",qnum,i))  s wrd=^mgtmp($j,"where",qnum,i),word(i)=wrd
 q
 ;
table(dbid,qnum,table) ; generate ent array for sub-query
 n i,x,alias,slot,done
 s slot=0
 f i=1:1 q:'$d(^mgtmp($j,"from",qnum,i))  s x=$p(^mgtmp($j,"from",qnum,i),"~",2) i '$d(^mgtmp($j,"from","i",0,x)) s ^mgtmp($j,"from","i",0,x)=0
 f i=1:1 q:'$d(^mgtmp($j,"from",qnum,i))  d
 . s alias=$p(^mgtmp($j,"from",qnum,i),"~",2),alias(alias)=i
 . s table(0,i)=^mgtmp($j,"from",qnum,i)_"~"_^mgtmp($j,"from","i",0,$p(^mgtmp($j,"from",qnum,i),"~",2))
 f i=1:1 q:'$d(^mgtmp($j,"from","z",qnum,"ord",i))  d
 . s alias=^mgtmp($j,"from","z",qnum,"ord",i) i $d(done(alias)) q
 . s slot=slot+1,table("ord",slot,alias(alias))="",done(alias)=""
 q
 ;
rec(dbid,qid,rec) ; record optimisation details for user
 n ref,qnum
 s ref="^mgsqlx(1,dbid,qid,""opt"""
 k @(ref_")")
 f qnum=1:1 q:'$d(^mgtmp($j,"from",qnum))  d rec1(dbid,qid,qnum,ref,.rec)
 q
 ;
rec1(dbid,qid,qnum,ref,rec) ; process sub-query
 n cum,tnum,cum
 s cum=1 f tnum=1:1 q:'$d(^mgtmp($j,"from",qnum,tnum))  d rec2(dbid,qid,qnum,tnum,ref,.rec,.cum)
 q
 ;
rec2(dbid,qid,qnum,tnum,ref,rec,cum) ; return full optimisation details for alias
 n %ind,r,tname,alias,ino,kno,key,com,sc,i,x
 s r=^mgtmp($j,"from",qnum,tnum)
 s tname=$p(r,"~",1),alias=$p(r,"~",2),ino=^mgtmp($j,"from","i",0,alias) i ino="" s ino=$$pkey^%mgsqld(dbid,tname)
 s kno=0,key="",com="",cum("ndst")=1,sc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s kno=kno+1 d rec3(dbid,tname,alias,x,ino,kno,.rec,.cum)
 s @(ref_",qnum,tnum)")=tname_"#"_alias_"#"_ino_"#"_key
 q
 ;
rec3(dbid,tname,alias,cname,ino,kno,rec,cum) ; record work involved at each level
 n y,nds,nds1,nds2
 s y=%z("dsv")_alias_"."_cname_%z("dsv")
 s (nds,nds1,nds2)=$s($d(^mgsqldbs("e",dbid,tname,ino,kno)):$p(^(kno),"~",1),1:0) i kno>1 s nds1=nds,(nds,nds2)=$s(nds>0:$j(nds/cum("pnds"),0,0),1:nds)
 s cum("pnds")=nds1,nds="~"_nds
 i $d(rec(y)) s:rec(y)="=" nds="[1]",nds2=1 s:rec(y)'="=" nds="[>"_nds_"<]",nds2=nds2
 i $e(nds)="~" s nds="["_nds_"]"
 s cum("ndst")=$s(nds2=1:cum("ndst")+1,nds2>1:cum("ndst")*nds2,1:cum("ndst")),cum=$s(nds2=1:cum+1,nds2>1:cum*nds2,1:cum),key=key_com_cname_"#"_cum_"#"_cum("ndst")_"#"_nds,com=","
 q
 ;

%mgsqlo1
%mgsqlo1 ;(CM) query optimisation procedure ; 28 Jan 2022  10:01 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlo1") q
 ;
opt(dbid,qnum,word,table,rec) ; optimise sub query
 n ops,props,neops,whr,rstr,notnull,join,indxa
 s ops=$$oper^%mgsqle(.ops,.props,.neops)
 d blks(.word,.whr) i $l(error) q
 d rstr(.whr,.ops,neops,props,.rstr,.notnull)
 d join(qnum,.join)
 d indx(dbid,.table,.indxa)
 d vrfy(.join,.indxa,.notnull)
 d optimise^%mgsqlo2(dbid,qnum,.table,.rstr,.join,.indxa,.rec)
 q
 ;
blks(word,whr) ; break where statement into blocks by combinational operators
 n i,no,no1,ln,ln1,wrd,wrd1,op,obr,cbr,ok
 k whr
 s no1=0 f i=1:1 q:'$d(word(i))  s whr(no1,i)=word(i)
 s no=""
blks1 s no=$o(whr(no)) i no="" g blks3
 s ln=""
blks2 s ln=$o(whr(no,ln)) i ln="" g blks1
 s wrd=whr(no,ln) i wrd'="&",wrd'="!" g blks2
 s ln1=$o(whr(no,ln),-1) i '$l(ln1) s error="error in structure of the 'where' statement",error(5)="HY000" q
 s wrd1=whr(no,ln1) i wrd1[%z("db") g blks21
 s no1=no1+1,whr(no,ln1)=%z("db")_no1_%z("db")
 i wrd1'=")" s whr(no1,ln1)=wrd1 g blks21
 s obr=0,cbr=1 f  s ln1=$o(whr(no,ln1),-1) q:ln1=""  s wrd1=whr(no,ln1) s:wrd1="(" obr=obr+1 s:wrd1=")" cbr=cbr+1 k whr(no,ln1) q:obr=cbr  s whr(no1,ln1)=wrd1
blks21 s ln1=$o(whr(no,ln)) i '$l(ln1) s error="error in structure of the 'where' statement",error(5)="HY000" q
 s wrd1=whr(no,ln1) i wrd1[%z("db") g blks2
 s no1=no1+1,whr(no,ln1)=%z("db")_no1_%z("db")
 i wrd1'="(" s whr(no1,ln1)=wrd1 g blks2
 s obr=1,cbr=0 f  s ln1=$o(whr(no,ln1)) q:ln1=""  s wrd1=whr(no,ln1) s:wrd1="(" obr=obr+1 s:wrd1=")" cbr=cbr+1 k whr(no,ln1) q:obr=cbr  s whr(no1,ln1)=wrd1
 g blks2
blks3 ; recombine parts to eliminate branches caused by useless brackets
 s no=""
blks4 s no=$o(whr(no)) i no="" g blksx
 s ln=""
blks5 s ln=$o(whr(no,ln)) i ln="" g blks4
 s wrd=whr(no,ln) i wrd'[%z("db") g blks5
 s no1=$p(wrd,%z("db"),2)
 s op="",ln1=$o(whr(no,ln),-1) i $l(ln1) s op=whr(no,ln1)
 i op'="&",op'="!" s ln1=$o(whr(no,ln)) i $l(ln1) s op=whr(no,ln1)
 i op'="&",op'="!" g blks5
 s ok=1,ln1="" f  s ln1=$o(whr(no1,ln1)) q:ln1=""  s wrd1=whr(no1,ln1) i wrd1'[%z("db"),wrd1'=op s ok=0 q
 i 'ok g blks5
 k whr(no,ln)
 s ln1="" f  s ln1=$o(whr(no1,ln1)) q:ln1=""  s whr(no,ln1)=whr(no1,ln1)
 k whr(no1)
 s ln=""
 g blks5
blksx ; exit
 q
 ;
recomb(whr,stat)
 n n,bn,pre,pst
 f  q:stat'[%z("db")  d
 . s bn=$p(stat,%z("db"),2)
 . s pre=$p(stat,%z("db"),1)
 . s pst=$p(stat,%z("db"),3,999)
 . s n="" f  s n=$o(whr(bn,n)) q:n=""  s pre=pre_whr(bn,n)
 . s stat=pre_pst
 . q
 q stat
 ;
rstr(whr,ops,neops,props,rstr,notnull) ; find useful restrictions
 n orbrn,orn,root,no,op,opn
 s orbrn=0,orn=0
 s root=$o(whr("")) i '$l(root) q
 s no=root,op=$$op(.whr,no,neops,props,.opn) i '$l(op) q
 i op="&" s orn=1 d and(.whr,no,.ops,neops,props,.opn) q
 i op="!" d or(.whr,no,.orbrn,.orn,.rstr,.notnull,.ops,neops,props,.opn) q
 s orn=1 d rstr1(.whr,no,.orbrn,.orn,.rstr,.notnull,.ops,neops,props) q
 q
 ;
rstr1(whr,no,orbrn,orn,rstr,notnull,ops,neops,props) ; process individual restriction
 n tmp,op,obr,cbr,x,wrd,n,vn,cn,opc,opn
 s op=$$op(.whr,no,neops,props,.opn) i '$l(op) q
 i op="&"!(op="!") q
 s (obr,cbr)=0,x=opn f  s x=$o(whr(no,x),-1) q:x=""  s wrd=whr(no,x) s:wrd="(" obr=obr+1 s:wrd=")" cbr=cbr+1 q:obr>cbr  s tmp(0,x)=wrd i obr=cbr q
 s n=0,x="" f  s x=$o(tmp(0,x)) q:x=""  s wrd=tmp(0,x) k tmp(0,x) s n=n+1 s tmp(0,n)=wrd
 s (obr,cbr)=0,n=0,x=opn f  s x=$o(whr(no,x)) q:x=""  s wrd=whr(no,x) s:wrd="(" obr=obr+1 s:wrd=")" cbr=cbr+1 q:cbr>obr  s n=n+1,tmp(1,n)=wrd i obr=cbr q
 s vn=0,cn=1,opc=op d rstr2(.whr,.tmp,cn,vn,opc,.orbrn,.orn,.rstr,.notnull,neops)
 i $d(ops(op)) s vn=1,cn=0,opc=ops(op) d rstr2(.whr,.tmp,cn,vn,opc,.orbrn,.orn,.rstr,.notnull,neops)
 q
 ;
rstr2(whr,tmp,cn,vn,opc,orbrn,orn,rstr,notnull,neops) ; resolve expression into functional restriction wrt 1 variable
 n i
 k tmp(5) f i=1:1 q:'$d(tmp(cn,i))  s tmp(5,i)=tmp(cn,i)
 i neops[(":"_op_":") d rstr4(.tmp,vn,op,.orbrn,.notnull) q
 i $d(tmp(vn,1)),'$d(tmp(vn,2)) d rstr3(.whr,.tmp,vn,opc,.orbrn,.orn,.rstr) q
 q
 ;
rstr3(whr,tmp,vn,opc,orbrn,orn,rstr) ; find dependancies in constant
 n sqvar,andn,n,cnst,wrd,wrd1,var,alias,tname,tno
 s sqvar=tmp(vn,1) i sqvar'[%z("dsv") q
 s sqvar=$p(sqvar,%z("dsv"),2) i sqvar'?1a.e1"."1a.e q
 f andn=1:1 q:'$d(rstr(orbrn,sqvar,orn,andn))
 s n="",cnst=""
rstr31 s n=$o(tmp(5,n)) i n="" g rstr32
 s (wrd,wrd1)=tmp(5,n)
 s var="" i wrd[%z("dsv") s var=$p(wrd,%z("dsv"),2)
 i var?1a.e1"."1a.e s rstr(orbrn,sqvar,orn,andn,"dep",var)=""
 s cnst=cnst_wrd
 g rstr31
rstr32 ; file restriction
 s rstr(orbrn,sqvar,orn,andn,"op")=opc
 s rstr(orbrn,sqvar,orn,andn,"cnst")=$$recomb(.whr,cnst)
 i cnst'[%z("dev") q
 s (alias,tname)=$p(sqvar,".",1),cname=$p(sqvar,".",2)
 i alias'="" s tno=$g(^mgtmp($j,"from","x",qnum,alias)) i tno'="" s tname=$p($g(^mgtmp($j,"from",qnum,tno)),"~",1)
 s ^mgtmp($j,"in",$p(cnst,%z("dev"),2))="~"_tname_"~"_cname
 q
 ;
rstr4(tmp,vn,op,orbrn,notnull) ; evaluate possible not-null restriction
 n sqvar,cnst
 i orbrn'=0 q
 i '$d(tmp(vn,1))!'$d(tmp(5,1)) q
 i $d(tmp(vn,2))!$d(tmp(5,2)) q
 s sqvar=tmp(vn,1) i sqvar'[%z("dsv") q
 s sqvar=$p(sqvar,%z("dsv"),2) i sqvar'?1a.e1"."1a.e q
 s cnst=tmp(5,1)
 i op="'=",cnst="""""" s notnull(sqvar)=""
 i op="[",cnst?1""""1e.e1"""" s notnull(sqvar)=""
 q
 ;
and(whr,no,ops,neops,props,opn) ; process and conditions
 n x,wrd,no1
 s x=""
and1 s x=$o(whr(no,x)) i x="" q
 s wrd=whr(no,x) i wrd'[%z("db") g and1
 s no1=$p(wrd,%z("db"),2)
 d and2(.whr,no1,.orbrn,.orn,.rstr,.notnull,.ops,neops,props,.opn)
 g and1
 ;
and2(whr,no,orbrn,orn,rstr,notnull,ops,neops,props,opn) ; branch beneath and combination
 n op
 s op=$$op(.whr,no,neops,props,.opn)
 i op="&" q
 i op="!" d or(.whr,no,.orbrn,.orn,.rstr,.notnull,.ops,neops,props,.opn)
 d rstr1(.whr,no,.orbrn,.orn,.rstr,.notnull,.ops,neops,props)
 q
 ;
or(whr,no,orbrn,orn,rstr,notnull,ops,neops,props,opn) ; process or conditions
 n x,wrd
 s orbrn=orbrn+1,orn=0,x=""
or1 s x=$o(whr(no,x)) i x="" q
 s wrd=whr(no,x) i wrd'[%z("db") g or1
 s no1=$p(wrd,%z("db"),2)
 d or2(.whr,no1,.orbrn,.orn,.rstr,.notnull,.ops,neops,props,.opn)
 g or1
 ;
or2(whr,no,orbrn,orn,rstr,notnull,ops,neops,props,opn) ; branch beneath or combination
 n op
 s orn=orn+1
 s op=$$op(.whr,no,neops,props,.opn)
 i op="&" d and(.whr,no,.ops,neops,props,.opn)
 i op="!" q
 d rstr1(.whr,no,.orbrn,.orn,.rstr,.notnull,.ops,neops,props)
 q
 ;
op(whr,no,neops,props,opn) ; extract combinational or comparison operator for group
 n x,wrd,wrd1
 s (op,opn)=""
 s x="" f  s x=$o(whr(no,x)) q:x=""  s wrd=whr(no,x),wrd1=":"_wrd_":" i wrd="!"!(wrd="&")!(neops[wrd1)!(props[wrd1) s op=wrd,opn=x q
 q op
 ;
join(qnum,join) ; make comprehensive join index
 n jn,cname,alias,sqvar
 s jn=0
 s cname="" f  s cname=$o(^mgtmp($j,"from","z",qnum,"join",cname)) q:cname=""  d
 . s jn=jn+1
 . s alias="" f  s alias=$o(^mgtmp($j,"from","z",qnum,"join",cname,alias)) q:alias=""  d
 . . s sqvar=alias_"."_cname
 . . s join(jn,sqvar)=""
 . . q
 . q
 q
 ;
indx(dbid,table,indxa) ; get all index information
 n i
 f i=1:1 q:'$d(table(0,i))  d indx1(dbid,.table,i,.indxa)
 ;s nofid=i-1
 q
 ;
indx1(dbid,table,no,indxa) ; retrieve index data for file tname
 n %ind,%d,tname,cname,alias,rc,ino,kno,ano,pnds,sqvar,pkey,keyat,notnl,nds,nnds
 s tname=table(0,no),alias=$p(tname,"~",2),tname=$p(tname,"~",1)
 s rc=$$ind^%mgsqld(dbid,tname,.%ind)
 ; get primary key
 s ino=$$pkey^%mgsqld(dbid,tname),rc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 f kno=1:1 q:'$d(%ind(ino,kno))  s cname=%ind(ino,kno) i cname?1a.e s pkey(cname)=""
 s ino=""
indx2 s ino=$o(%ind(ino)) i ino="" g indxx
 i $d(^mgtmp($j,"create","index")),ino=$p(^mgtmp($j,"create","index"),"~",2) g indx2
 s rc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 s kno=0,ano=0,pnds=0
indx3 s kno=kno+1 i '$d(%ind(ino,kno)) g indx2
 s cname=%ind(ino,kno) i cname'?1a.e g indx3
 s ano=ano+1,sqvar=alias_"."_cname
 s keyat=$d(pkey(cname))
 s notnl=0,%d=$$item^%mgsqld(dbid,tname,cname) i %d'="",$p(%d,"\",4) s notnl=1
 i keyat s notnl=1
 i notnl s notnull(sqvar)=""
 s (nds,nnds)=0 i $d(^mgsqldbs("e",dbid,tname,ino,ano)) s (nds,nnds)=$p(^(ano),"~",1) s:pnds>0 nnds=$j(nds/pnds,0,0) s pnds=nds
 s indxa("e",alias,ino)=ano,indxa("e",alias,ino,ano)=cname_"~"_keyat_"~"_notnl_"~"_""_"~"_nds_"~"_nnds
 g indx3
indxx ; exit
 q
 ;
vrfy(join,indxa,notnull) ; verify indices for usage
 n alias,cname,sqvar,sqvar1,notnl,ino,kno,ano,r,jn
 s alias=""
vrfy1 s alias=$o(indxa("e",alias)) i alias="" g vrfyx
 s ino=""
vrfy2 s ino=$o(indxa("e",alias,ino)) i ino="" g vrfy1
 i $d(indxa("cuse",alias,ino)) g vrfy2 ; index disqualified already
 s ano=0
vrfy3 s ano=ano+1 i '$d(indxa("e",alias,ino,ano)) g vrfy2
 s r=indxa("e",alias,ino,ano)
 s cname=$p(r,"~",1),notnl=$p(r,"~",3),sqvar=alias_"."_cname
 i notnl g vrfy4
 i $d(notnull(sqvar)) s notnl=1 g vrfy4
 s jn="" f  s jn=$o(join(jn)) q:jn=""!notnl  i $d(join(jn,sqvar)) s sqvar1=""  f  s sqvar1=$o(join(jn,sqvar1)) q:sqvar1=""  i sqvar1'=sqvar,$d(notnull(sqvar1)) s notnl=1 q
vrfy4 i 'notnl s indxa("duse",alias,ino)="" g vrfy2
 s $p(indxa("e",alias,ino,ano),"~",3)=notnl,notnull(sqvar)=""
 g vrfy3
vrfyx ; exit
 q
 ;


%mgsqlo2
%mgsqlo2 ;(CM) query optimisation procedure ; 28 Jan 2022  10:01 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
 s ordn=0,ordm=3 f iii=1:1:20000 s ordn=$$ord(ordm,ordn,.ord) q:ord=""  w !,ordn," ",ord
 q
a d vers^%mgsql("%mgsqlo2") q
 ;
optimise(dbid,qnum,table,rstr,join,indxa,rec) ; optimise sub query
 n ord
 s ord=$$comb(dbid,qnum,.table,.rstr,.join,.indxa)
 d compapi(dbid,qnum,.table,.rstr,.join,.indxa,.rec,ord)
 q
 ;
comb(dbid,qnum,table,rstr,join,indxa) ; look at combinations
 n optim,wkfct2,nofid,ordn,ordm,ord,ok,nrun,rec,comb,r,i,wkfct,wkfct2,wkfctb,nodes,nds,ino,inos,tname
 s optim=1,wkfct2=0
 s nofid=$o(table(0,""),-1)
 s ordn=0,ordm=nofid
comb1 s ordn=$$ord(ordm,ordn,.ord) i ord="" g combx
 s ok=1 f ordn=1:1:nofid i $d(table("ord",ordn)) s nrun=$p(ord,"#",ordn) i '$d(table("ord",ordn,nrun)) s ok=0 q
 i 'ok g comb1
 d comb2(dbid,qnum,ord,nofid,.table,.rstr,.join,.indxa,.comb,.rec,optim)
 g comb1
combx ; exit
 s wkfct2=$g(comb("wkfct2"))+0
 s ord="" f  s ord=$o(comb(0,ord)) q:ord=""  s r=comb(0,ord),wkfct=$p(r,"~",1),wkfctb=$p(r,"~",2),nodes=$p(r,"~",3) i wkfct=wkfct2 s nds(nodes,wkfctb,ord)=""
 s nodes=$o(nds("")) i $l(nodes) s wkfctb=$o(nds(nodes,""),-1) i $l(wkfctb) s ord=$o(nds(nodes,wkfctb,""))
 s inos=""
 i ord'="",$d(comb(0,ord)) s inos=$p(comb(0,ord),"~",4)
 i ord="" s ordn=$$ord(ordm,0,.ord)
 f ordn=1:1:ordm s nrun=$p(ord,"#",ordn) d
 . s tname=$p(table(0,nrun),"~",1)
 . s ino=$p(inos,"#",ordn)
 . i ino="" s ino=$$pkey^%mgsqld(dbid,tname)
 . s $p(table(0,nrun),"~",3)=ino
 . q
 q ord
 ;
comb2(dbid,qnum,ord,nofid,table,rstr,join,indxa,comb,rec,optim) ; evaluate combination
 n inos,wkfcts,nodess,dlms,nord,nodes,nodes1,wkfct,wkfct1,wkfct2,wkfcts,wkfctb1,wkfctb2,wkfctbn1,nord,nrun,tname,alias,ino,inos,got
 s (inos,wkfcts,nodess,dlms)=""
 s nord=0,nodes1=0,wkfct1=0,wkfct2=0,wkfctb1=0,wkfctbn1=0
comb21 s nord=nord+1,nrun=$p(ord,"#",nord)
 s alias=table(0,nrun),tname=$p(alias,"~",1),alias=$p(alias,"~",2)
 s ino=$$idx(dbid,qnum,tname,alias,.rstr,.join,.indxa,.got,.nodes,.wkfct,.rec,optim),got("f",alias)=""
 s nodes1=nodes1+nodes,wkfct1=wkfct1+(wkfct/nofid)
 s wkfctb1=wkfctb1+(wkfct/nord),wkfctbn1=wkfctbn1+(1/nord)
 s inos=inos_dlms_ino,wkfcts=wkfcts_dlms_wkfct,nodess=nodess_dlms_nodes,dlms="#"
 i nord<nofid g comb21
comb22 s wkfctb2=$j(wkfctb1/wkfctbn1,"",12)+0
 s wkfct1=$j(wkfct1,"",12)+0
 i wkfct1>wkfct2 s wkfct2=wkfct1
 s comb(0,ord)=wkfct1_"~"_wkfctb2_"~"_nodes1_"~"_inos_"~"_wkfcts_"~"_nodess
 s comb("wkfct2")=wkfct2
 q
 ;
idx(dbid,qnum,tname,alias,rstr,join,indxa,got,nodes,wkfct,rec,optim) ; select best index (output: ino, dep, sat, nodes, wkfct)
 n ino,inop,maxdep,maxsat,maxscr,ano,nnodes,rstrto,rstrn,dep,sat,scr,r,cname,nnodes,sqvar,orn,andn,use,idx,nds
 s ino="",maxdep=0,maxsat=0,maxscr=0
idx1 s ino=$o(indxa("e",alias,ino)) i ino="" g idxx
 i $d(indxa("cuse",alias,ino)) g idx1
 i optim,$d(indxa("duse",alias,ino)) g idx1
 k got("a",alias)
 s ano=0,nodes=0,rstrto=-1,rstrn=0
idx2 s ano=ano+1 i '$d(indxa("e",alias,ino,ano)) g idx2x
 s r=indxa("e",alias,ino,ano)
 s cname=$p(r,"~",1),nnodes=$p(r,"~",6),sqvar=alias_"."_cname
 d idx3(sqvar,ino,.rstr,.join,.use,.got)
 s got("a",alias,cname)=""
 i '$d(use(ino,sqvar)) s:rstrto=-1 rstrto=ano-1 s nodes=nodes+nnodes
 i $d(use(ino,sqvar)) s rstrn=rstrn+1
 g idx2
idx2x ; index processed
 s ano=ano-1
 s dep=rstrto/ano,sat=rstrn/ano
 i dep>maxdep s maxdep=dep
 i sat>maxsat s maxsat=sat
 s idx(ino)=dep_"~"_sat_"~"_(nodes+0)_"~"_(dep+sat)
 g idx1
idxx ; choose best index
 ; eliminate useless indices
 s ino="" f  s ino=$o(idx(ino)) q:ino=""  s r=idx(ino),dep=$p(r,"~",1),sat=$p(r,"~",2) i dep<maxdep,sat<maxsat k idx(ino)
 ; eliminate indices with sub-optimal scores
 s ino="" f  s ino=$o(idx(ino)) q:ino=""  s r=idx(ino),scr=$p(r,"~",4) i scr>maxscr s maxscr=scr
 s ino="" f  s ino=$o(idx(ino)) q:ino=""  s r=idx(ino),scr=$p(r,"~",4) i scr<maxscr k idx(ino)
 s ino="" f  s ino=$o(idx(ino)) q:ino=""  s nodes=$p(idx(ino),"~",3),nds(nodes,ino)=""
 s inop=$$pkey^%mgsqld(dbid,tname)
 ; look at node counts, if available
 s nodes=$o(nds("")) i nodes'="" d
 . i $d(nds(nodes,inop)) s ino=inop q
 . s ino=$o(nds(nodes,""))
 . q
 i ino="" s ino=inop
 i nodes="" s nodes=0
 s (dep,sat)=0
 i $d(idx(ino)) s r=idx(ino),dep=$p(r,"~",1),sat=$p(r,"~",2)
 s wkfct=(dep+sat)/2
 i optim q ino
 s sqvar="" f  s sqvar=$o(use(ino,sqvar)) q:sqvar=""  d
 . s orn="" f  s orn=$o(use(ino,sqvar,orn)) q:orn=""  d
 . . s andn="" f  s andn=$o(use(ino,sqvar,orn,andn)) q:andn=""  d idx4(qnum,sqvar,ino,orn,andn,.use,.rec)
 . . q
 . q
 q ino
 ;
idx3(sqvar,ino,rstr,join,use,got) ; find/join to a restriction
 n jn,ok,sqvar1,orbrn,orn,andn
 s jn="",ok=0 f  s jn=$o(join(jn)) q:jn=""  i $d(join(jn,sqvar)) d  i ok q
 . s sqvar1="" f  s sqvar1=$o(join(jn,sqvar1)) q:sqvar1=""  i sqvar1'=sqvar s ok=$$gotat(sqvar1,.got) i ok q
 . q
 i ok s use(ino,sqvar,1,1,"op")="=",use(ino,sqvar,1,1,"cnst")=%z("dsv")_sqvar1_%z("dsv") g idx3x
 s orbrn=""
idx31 i $d(use(sqvar)) g idx3x
 s orbrn=$o(rstr(orbrn)) i orbrn="" g idx3x
 s orn=""
idx32 s orn=$o(rstr(orbrn,sqvar,orn)) i orn="" g idx31
 s andn=""
idx33 s andn=$o(rstr(orbrn,sqvar,orn,andn)) i andn="" g idx32
 s ok=1,sqvar1="" f  s sqvar1=$o(rstr(orbrn,sqvar,orn,andn,"dep",sqvar1)) q:sqvar1=""  s ok=$$gotat(sqvar1,.got) i 'ok q
 i 'ok,orbrn'=0 k use(sqvar) g idx31
 i 'ok g idx33
 s use(ino,sqvar,orn,andn,"op")=rstr(orbrn,sqvar,orn,andn,"op")
 s use(ino,sqvar,orn,andn,"cnst")=rstr(orbrn,sqvar,orn,andn,"cnst")
 g idx33
idx3x ; exit
 q
 ;
idx4(qnum,sqvar,ino,orn,andn,use,rec) ; file restriction for compiler to use
 s (^mgtmp($j,"pre",qnum,%z("dsv")_sqvar_%z("dsv"),orn,andn,"op"),rec(%z("dsv")_sqvar_%z("dsv")))=use(ino,sqvar,orn,andn,"op")
 s ^mgtmp($j,"pre",qnum,%z("dsv")_sqvar_%z("dsv"),orn,andn,"cnst")=use(ino,sqvar,orn,andn,"cnst")
 q
 ;
gotat(sqvar,got) ; determine whether sqvar1 is available at this point
 n alias,cname,ok
 s ok=0,alias=$p(sqvar,".",1),cname=$p(sqvar,".",2)
 i alias=""!(cname="") q ok
 s ok=0 i $d(got("a",alias,cname)) s ok=1 q ok
 q ok
 ;
ord(ordm,ordn,ord) ; get next running order
 n i,j,x,y,ok
 s ordn=ordn+1 i ordn=1 g ord1
 s ok=0 f i=ordm:-1:1 s x=$$ord2(i,.ord) i x'="" s $p(ord,"#",i)=x q
 i x="" s ord="" q ordn
 f j=1:1:i s y($p(ord,"#",j))=""
 f i=i+1:1:ordm f j=1:1 i '$d(y(j)) s $p(ord,"#",i)=j,y(j)="" q
 q ordn
ord1 ; first pass
 f i=1:1:ordm s $p(ord,"#",i)=i
 q ordn
 ;
ord2(no,ord) ; get next allowed number in series
 n j,y,x,ok
 f j=1:1:no-1 s y($p(ord,"#",j))=""
 s x=$p(ord,"#",no),ok=0 f j=x+1:1 s:'$d(y(j)) x=j,ok=1 i ok q
 i x>ordm s ok=0
 i 'ok s x=""
 q x
 ;
compapi(dbid,qnum,table,rstr,join,indxa,rec,ord) ; interface to compiler
 n optim,nofid,ordn,comb,nord,nino,i,tname,alias
 s optim=0
 s nofid=$o(table(0,""),-1)
 s table("ordx")=ord
 ; process opimisation hints
 i $d(^mgtmp($j,"from","i","f")) d
 . s nord=""
 . i '$d(table("ord")) f i=1:1:nofid s nord=nord_$s(i>1:"#",1:"")_i
 . f i=1:1:nofid d
 . . s tname=$p(table(0,i),"~",1),alias=$p(table(0,i),"~",2),nino=""
 . . i alias'="" s nino=$g(^mgtmp($j,"from","i","f",alias))
 . . i nino="" s nino=$g(^mgtmp($j,"from","i","f",tname))
 . . i nino'="" s $p(table(0,i),"~",3)=nino
 . . q
 . s ord=nord,table("ordx")=ord
 . q
 ; optimisation complete and hints acknowledged
 k ^mgtmp($j,"from",qnum),^mgtmp($j,"from","x",qnum)
 f ordn=1:1:nofid d compapi1(dbid,qnum,.table,.rstr,.join,.indxa,ord,ordn)
 d comb2(dbid,qnum,ord,nofid,.table,.rstr,.join,.indxa,.comb,.rec,optim)
 q
 ;
compapi1(dbid,qnum,table,rstr,join,indxa,ord,ordn) ; disallow all indices except chosen one
 n nrun,alias,tname,ino,ino1
 s nrun=$p(ord,"#",ordn)
 s alias=table(0,nrun),tname=$p(alias,"~",1),ino=$p(alias,"~",3),alias=$p(alias,"~",2)
 k indxa("cuse",alias,ino)
 s ino1="" f  s ino1=$o(indxa("e",alias,ino1)) q:ino1=""  i ino1'=ino s indxa("cuse",alias,ino1)=""
 s ^mgtmp($j,"from",qnum,ordn)=tname_"~"_alias,(^mgtmp($j,"from","x",qnum,tname),^mgtmp($j,"from","x",qnum,alias))=ordn,^mgtmp($j,"from","i",0,alias)=ino
 q
 ;

%mgsqlp
%mgsqlp ;(CM) sql language processor ; 28 Jan 2022  10:02 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlp") q
 ;
main(sql,line,error) ; entry
 n sql2,wrk
 s error=""
 s qnummax=0
 k ^mgtmp($j,"translate")
main1 ; re-entry
 k ^mgtmp($j,"cmnd")
 ;k wrk,blk,tmp,sql,log,declare
 s error=""
 d cmnd(.sql2)
 d rips(.line,.wrk,.error) i $l(error) g exit
 d crlf(.wrk)
 s qnummax=$$cdel(.sql2,.wrk,.sql,.error) i $l(error) g exit
 d main^%mgsqlp1(qnummax,.sql2,.wrk,.sql,.error) i $l(error) g exit
 i $g(sql(1,2))="from "_%z("dq")_2_%z("dq")_" t0" d cog i ok g main1
exit k tmp,blk
 q qnummax
 ;
cmnd(sql2) ; sql2 commands
 n x
 k sql2
 f x="select","from","where","group","having","order","call" s sql2(x)=0
 f x="join","natural","outer","left","right","full","inner","cross","outer","as","on","using" s sql2(x)=1
 f x="exists","not","and","or","like","in","between" s sql2(x)=2
 f x="update","delete","insert","attributes","into","values","set" s sql2(x)=3
 f x="union","intersect","except" s sql2(x)=4
 f x="transaction","create","drop","by","all" s sql2(x)=5
 f x="commit","current_date","current_time","current_timestamp","start","begin","stop" s sql2(x)=7
 f x="cursor","eof","last","notnull","rollback" s sql2(x)=7
 q
 ;
rips(line,wrk,error) ; rip out all literals and comments
 n ln,ln1,ln2,cn,cn1,cn2,char,charp,charn,txt,instring,sno,qno,mrk
 s ln="" f  s ln=$o(line(ln)) q:ln=""  s wrk(ln)=line(ln)
 s sno=0
rips0 k sno(0)
 s instring=0,string=""
 s ln=""
rips1 s ln=$o(wrk(ln)) i ln="" g rips3
 s txt=wrk(ln),char=" ",txt=$tr(txt,"'","""")
 s cn=0
rips2 s cn=cn+1,charp=char,char=$e(txt,cn),charn=$e(txt,cn+1) i char="" g rips1
 i 'instring,(charp_char)=" ;"!((charp_char_charn)=" --") s txt=$e(txt,1,cn-2) k wrk(ln) s:$l(txt) wrk(ln)=txt g rips2 ; remove comment
 i char=$c(34),'instring s sno=sno+1,qno=0,instring=1,sno(0,sno,0,0)=ln,sno(0,sno,0,1)=cn
 i char=$c(34),instring s qno=qno+1
 i char'=$c(34),instring,'(qno#2) s ^mgtmp($j,"string",sno)=string,instring=0,string="" g rips3
 i instring s string=string_char,sno(0,sno,1,0)=ln,sno(0,sno,1,1)=cn
 g rips2
rips3 i instring,'(qno#2) s ^mgtmp($j,"string",sno)=string,instring=0,string=""
 i instring s error="statement contains unterminated literal",error(5)="HY000" g ripsx
 s sno=$o(sno(0,"")) i '$l(sno) g ripsx
 s mrk=%z("ds")_sno_%z("ds")
 s ln1=sno(0,sno,0,0),cn1=sno(0,sno,0,1)
 s ln2=sno(0,sno,1,0),cn2=sno(0,sno,1,1)
 i ln1=ln2 s wrk(ln1)=$e(wrk(ln1),1,cn1-1)_mrk_$e(wrk(ln1),cn2+1,9999) g rips0
 s wrk(ln1)=$e(wrk(ln1),1,cn1-1)_mrk
 s ln=ln1 f  s ln=$o(wrk(ln)) q:ln=""!(ln'<ln2)  s wrk(ln)=""
 s wrk(ln2)=$e(wrk(ln2),cn2+1,9999)
 g rips0
ripsx ; exit
 q
 ;
crlf(wrk) ; rip out CRLF sequences
 n ln
 s ln="" f  s ln=$o(wrk(ln)) q:ln=""  s wrk(ln)=$tr(wrk(ln),$c(13,10),"  ")
 q
 ;
rstring(line) ; put strings back into line
 f  q:line'[%z("ds")  s line=$p(line,%z("ds"),1)_^mgtmp($j,"string",$p(line,%z("ds"),2))_$p(line,%z("ds"),3,9999)
 q line
 ;
cdel(sql2,wrk,sql,error) ; find and mark main commands
 n ln,lnd,dec,pn,wrd,wrd0,wrd1,wrd2,pst,pre,txt,txt1,txtn,qnum
 s (qnum,lnd)=0,(dec,txtn)=""
 s ln=""
cdel1 s ln=$o(wrk(ln)) i ln="" g cdelx
 s txt=$$rems(wrk(ln)) i '$l(txt) k wrk(ln) g cdel1
 s txt=$$cdel7(txt)
 s pn=0
cdel2 s pn=pn+1 i pn>$l(txt," ") g cdel1r
 s wrd=$p(txt," ",pn)
 i '$l(wrd) g cdel2 ; this shouldn't happen
 s pre="" f  q:"()"'[$e(wrd,1)  s pre=pre_$e(wrd,1),wrd=$e(wrd,2,9999) i '$l(wrd) q
 s pst="" f  q:"()"'[$e(wrd,$l(wrd))  s pst=$e(wrd,$l(wrd))_pst,wrd=$e(wrd,1,$l(wrd)-1) i '$l(wrd) q
 i wrd="" g cdel2r
 s wrd1=$$lcase^%mgsqls(wrd)
 i $l(wrd1)>128 g cdel2r
 i $l(wrd1)>2,$e(wrd1,$l(wrd1))=";" s wrd2=$e(wrd1,1,$l(wrd1)-1) i $d(sql2(wrd2)) s wrd1=wrd2
 i '$d(sql2(wrd1)) g cdel2r
 s (wrd0,wrd)=wrd1
 i wrd0="transaction"!(wrd0="start")!(wrd0="begin")!(wrd0="commit")!(wrd0="rollback") s pn=$$cdel5(.sql2,$p(wrd0,";",1),txt,pn,.sql,.error) g cdel2
 i wrd0="select" s qnum=qnum+1,wrd=$s(qnum=1:"(",1:"")_%z("dq")_qnum_%z("dq")_%z("dc")_wrd_%z("dc")
 i wrd0'="select",$d(sql2(wrd)),"034"[sql2(wrd) d cdel3(.wrd,.qnum)
 s ^mgtmp($j,"cmnd",qnum,wrd0)=ln
cdel2r s txtn=txtn_" "_pre_wrd_pst
 g cdel2
cdel1r s txtn=$$trim^%mgsqls(txtn," ") i '$l(txtn) k wrk(ln) g cdel1
 s wrk(ln)=txtn,txtn=""
 g cdel1
cdelx ; exit
 s qnummax=qnum
 i qnummax s ln=$o(wrk(""),-1) i $l(ln) s wrk(ln)=wrk(ln)_")"
 q qnummax
 ;
cdel3(wrd,qnum) ; process main-line command
 s wrd=%z("dc")_wrd_%z("dc")
 i wrd["update" s wrd=%z("dc")_"from"_%z("dc")_" "_wrd
 i wrd["delete"!(wrd["update") s qnum=qnum+1,wrd=$s(qnum=1:"(",1:"")_%z("dq")_qnum_%z("dq")_%z("dc")_"select"_%z("dc")_" "_wrd
 q
 ;
cdel5(sql2,wrd,txt,pn,sql,error) ; transaction processing command
 n cmnd,name
 s cmnd=$p($p(txt," ",pn+1),";",1)
 s cmnd=$$lcase^%mgsqls(cmnd)
 i cmnd="transaction"!(wrd="transaction") s pn=pn+1
 i cmnd=""!(cmnd="transaction") s cmnd=wrd
 i cmnd="begin" s cmnd="start"
 s name="" i cmnd="start"!(cmnd="begin") s name=$p(txt," ",pn+1)
 i name'="",$d(sql2(name)) s name=""
 i $l(name)>2,$e(name,$l(name))=";",$d(sql2($e(name,1,$l(name)-1))) s name=""
 i name'="",$d s pn=pn+1
 i cmnd'="begin",cmnd'="start",cmnd'="commit",cmnd'="rollback" s error="invalid command '"_cmnd_"' for transaction processing",error(5)="HY000" q pn
 s sql("txp",0,cmnd)=name i name?1":"1a.e s inv($p(name,":",2,9999))=""
 q pn
 ;
cdel7(line) ; remove ambiguous syntax
 n dlm,len,pn,pn1,pre,post,post1,obr,cbr,i,c,wrd,wrduc
 s dlm="substring"
 s len=$l(line,dlm)
 i len<2 q line
 s pn=len
cdel71 s pre=$p(line,dlm,1,pn-1),post=$p(line,dlm,pn,9999)
 i post'?." "1"("1e.e g cdel71
 s (obr,cbr)=0 f i=1:1 s c=$e(post,i) s:c="(" obr=obr+1 s:c=")" cbr=cbr+1 i obr,obr=cbr q
 i 'obr g cdel71
 i obr'=cbr g cdel71
 s post1=$e(post,i+1,99999)
 s post=$e(post,1,i)
 f pn1=1:1:$l(post," ") s wrd=$p(post," ",pn1) d
 . s wrduc=$$lcase^%mgsqls(wrd)
 . i wrduc="from"!(wrduc="for") s $p(post," ",pn1)=","
 . q
 s line=pre_dlm_post_post1
 s pn=pn-1 i pn>1 g cdel71
 q line
 ;
rems(txt) ; trim and remove surplus spaces from txt
 n pn,wrd,txt1
 i '$l(txt) q
 s txt=$$trim^%mgsqls(txt," ") i '$l(txt) q
 f pn=1:1:$l(txt," ") s txt1=$p(txt," ",pn+1,9999) i txt1?1" ".e s txt1=$$ltrim^%mgsqls(txt1," "),txt=$p(txt," ",1,pn)_" "_txt1
 q txt
 ;
remsc(txt) ; remove spaces from comma in context of natural separator
 n pn,wrd,txt1
 f pn=1:1 q:txt'[" "!(pn=$l(txt," "))  s wrd=$p(txt," ",pn) q:wrd=""  s txt1=$p(txt," ",pn+1,9999) i $e(wrd,$l(wrd))=","!($e(txt1,1)=",") s txt=$p(txt," ",1,pn)_$p(txt," ",pn+1,9999),pn=pn-1
 q txt
 ;
cog ; cognos translations
 s ok=0
 i $g(sql(1,1))'?1"select ".e q
 i $g(sql(2,1))'?1"select min(".e q
 i $g(sql(2,2))'?1"from ".e q
 s sel=$p($g(sql(1,1)),"select ",2)
 s cname=$p($p($g(sql(2,1)),"select min(",2),")",1)
 s sel1="",com="" f i=1:1:$l(sel,",") s x=$p(sel,",",i),sel1=sel1_com_cname_" "_$p(x," ",2),com=","
 k line
 s ok=1
 s line(1)="select distinct "_sel1
 s line(2)=sql(2,2)
 s line(3)="where "_cname_" > -7"
 m ^mgtmp($j,"translate")=line
 ;
 ;s line(1)="select distinct a.lab membercaption3, a.lab usevalue, a.lab membercaption6, a.lab displayvalue"
 ;s line(2)="from lab-test a"
 ;
 ;sql(0,1)=%z("dq"_"1"_%z("dq")
 ;sql(1,1)="select t0.c0 membercaption3,t0.c1 usevalue,t0.c0 membercaption6,t0.c1 displayvalue"
 ;sql(1,2)="from "_%z("dq")_"2"_%z("dq") t0"
 ;sql(1,3)="order by 4 asc"
 ;sql(2,1)="select min(lab-test.lab) c0,lab-test.lab c1"
 ;sql(2,2)="from lab-test lab-test"
 ;sql(2,3)="group by lab-test.lab,lab-test.lab"
 q
 ;
test ; test
 k
 d gvars^%mgsqlv("",.%z)
 g test2
 set line(1)="select  t0.c0 membercaption3 , t0.c1 usevalue , t0.c0 membercaption6 , t0.c1 displayvalue"
 set line(2)="from  ("
 set line(3)="select  min(lab-test.lab) c0 , lab-test.lab c1"
 set line(4)="from  lab-test lab-test"
 set line(5)="group  by lab-test.lab , lab-test.lab) t0"
 set line(6)="order  by 4 asc"
 s qnummax=$$main(.sql,.line)
 k %z
 q
test1 ;
 set line(1)="select a.pat-num,   a.pat-nam"
 set line(2)="into :xxx, :yyy"
 set line(3)="from patient a"
 set line(4)="where a.pat-num > :strt and a.pat-num [ ""xxx"""
 s qnummax=$$main(.sql,.line)
 k %z
 q
test2 ;
 s line(1)="select distinct a.num, a.name from patient a"
 s qnummax=$$main(.sql,.line)
 k %z
 q
 ;

%mgsqlp1
%mgsqlp1 ;(CM) sql language processor ; 28 Jan 2022  10:02 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlp1") q
 ;
main(qnummax,sql2,wrk,sql,error) ; entry
 n blk
 d blks(qnummax,.sql2,.wrk,.blk,.error) i $l(error) g exit
 d subs(qnummax,.sql2,.blk,.error) i $l(error) g exit
 d extr(qnummax,.sql2,.blk,.tmp,.error) i $l(error) g exit
 d grpx(qnummax,.sql2,.blk,.tmp,.error) i $l(error) g exit
 d reds(qnummax,.sql2,.blk,.tmp,.error) i $l(error) g exit
 d logb(qnummax,.sql2,.blk,.tmp,.error) i $l(error) g exit
 d sqlb(qnummax,.sql2,.blk,.tmp,.sql,.error) i $l(error) g exit
 d updx(qnummax,.sql2,.blk,.tmp,.sql,.error) i $l(error) g exit
 d puts(qnummax,.sql,.error) i $l(error) g exit
 d unix(qnummax,.sql2,.blk,.sql,.error) i $l(error) g exit
exit ; exit
 q
 ;
blks(qnummax,sql2,wrk,blk,error) ; break query into logic blocks
 n i,x,ln,ln1,lna,lnz,txt,txt1,cn,cn1,cna,cnz,rem,blkno,obr,cbt,lobr,tcbr,char,no,delim,delimb,qnum
 s blkno=1000
 s qnum=qnummax i 'qnum g blks3
blks1 s delim=%z("dq")_qnum_%z("dq")
 s ln="" f  s ln=$o(wrk(ln)) q:ln=""  s txt=wrk(ln) i txt[delim q
 s lobr=0,txt1=$p(txt,delim,1),ln1=ln,cn1=$l(txt1)
 f  s:cn1=0 ln1=$o(wrk(ln1),-1),txt1=$s($l(ln1):wrk(ln1),1:""),cn1=$l(txt1) q:ln1=""  i cn1 s char=$e(txt1,cn1),cn1=cn1-1 q:char'=" "&(char'="(")  s:char="(" lobr=lobr+1,lobr(lobr,0)=ln1,lobr(lobr,1)=cn1+1
 s no=""
blks2 s no=$o(lobr("")) i no="" g blks3
 s lna=lobr(no,0),cna=lobr(no,1)
 d blks4 i $l(error) q
 k tcbr s tcbr=0,txt1=wrk(lnz),ln1=lnz,cn1=cnz
 f  s char=$e(txt1,cn1) s:char="" ln1=$o(wrk(ln1)),txt1=$s($l(ln1):wrk(ln1),1:""),cn1=1,char=$e(txt1,cn1) q:ln1=""  s cn1=cn1+1 q:char'=" "&(char'=")")  s:char=")" tcbr=tcbr+1,tcbr(tcbr,0)=ln1,tcbr(tcbr,1)=cn1-1
 s rem=lobr i tcbr<lobr s rem=tcbr
 s x="" f i=1:1:rem s x=$o(lobr("")) q:x=""  s $e(wrk(lobr(x,0)),lobr(x,1))=" " k lobr(x)
 s x="" f i=1:1:rem s x=$o(tcbr("")) q:x=""  s $e(wrk(tcbr(x,0)),tcbr(x,1))=" " k tcbr(x)
 s blkno=blkno-1,blk=0,delimb=%z("dq")_"b"_blkno_%z("dq")
 i lna=lnz s txt=$e(wrk(lna),cna+1,cnz-1) d blksa s txt1=$e(wrk(lna),1,cna-1)_delimb_$e(wrk(lna),cnz+1,9999) k wrk(lna) i $l(txt1) s wrk(lna)=txt1 g blks21
 s txt=$e(wrk(lna),cna+1,9999) d blksa s txt1=$e(wrk(lna),1,cna-1)_delimb k wrk(lna) i $l(txt1) s wrk(lna)=txt1
 s ln1=lna f  s ln1=$o(wrk(ln1)) q:ln1=""!(ln1'<lnz)  s txt=wrk(ln1) d blksa k wrk(ln1)
 s txt=$e(wrk(lnz),1,cnz-1) d blksa s txt1=$e(wrk(lnz),cnz+1,9999) k wrk(lnz) i $l(txt1) s wrk(lnz)=txt1
blks21 g blks2
blks3 s qnum=qnum-1 i qnum>0 g blks1
 s blkno=0,blk=0,ln=""
 f  s ln=$o(wrk(ln)) q:ln=""  s txt=wrk(ln) d blksa
 q
 ;
blks4 ; mark out scope of logic block
 n ln1,cn1,cn0,txt1,char,obr,cbr,x
 s ln1=lna,txt1=wrk(ln1),cn0=cna
 s obr=0,cbr=0,(lnz,cnz)=0
blks41 f cn1=cn0:1:$l(txt1) s char=$e(txt1,cn1) s:char="(" obr=obr+1 s:char=")" cbr=cbr+1 i obr=cbr s cnz=cn1 q
 i 'cnz s x=$o(wrk(ln1)) i $l(x) s ln1=x,txt1=wrk(ln1),cn0=1 g blks41
 i 'cnz s error="error in the bracketing of sql statements",error(5)="HY000" q
 s lnz=ln1
 q
 ;
blksa ; add line to isolated block
 i txt="" q
 s blk=blk+1,blk(blkno,blk)=txt
 q
 ;
subs(qnummax,sql2,blk,error) ; restructure query wrt (sub) query bodies
 n delim,ok,blkno,ln,txt,qnum
 i 'qnummax q
 s qnum=qnummax
subs1 s delim=%z("dq")_qnum_%z("dq")
 s ok=0,blkno="" f  q:ok  s blkno=$o(blk(blkno)) q:blkno=""  s ln="" f  s ln=$o(blk(blkno,ln)) q:ln=""  s txt=blk(blkno,ln) i txt[delim s ok=1 q
 d subs4
 s qnum=qnum-1 i qnum>0 g subs1
 q
 ;
subs4 ; mark out block for (sub) query
 n ln1,lnz,cn1,cn0,cnz,txt1,char,ok,x,wrd
 s ln1=ln,txt1=blk(blkno,ln1),cn0=$l($p(txt1,delim,1))+1
 s ok=0,cnz=0,lnz=0
subs41 f cn1=cn0:1:$l(txt1) s char=$e(txt1,cn1) s:"{( "'[char lnz=ln1,cnz=cn1 i char="{",$e(txt1,cn1,cn1+$l(%z("dc"))-1)=%z("dc") s wrd=$p($e(txt1,cn1,9999),%z("dc"),2) i $l(wrd),$l(wrd)<128,$d(sql2(wrd)),sql2(wrd)=4 s ok=1 q
 i 'ok s x=$o(blk(blkno,ln1)) i $l(x) s ln1=x,txt1=blk(blkno,ln1),cn0=1 g subs41
 i 'ok s lnz=ln1,cnz=cn1
 s blk(blkno,lnz)=$e(blk(blkno,lnz),1,cnz)_delim_$e(blk(blkno,lnz),cnz+1,9999)
 q
 ;
extr(qnummax,sql2,blk,tmp,error) ; extract all (sub) queries
 n delim,ln,ln1,nodel,insub,txt,txt1,blkno,ok,qnum
 i qnummax=0 g extr4
 s qnum=qnummax
extr1 s delim=%z("dq")_qnum_%z("dq")
 s ok=0,blkno="" f  q:ok  s blkno=$o(blk(blkno)) q:blkno=""  s ln="" f  s ln=$o(blk(blkno,ln)) q:ln=""  s txt=blk(blkno,ln) i txt[delim s ok=1 q
 s insub=0,tmp=0
 s ln=ln-1
extr2 s ln=$o(blk(blkno,ln)) i ln="" g extr4
 s txt1=blk(blkno,ln),nodel=$l(txt1,delim)
 i nodel=3 s txt=$p(txt1,delim,2) d extra q:$l(error)  s txt1=$p(txt1,delim,1)_delim_$p(txt1,delim,3),blk(blkno,ln)=txt1 g extr3
 i nodel=2,'insub s insub=1 s txt=$p(txt1,delim,2) d extra q:$l(error)  s txt1=$p(txt1,delim,1)_delim,blk(blkno,ln)=txt1 g extr2
 i nodel=2,insub s txt=$p(txt1,delim,1) d extra q:$l(error)  s txt1=$p(txt1,delim,2),blk(blkno,ln)=txt1 g extr3
 i insub s txt=blk(blkno,ln) d extra q:$l(error)  k blk(blkno,ln)
 g extr2
extr3 s qnum=qnum-1,tmp=0 i qnum>0 g extr1
extr4 ; add update as 'subquery zero'
 s blkno=0,qnum=0,tmp=0,ln="" f  s ln=$o(blk(blkno,ln)) q:ln=""  s txt=blk(blkno,ln) d extra i $l(error) q
 q
 ;
extra ; add text to temporary (by (sub) query) array
 n i,n
 s txt=$$trim^%mgsqls(txt," ")
 i '$l(txt) q
 f i=2:2 s n=$p(txt,%z("dq"),i) q:n'?1n.n  i n<qnum s error="error in brackets with respect to sub-statements "_n_" and "_qnum,error(5)="HY000" q
 i $l(error) q
 s tmp=tmp+1,tmp(qnum,tmp)=txt,txt=""
 q
 ;
grpx(qnummax,sql2,blk,tmp,error) ; look out for group/order in wrong place and try to correct
 n ln,grp,ord,move,txt,qnum
 s qnum=0
grpx1 s qnum=qnum+1 i '$d(tmp(qnum)) q
 s ln=0,(grp,ord,move)=0
grpx2 s ln=ln+1 i '$d(tmp(qnum,ln)) g grpx3
 s txt=tmp(qnum,ln)
 i $e(txt,1,5+$l(%z("dc")))=(%z("dc")_"group") s grp=ln
 i $e(txt,1,5+$l(%z("dc")))=(%z("dc")_"order") s ord=ln
 i txt[%z("dq"),(ord!grp) s move=1
 g grpx2
grpx3 i 'move g grpx1
 i grp s tmp(qnum,ln)=tmp(qnum,grp),ln=ln+1 k tmp(qnum,grp)
 i ord s tmp(qnum,ln)=tmp(qnum,ord),ln=ln+1 k tmp(qnum,ord)
 g grpx1
 ;
reds(qnummax,sql2,blk,tmp,error) ; reduce query + logic block
 n blkno,blkno1,ln,qnum,qnum1,txt,txt1,pn,trans
 s blkno="" f  s blkno=$o(blk(blkno)) q:blkno=""  s ln="",blk=0 f  s ln=$o(blk(blkno,ln)) q:ln=""  s txt=$$rems^%mgsqlp(blk(blkno,ln)) k blk(blkno,ln) i $l(txt) s blk=blk+1,blk(blkno,blk)=txt
 s qnum="" f  s qnum=$o(tmp(qnum)) q:qnum=""  s ln="",tmp=0 f  s ln=$o(tmp(qnum,ln)) q:ln=""  s txt=$$rems^%mgsqlp(tmp(qnum,ln)) i $l(txt) s tmp=tmp+1,tmp(qnum,tmp)=txt
 s blkno=""
reds1 s blkno=$o(blk(blkno)) i blkno="" g reds4
 s ln=""
reds2 s ln=$o(blk(blkno,ln)) i ln="" g reds1
 s txt=blk(blkno,ln)
 s pn=0
reds3 s pn=pn+2,blkno1=$p(txt,%z("dq"),pn) i blkno1="" g reds2
 i blkno1'?1"b"1n.n g reds3
 s blkno1=$e(blkno1,2,9999)
 i $d(blk(blkno1,2)) g reds3
 s txt1=blk(blkno1,1) i txt1'[%z("dq")!(txt1[" ") g reds3
 s qnum1=$p(txt1,%z("dq"),2)
 s $p(txt,%z("dq"),pn)=qnum1,trans(blkno1)=qnum1,blk(blkno,ln)=txt k blk(blkno1)
 g reds3
reds4 s qnum=$o(tmp(qnum)) i qnum="" g redsx
 s ln=""
reds5 s ln=$o(tmp(qnum,ln)) i ln="" g reds4
 s txt=tmp(qnum,ln)
 s pn=0
reds6 s pn=pn+2,blkno1=$p(txt,%z("dq"),pn) i blkno1="" g reds5
 i blkno1'?1"b"1n.n g reds6
 s blkno1=$e(blkno1,2,9999)
 i $d(trans(blkno1)) s qnum1=trans(blkno1) g reds61
 i $d(blk(blkno1,2)) g reds6
 s txt1=blk(blkno1,1) i txt1'[%z("dq")!(txt1[" ") g reds6
 s qnum1=$p(txt1,%z("dq"),2)
reds61 s $p(txt,%z("dq"),pn)=qnum1,trans(blkno1)=qnum1,tmp(qnum,ln)=txt k blk(blkno1)
 g reds6
redsx ;
 q
 ;
logb(qnummax,sql2,blk,tmp,error) ; make easy to parse logic blocks
 n ln,txt,txt1,blkno,del,log
 s blkno=""
logb1 s blkno=$o(blk(blkno)) i blkno="" q
 s ln="",log=0,txt=""
logb2 s ln=$o(blk(blkno,ln)) i ln="" d logba g logb1
 s txt1=blk(blkno,ln)
logb3 s del=%z("dc") i $l($p(txt1,%z("dq"),1))<$l($p(txt1,%z("dc"),1)) s del=%z("dq")
 i txt1'[%z("dc"),txt1'[%z("dq") s txt=txt_" "_txt1 g logb2
 i del=%z("dq") s txt=txt_" "_$p(txt1,del,1) d logba s txt=del_$p(txt1,del,2)_del d logba s txt1=$p(txt1,del,3,9999) i txt1="" g logb2
 i del=%z("dc") s txt=txt_" "_$p(txt1,del,1) d logba s txt1=$p(txt1,del,2)_$p(txt1,del,3,9999) i txt1="" g logb2
 g logb3
 ;
logba ; add line to final logic block
 n i,n
 s txt=$$trim^%mgsqls(txt," ")
 i '$l(txt) q
 s log=log+1,log(blkno,log)=txt,txt=""
 q
 ;
sqlb(qnummax,sql2,blk,tmp,sql,error) ; make easy to parse sql blocks
 n ln,txt,txt1,qnum
 s qnum=-1
sqlb1 s qnum=qnum+1 i '$d(tmp(qnum)) q
 s ln="",sql=0,txt=""
sqlb2 s ln=$o(tmp(qnum,ln)) i ln="" d sqlba g sqlb1
 s txt1=tmp(qnum,ln)
sqlb3 i txt1'[%z("dc") s txt=txt_" "_txt1 g sqlb2
 s txt=txt_" "_$p(txt1,%z("dc"),1) d sqlba
 s txt1=$p(txt1,%z("dc"),2)_$p(txt1,%z("dc"),3,9999) i txt1="" g sqlb2
 g sqlb3
 ;
sqlba ; add line to final array
 n i,n
 f i=2:2 s n=$p(txt,%z("dq"),i) q:n'?1n.n  d sqlba1
 s txt=$$trim^%mgsqls(txt," ")
 i '$l(txt) q
 s sql=sql+1,sql(qnum,sql)=txt,txt=""
 q
 ;
sqlba1 ; remove redundant brackets from around sub-query link markers
 n pre,pst,len,cn,obr,obr1,cbr,cbr1,br,char
 s pre=$p(txt,%z("dq"),1,i-1),pst=$p(txt,%z("dq"),i+1,9999)
 s len=$l(pre),obr=0 f cn=len:-1 s char=$e(pre,cn) q:char'=" "&(char'="(")  s pre=$e(pre,1,cn-1) i char="(" s obr=obr+1
 s cbr=0 f  s char=$e(pst,1) q:char'=" "&(char'=")")  s pst=$e(pst,2,9999) i char=")" s cbr=cbr+1
 ;ref#19
 ;s br=obr i cbr<obr s br=cbr
 ;i obr=cbr s br=0
 ;s txt=pre_$s(br:" "_$e("((((((((((((",1,br),1:"")_" "_%z("dq")_n_%z("dq")_$s(br:" "_$e("))))))))))))",1,br),1:"")_" "_pst
 s (obr1,cbr1)=0
 i cbr>obr s cbr1=(cbr-obr)
 i obr>cbr s obr1=(obr-cbr)
 s txt=pre_$s(obr1:" "_$e("((((((((((((",1,obr1),1:"")_" "_%z("dq")_n_%z("dq")_$s(cbr1:" "_$e("))))))))))))",1,cbr1),1:"")_" "_pst
 q
 ;
updx(qnummax,sql2,blk,tmp,sql,error) ; now remove update command from body of formatted primary
 n i,x,y,upd,whr,atr,upda
 s (whr,upd,atr)=0,upda=""
 f i=1:1 q:'$d(sql(1,i))  s x=sql(1,i),y=$p(x," ",1) s:y="where" whr=1 s:y="attributes" atr=1 s:y="update" upda=$p(x," ",2,9999) i $l(y),$d(sql2(y)),sql2(y)=3 s upd=upd+1,upd(upd)=x k sql(1,i)
 s x="" f i=1:1 s x=$o(sql(1,x)) q:x=""  s y=sql(1,x) k sql(1,x) s sql(1,i)=y
 f i=1:1 q:'$d(sql(0,i))  s x=sql(0,i),y=$p(x," ",1) i $l(y),$d(sql2(y))!(x[%z("dq")) s upd=upd+1,upd(upd)=x
 k sql(0) f i=1:1 q:'$d(upd(i))  s sql(0,i)=upd(i)
 i atr,'whr k sql(1) f i=1:1 q:'$d(sql(0,i))  i sql(0,i)[%z("dq") k sql(0,i)
 i $d(sql(0,1)),$p(sql(0,1)," ",1)="update",$d(sql(1,2)),$p(sql(1,2)," ",1)="from" s sql(1,2)="from "_upda
 s i=$o(sql(0,""),-1) i i="" q
 s x=sql(0,i) i x'[" " q
 s y=$p(x," ",1) i y[%z("dq") q
 s y=$p(x," ",$l(x," ")) i y'[%z("dq") q
 s sql(0,i)=$p(x," ",1,$l(x," ")-1),sql(0,i+1)=y
 q
 ;
puts(qnummax,sql,error) ; tidy up lines of statement text
 n i,lnd,txt,qnum
 f qnum=0:1 q:'$d(sql(qnum))  f i=1:1 q:'$d(sql(qnum,i))  s txt=$$rems^%mgsqlp(sql(qnum,i)),txt=$$remsc^%mgsqlp(txt),sql(qnum,i)=txt ;$$rstring^%mgsqlp(txt)
 q
 ;
unix(qnummax,sql2,blk,sql,error) ; extract work units for old compiler
 n i,ln,blkno,txt,txt1,qnum,qnum1
 s qnum=-1
unix1 s qnum=qnum+1 i '$d(sql(qnum)) q
 s ln=0
unix2 s ln=ln+1 i '$d(sql(qnum,ln)) g unix1
 s txt=sql(qnum,ln)
 i txt'[(%z("dq")_"b") g unix2
 i qnum>0 s error="union, intersect, except operations not supported for sub-queries",error(5)="HY000" q
 s blkno=$e($p(txt,%z("dq"),2),2,9999)
 f blk=1:1 q:'$d(blk(blkno,blk))!$l(error)  s txt1=blk(blkno,blk) f i=2:2 s qnum1=$p(txt1,%z("dq"),i) q:qnum1=""  s sql("union",qnum1)="" i qnum1["b" s error="precedence not supported for set operations",error(5)="HY000" q
 i $l(error) q
 g unix2
 ;

%mgsqlr
%mqsqlr ;(CM) MGSQL routine management ; 28 Jan 2022  10:02 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlr") q
 ;
zname(var) ; get routine name
 i $$isydb^%mgsqls() q "s "_var_"=$p($zposition,""^"",2)"
 q "s "_var_"=$zn"
 ;
zd(rou) ; routine defined
 s $zt="zde^%mgsqlr" ; new $ztrap set $ztrap="zgoto "_$zlevel_":zde^%mgsqlr"
 i $$isydb^%mgsqls() g zdydb
 x "zr  zl @rou"
 q 1
zde ; error
 q 0
zdydb ; yottadb
 n dev
 s dev=$zd_rou_".m"
 o dev:(readonly) s ok=$t
 c dev
 q ok
 ;
zn(rou) ; get next routine
 q ""
 ;
zr(rou) ; delete routine
 i $$isydb^%mgsqls() g zrydb
 x "zr  zs @rou"
 q 1
zrydb ; yottadb
 n dev
 s dev=$zd_rou_".m"
 o dev:(truncate)
 c dev:(delete)
 q 1
 ;
zs(rou,code,mxi) ; save routine
 i $$isydb^%mgsqls() g zsydb
 x "zr  f i=1:1:mxi zi @code zs:i=mxi @rou"
 q 1
zsydb ; yottadb
 n i,dev
 s dev=$zd_rou_".m"
 o dev:(truncate)
 u dev f i=1:1:mxi w @code_$c(10)
 c dev
 zlink dev
 q 1
 ;

%mgsqls
%mgsqls ;(CM) general utilities ; 28 Jan 2022  10:02 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqls") q
 ;
isydb() ; see if this is YottaDB
 n zv
 s zv=$$getzv()
 i zv["YottaDB" q 1
 q 0
 ;
isgtm() ; see if this is GT.M
 n zv
 s zv=$$getzv()
 i zv["GT.M" q 1
 q 0
 ;
isidb() ; see if this is an InterSystems database
 i $zv["ISM" q 1
 i $zv["Cache" q 2
 i $zv["IRIS" q 3
 q 0
 ;
ismsm() ; see if this is MSM
 i $zv["MSM" q 1
 q 0
 ;
isdsm() ; see if this is DSM
 i $zv["DSM" q 1
 q 0
 ;
ism21() ; see if this is M21
 i $zv["M21" q 1
 q 0
 ;
getzv() ; Get $ZV
 ; ISC IRIS:  IRIS for Windows (x86-64) 2019.2 (Build 107U) Wed Jun 5 2019 17:05:10 EDT
 ; ISC Cache: Cache for Windows (x86-64) 2019.1 (Build 192) Sun Nov 18 2018 23:37:14 EST
 ; GT.M:      GT.M V6.3-004 Linux x86_64
 ; YottaDB:   YottaDB r1.22 Linux x86_64
 s $zt="getzve^%mgsqls" ; new $ztrap set $ztrap="zgoto "_$zlevel_":getzve^%mgsqls"
 ; +not_ydb
 q $zv
 ; -not_ydb
 ; +ydb
 ; q $zyrelease
 ; -ydb
getzve ; Error
 q $zv
 ;
getzvv() ; Get version from $ZV
 n zv,i,ii,x,version
 s zv=$$getzv()
 i $$isidb() d  q version
 . f i=1:1 s x=$p(zv," ",i) q:x=""  i x["(Build" s version=$p(zv," ",i-1) q
 . q
 s x=$$isydb()
 i x=1 s version=$p($p(zv," V",2)," ",1) q version
 i x=2 s version=$p($p(zv," r",2)," ",1) q version
 s version="" f i=1:1 s x=$e(zv,i) q:x=""  i x?1n d  q
 . f ii=i:1 s x=$e(zv,ii)  q:x=""!('((x?1n)!(x=".")))  s version=version_x
 . q
 q version
 ;
getsys() ; Get system type
 n systype
 s systype=$s($$isidb()>2:"IRIS",$$isidb()=2:"Cache",$$isidb()=1:"ISM",$$ism21():"M21",$$ismsm():"MSM",$$isdsm():"DSM",$$isydb()>1:"YottaDB",$$isgtm()=1:"GTM",1:"")
 q systype
 ;
crc(str,mode) ; cyclic redundancy check
 n x,i
 ; +not_ydb
 q $zcrc(str,mode)
 ; -not_ydb
 s x=0 f i=1:1:$l(str) s x=x+$a(str,i)
 q x
 ;
error() ; get last error
 i $$isydb() q $zs
 q $ze
 ;
seterror(v) ; Set error
 ; +not_ydb
 s $ze=v
 ; -not_ydb
 q
 ;
uci() ; get uci name
 i $$isydb() q $zg
 x "s uci=$namespace"
 q uci
 ;
cuci(uci) ; change uci
 i $$isydb() q $zg
 x "zn uci"
 q 1
 ;
gtmgr ; restore global
 s dev="/opt/gtm63/cm.go"
 o dev:(readonly)
 u dev f i=1:1 r x q:x=""  s ref=$p(x,$c(1),1),data=$p(x,$c(1),2),@ref=data
 c dev
 q
 ;
flush() ; flush output buffer
 i $$isydb() q
 w *-3
 q
 ;
trim(x,chrs) ; trim leading/trailing spaces from text
 q $$ltrim($$rtrim(x,chrs),chrs)
 ;
ltrim(x,chrs) ; trim leading spaces from text
 i chrs="" s chrs=" "
 f  q:chrs'[$e(x,1)  s x=$e(x,2,9999) i x="" q
 q x
 ;
rtrim(x,chrs) ; trim trailing spaces from text
 n len
 i chrs="" s chrs=" "
 s len=$l(x) f  q:chrs'[$e(x,len)  s x=$e(x,1,len-1),len=len-1 i x="" q
 q x
 ;
rreplace(x,this,with) ; recursive replace
 f  q:$e(x,1)'[this  s x=$p(x,this,1)_with_$p(x,this,2,9999)
 q x
 ;
ucase(x) ; convert string to upper-case
 q $tr(x,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
 ;
lcase(x) ; convert string to lower-case
 q $tr(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz")
 ;
hextodec(x) ; convert hexadecimal to decimal
 n len,d,n,c
 ;w !,">>>",x
 s len=$l(x),x=$$lcase(x)
 s d=0
 f n=len:-1:1 s c=$e(x,n),d=d+(($f("0123456789abcdef",c)-2)*(16**(len-n))) ;w !,c," = ",len," ",n," ",d," ### ",$f("0123456789abcdef",c)-2," ### ",16**(len-n)," === ",($f("0123456789abcdef",c)-2)*(16**(len-n))
 w !
 q d
 ;
urldecode(x) ; URL decode
 n y,cx,xy,i
 s y=""
 f i=1:1:$l(x) s cx=$e(x,i) q:cx=""  d
 . s cy=cx
 . i cx="+" s cy=" "
 . i cx="%" s cy=$c($$hextodec($e(x,i+1,i+2))) s i=i+2
 . s y=y_cy
 . q
 q y
 ;
cdate() ; current date
 q $p($h,",",1)
 ;
ctime() ; current time
 q $p($h,",",2)
 ;
ts() ; time stamp
 q $h
 ;
mv() ; missing value
 q ""
 ;
age(mdate) ; calculate age
 q (+$h-mdate)\365.25
 ;
dsep() ; get date separator
 n sep
 s sep="/"
 ; +not_ydb
 i $$isidb() s sep=$ZU(122,8) i sep="" s sep="/"
 ; -not_ydb
 q sep
 ;
ddate(mdate,format) ; decode M date
 n d,m,y,ddate,sep
 i mdate="" q ""
 s sep=$$dsep()
 s ddate=$zd(mdate,1)
 s d=$p(ddate,sep,2)
 s m=$p(ddate,sep,1)
 s y=$p(ddate,sep,3)
 i $$isydb(),y<100 d
 . i mdate<58074 s y=y+1900
 . i mdate'<58074 s y=y+2000
 . q
 i '$$isydb(),y<100 d
 . i mdate<58074 s y=y+1900
 . q
 s ddate=y_"-"_m_"-"_d
 q ddate
 ;
edate(ddate,format) ; encode M date
 n dd,dj,djstr,dl,dlm,dm,dy,i,mdate,x,y,ok
 i ddate="" q ""
 s ddate=$$ltrim(ddate," ")
 i ddate?8n s dy=$e(ddate,1,4),dm=$e(ddate,5,6),dd=$e(ddate,7,8) g edate1
 i ddate?4n1"-"2n1"-"2n s dy=$p(ddate,"-",1),dm=$p(ddate,"-",2),dd=$p(ddate,"-",3) g edate1
 i ddate["." s dlm="."
 i ddate["," s dlm=","
 i ddate["/" s dlm="/"
 i ddate[" " s dlm=" "
 s dd=$p(ddate,dlm,1)
 s dm=$p(ddate,dlm,2)
 s dy=$p(ddate,dlm,3)
edate1 s mdate=""
 i dm'?1N.N d
 . s dm=$$lcase(dm)
 . f i=1:1:12 i $p("jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec",",",i)=dm s dm=i q
 . i dm'?1n.n s dm=0
 . q
 i ((dd'<1)&(dd'>31)&(dm'<1)&(dm'>12)&(dy'<0)&(dy'>9999)) d
 . i dy<100,dy<30 s dy=dy+2000
 . i dy<100,dy'<30 s dy=dy+1900
 . s dl=0
 . i (((dy#4)=0)&(dy'=1900)) s dl=1
 . s ok=1
 . i ((dd>30)&((dm=4)!(dm=6)!(dm=9)!(dm=11))) s ok=0
 . i ((dm=2)&(((dl=0)&(dd>28))!((dl=1)&(dd>29)))) s ok=0 ;
 . i (ok=1) d
 .. i dl=0 s djstr=$p("000,031,059,090,120,151,181,212,243,273,304,334",",",dm),dj=djstr+dd
 .. i dl'=0 s djstr=$p("000,031,060,091,121,152,182,213,244,274,305,335",",",dm),dj=djstr+dd
 .. s x=(dy-1841)*365
 .. s y=(dy-1841)\4
 .. s mdate=dj+x+y
 .. i (dy>1900) s mdate=(mdate-1)
 .. i (dy'>1900) s mdate=mdate
 .. q
 . q
 q mdate
 ;
dtime(mtime,format) ; decode M time
 n h,m,s
 i mtime="" q ""
 i mtime["," s mtime=$p(mtime,",",2)
 s h=mtime\3600,s=mtime-(h*3600),m=s\60,s=s#60
 q $s(h<10:"0",1:"")_h_":"_$s(m<10:"0",1:"")_m_":"_$s(s<10:"0",1:"")_s
 ;
etime(dtime,format) ; encode M time
 n h,m,s
 i etime="" q ""
 s h=$p(dtime,":",1),m=$p(dtime,":",2),s=$p(dtime,":",3)
 q (h*3600)+(m*60)+s
 ;
logerror(text,title) ; log error condition
 d logevent(text,title,"ERROR") ; log
 q
 ;
logevent(record,title,context) ; log event
 s n=$i(^mglog)
 s ^mglog(n,0)=context_":"_title_":"_$$ddate($h)_"; "_$$dtime($h)
 s ^mglog(n,1)=record
 q
 ;
logarray(array,title,context) ; log event
 s n=$i(^mglog)
 s ^mglog(n,0)=context_":"_title_":"_$$ddate($h)_"; "_$$dtime($h)
 m ^mglog(n,1)=array
 q
 ;

%mgsqlv
%mqsqlv ;(CM) sql - validate query ; 28 Jan 2022  10:03 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv") q
 ;
main(dbid,line,sql,error) ; verify query
 k ^mgtmp($j)
 k %link,%delrec,union,adhoc,error
 s error=""
 s qnummax=$$main^%mgsqlp(.sql,.line,.error) i $l(error) g exit
 i '$d(sql(0,1)),$d(sql("txp",0)) s unique=1 g exit
 i '$d(sql(0,1)) s error="no sql script !!!",error(5)="HY000" g exit
 d upd(dbid,.sql,.error) i $l(error) g exit
 i $d(^mgtmp($j,"upd","delete")),hilev g exit
 i $p(sql(0,1)," ",1)="call" d sp(dbid,.sql,.error) g exit
 f qnum=1:1:qnummax d verify(dbid,.sql,qnum,.error) i $l(error) q
 i $l(error) g exit
 f qnum=1:1:qnummax s ^mgtmp($j,"subq",qnum)=qnummax-(qnum-1)
 i $d(%zq("drec",0)) d delrec i $l(error) g exit
 d unique
 s i="" f  s i=$o(^mgtmp($j,"where",i)) q:i=""  f j=1:1 q:'$d(^mgtmp($j,"where",i,j))  s x=^mgtmp($j,"where",i,j) i x[%z("dq") d sqidx
 i '$d(^mgtmp($j,"upd","insert")),'$d(^mgtmp($j,"from",1,1)) s error="no table to select 'from'",error(5)="HY000" g exit
 i '$d(^mgtmp($j,"upd","insert")),'$d(^mgtmp($j,"sel",1,1)) s error="no 'select' items",error(5)="HY000" g exit
 ;
exit i $l(error) d error
 k ans,arg,bkt,cmnd,cod,com,cond,d,done,dx,dy,f,tname,alias,fr,fun,funk,i,ii,j,k,l,l1,l2,lc,lf,lin,num,os,p,rf,selarg,selct,ss1,ss2,to,typ,whct,x,y,z
 q
 ;
sqidx ; index subqueries against parents
 s subq=$p(x,%z("dq"),2),x=^mgtmp($j,"where",i,j-1)
 s ^mgtmp($j,"sqcom",subq)=x
 i x="exists" s ^mgtmp($j,"ktmp",subq)="" q
 i x="not exists" s ^mgtmp($j,"ktmp",subq)="" q
 i x="in" s v=^mgtmp($j,"where",i,j-2),^mgtmp($j,"ktmp",subq)="",^mgtmp($j,"notnull",i,v)="",^mgtmp($j,"sqin",v)=subq q
 i x="not in" s v=^mgtmp($j,"where",i,j-2),^mgtmp($j,"ktmp",subq)="",^mgtmp($j,"notnull",i,v)="" q
 i $d(^mgtmp($j,"unique",subq)),'^mgtmp($j,"unique",subq) s ^mgtmp($j,"ktmp",subq)="" q
 q
 ;
unique ; determine whether unique result is to be returned
 n outsel,agno,i,x,y
 i qnum=1,$d(update) s ^mgtmp($j,"unique",1)=1 q
 f i=1:1:qnum d
 . s outsel=$g(^mgtmp($j,"outsel",i))+0,agno=0
 . s x="" f  s x=$o(^mgtmp($j,"sqag",i,x)) q:x=""  s y="" f  s y=$o(^mgtmp($j,"sqag",i,x,y)) q:y=""  s agno=agno+1
 . i outsel=agno s ^mgtmp($j,"unique",i)=1
 . q
 i $d(^mgtmp($j,"group",1)) k ^mgtmp($j,"unique",1) q
 q
 ;
error ; format error message
 n cmnd,qnum,ln
 s ln="",qnum=""
 i $d(error(1)) s cmnd=error(0),qnum=error(1) d error1
 i ln'="" s error("l")=ln
 q
 ;
error1 ; look for line number
 n i,x
 i $d(^mgtmp($j,"cmnd",qnum,cmnd)) s ln=^(cmnd) q
 i $d(^mgtmp($j,"cmnd",0,cmnd,qnum)) s ln=^(qnum) q
 f i=1:1:$l(qnum,",") s x=$p(qnum,",",i) i $l(x),$d(^mgtmp($j,"cmnd",0,cmnd,x)) s ln=^(x) q
 q
 ;
upd(dbid,sql,error) ; validate update directive
 n qnum,ln
 s qnum=0,ln=1
 i $p(sql(qnum,ln)," ",1)="update" d update^%mgsqlv3 i $l(error) q
 i $p(sql(qnum,ln)," ",1)="delete" d delete^%mgsqlv3 i $l(error) q
 i $p(sql(qnum,ln)," ",1)="insert" d insert^%mgsqlv4 i $l(error) q
 i $p(sql(qnum,ln)," ",1)="create" d create^%mgsqlv4(dbid,.sql,.error) q
 i $p(sql(qnum,ln)," ",1)="drop" d drop^%mgsqlv4(dbid,.sql,.error) q
 q
 ;
sp(dbid,sql,error) ; stored procedure
 n qnum,ln,pname,r,ord,type,rou
 s qnum=0,ln=1
 s pname=$p(sql(qnum,ln)," ",2)
 s r=$$prc^%mgsqld(dbid,pname)
 s rou=$p(r,"\",2)
 s rc=$$pdata^%mgsqld(dbid,pname,.%data)
 s qnum=1
 s cname="" f  s cname=$o(%data(cname)) q:cname=""  d
 . s ord=$p(%data(cname),"\",1)+0
 . s type=$p(%data(cname),"\",2)
 . s ^mgtmp($j,"outsel",qnum,ord)=cname
 . q
 s ^mgtmp($j,"sp")=rou
 s error="\sp\"
 q
 ;
verify(dbid,sql,qnum,error) ; verify current line
 n ln,cmnd,arg
 f ln=1:1 q:'$d(sql(qnum,ln))  i $p(sql(qnum,ln)," ",1)="from" q
 i '$d(sql(qnum,ln)) s error="missing/misplaced 'from' statement in (sub) query "_qnum,error(5)="HY000",error(0)="select",error(1)=qnum g verifyx
 s cmnd=$p(sql(qnum,ln)," ",1),arg=$p(sql(qnum,ln)," ",2,9999)
 i cmnd="from" d from^%mgsqlv5(dbid,.sql,qnum,arg,.error) i $l(error) g verifyx
 s ln=0
verify1 s ln=ln+1 i '$d(sql(qnum,ln)) g verifyx
 s cmnd=$p(sql(qnum,ln)," ",1),arg=$p(sql(qnum,ln)," ",2,9999)
 i ln=1,cmnd'="select" s error="missing/misplaced 'select' statement in (sub) query "_qnum,error(5)="HY000",error(0)=cmnd,error(1)=qnum g verifyx
 i cmnd="order",$p(arg," ",1)="by" s arg=$p(arg," ",2,9999)
 i cmnd="group",$p(arg," ",1)="by"  s arg=$p(arg," ",2,9999)
 i cmnd="select" d select^%mgsqlv2(dbid,.sql,qnum,.arg,.error) i $l(error) g verifyx
 i cmnd="where" d where^%mgsqlv1(dbid,.sql,qnum,.arg,.error) i $l(error) g verifyx
 i cmnd="order" d order^%mgsqlv2(dbid,.sql,qnum,.arg,.error) i $l(error) g verifyx
 i cmnd="group" d group^%mgsqlv2(dbid,.sql,qnum,.arg,.error) i $l(error) g verifyx
 i cmnd="having" d having^%mgsqlv2(dbid,.sql,qnum,.arg,.error) i $l(error) g verifyx
 g verify1
verifyx i '$l(error),qnum=1,$d(sql("union",qnum)) s ^mgtmp($j,"sel",qnum,0)="distinct"
 q
 ;
grp ; look for auto-group situation in outer query
 n x,y,z,com,agrp,ok,ln
 i qnum'=1 q
 i sql(qnum,1)["select *" q
 s ok=0 f ln=1:1 q:'$d(sql(qnum,ln))  i $p(sql(qnum,ln)," ",1)="group" s ok=1 q
 i ok q
 s z="",com="",agrp=0 f i=1:1 q:'$d(^mgtmp($j,"outsel",qnum,i))  s x=^mgtmp($j,"sel",1,i) i x[%z("dsv") s x=$p(x,%z("dsv"),2) s:x'?.1"."1a.e agrp=0 q:x'?.1"."1a.e  s:x'["(" z=z_com_x,com="," s:x["(" agrp=1
 i 'agrp!'$l(z) q
 s z="group by "_z
 s sql(qnum,ln)=z
 q
 ;
delrec ; validate the delete records declaration
 n alias,qnum
 s alias=$p(%zq("drec",0),":",1)
 f qnum=1:1 q:'$d(^mgtmp($j,"from","x",qnum))  i $d(^mgtmp($j,"from","x",qnum,alias)) s %zq("drec",0,alias)="" q
 i '$l($o(%zq("drec",0,""))) s error="alias '"_%zq("drec",0)_"' in 'delete_records' is not defined in the query",error(5)="HY000" q
 q
 ;
trx(wrd) ; data translation 
 n i,ii,arg,arg1,pre,post,type,cn,sqv
 s cn=$i(^mgtmp($j,"trx")),sqv="__evar"_cn
 s type="" f i=1:1 s type=$e(wrd,i) i type?1a q
 f i=2:1 s chr=$e(wrd,i) i chr=":"!(chr?1"""")!(chr?1"{")!(chr?1n)!(chr="") q
 f ii=$l(wrd)-1:-1:1 s chr=$e(wrd,ii) i chr?1""""!(chr?1"}")!(chr?1an)!(chr="") q
 s arg=$e(wrd,i,ii),pre=$e(wrd,1,i-1),post=$e(wrd,ii+1,9999)
 i arg?1":"1a.e s arg1=$e(arg,2,999) i arg1'="" s ^mgtmp($j,"in",arg1)=""
 s ^mgtmp($j,"trx",sqv)=chr
 s ^mgtmp($j,"trx",sqv,1)=arg
 q %z("dsv")_sqv_%z("dsv")
 ;

%mgsqlv1
%mgsqlv1 ;(CM) sql - validate query part 2 ; 28 Jan 2022  10:03 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv1") q
 ;
addwhr(qnum,item) ; add item to where statement
 n wnum
 s wnum=$i(^mgtmp($j,"where",qnum))
 s ^mgtmp($j,"where",qnum,wnum)=item
 q wnum
 ;
where(dbid,sql,qnum,arg,error) ; validate 'where' statement
 n ln,wn,wnum,pred,wrd,word,ex
 s pred="" i $d(^mgtmp($j,"pred",qnum)) s pred=^(qnum)
 i $l(pred) s:$l(arg) arg=" and "_arg s arg="("_pred_")"_arg
 i $l(arg) s ex(1)=arg d where^%mgsqle(.ex,.word,.error) i $l(error) g wherex
 d link^%mgsqlv6(dbid,.sql,qnum,arg,.error)
 s wn=0
where1 s wn=wn+1 i '$d(word(0,wn)) g wherex
 s wrd=word(0,wn)
 i wrd[%z("dsv") s wrd=$$where2(dbid,qnum,wrd,.error) i $l(error) g wherex
 i wrd[%z("df") s wrd=$$where3(qnum,$p(wrd,%z("df"),2),error) i $l(error) g wherex
 s wnum=$$addwhr(qnum,wrd)
 g where1
wherex i $l(error),qnum?1n.n s error(0)="where",error(1)=qnum
 q
 ;
where2(dbid,qnum,item,error) ; validate sql column
 n %d,%defk,%defd,%defm,x,y,z,wrd,typ,qnum1,fun,mfun,alias,tname,cname,alias,snum
 s wrd=item
 i qnum["g" g where2h
 s qnum1=qnum
 s x=$p(wrd,%z("dsv"),2)
 d corelate(.sql,qnum,x,.error) i $l(error) s error=error_": "_x q wrd
 ;;i x'["." s error="column '"_x_"' (in 'where'/'having' statement) is not qualified by table name/alias",error(5)="HY000" q wrd
 s cname=x,fun="" i x["(" s fun=$p(x,"(",1),x=$p(x,"(",2,999) i fun="count"&(x[" ") s fun="cntd",x=$p(x," ",2,999)
 s item=$p(x,")",1)
 d table^%mgsqlv2(dbid,qnum,item,.alias,.tname,.cname,1,.error) i $l(error) q wrd
 ;;s f=$p(x,".",1),(x,cname)=$p(x,".",2)
 s mfun=$$sqlfun^%mgsqlv2(fun) i mfun'="" s wrd=%z("df")_mfun_"("_alias_"."_cname_")"_%z("df") q wrd
 i $l(fun) s error="the 'where' statement must not contain references to sql aggregates",error(5)="HY000" q wrd
 i $d(sql("union",qnum)),'$d(^mgtmp($j,"from","x",qnum,alias)) s error="invalid alias '"_alias_"': 'union' queries cannot be correlated",error(5)="HY000" q wrd
 ;;f j=1:1:qnum q:'$d(^mgtmp($j,"from","x",j))  i $d(^mgtmp($j,"from","x",j,f)) s y=^mgtmp($j,"from","x",j,f),y=^mgtmp($j,"from",j,y),tname=$p(y,"~",1),alias=$p(y,"~",2) q wrd
 ;;i '$d(^mgtmp($j,"from","x",j,f)) s error="column '"_x_"' (in the 'where' statement) is qualified by an unknown table name/alias",error(5)="HY000" q wrd
 g where21
where2h ; Having predicate
 s x=$p(wrd,%z("dsv"),2)
 i x="count(*)" s fun="count" g where23
 i x'["." s error="column '"_x_"' (in 'having' statement) is not qualified by table name/alias",error(5)="HY000" q
 s cname=x,fun="" i x["(" s fun=$p(x,"(",1),x=$p(x,"(",2,999) i fun="count"&(x[" ") s fun="cntd",x=$p(x," ",2,999)
 s item=$p(x,")",1)
 d table^%mgsqlv2(dbid,1,item,.alias,.tname,.cname,0,.error) i $l(error) q
 ;;s f=$p(x,".",1),(x,cname)=$p(x,".",2)
 i $d(sql("union",qnum)),'$d(^mgtmp($j,"from","x",qnum,alias)) s error="invalid alias '"_alias_"': 'union' queries cannot be correlated",error(5)="HY000" q
 ;;i $d(^mgtmp($j,"from","x",1,f)) s y=^mgtmp($j,"from","x",1,f),y=^mgtmp($j,"from",1,y),tname=$p(y,"~",1),alias=$p(y,"~",2)
 ;;i '$d(^mgtmp($j,"from","x",1,f)) s error="column '"_x_"' (in the 'having' statement) is qualified by an unknown table name/alias",error(5)="HY000" q
where21 ; Common
 ;;i tname?@("1"""_%z("dq")_"""1n.n1"""_%z("dq")_"""") d  q:$l(error)  g where22
 ;;. n qnum
 ;;. s qnum=$p(tname,%z("dq"),2)
 ;;. i '$d(^mgtmp($j,"vx",qnum,x)) s error="column '"_x_"' ('where'/'having' statement) is not part of derived table "_alias,error(5)="42S22" q
 ;;. q
 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname),%defm=$$remap^%mgsqlv2(alias,cname) i '%defk,'%defd,'%defm s error="column '"_item_"' ('where'/'having' statement) is not part of table "_tname,error(5)="42S22" q wrd
 s %d=$$col^%mgsqld(dbid,tname,cname) s typ=$p(%d,"\",11)
where22 s item=%z("dsv")_alias_"."_cname_%z("dsv"),snum=$$addselx^%mgsqlv2(qnum,item) s ^mgtmp($j,"wsel",item)=""
 i fun="" q item
where23 i "count,cntd,sum,avg,max,min"'[fun q wrd
 s qnum1=qnum+0
 i x="count(*)" s z="*"_qnum1,wrd=%z("dsv")_"count("_"*"_qnum1_")"_%z("dsv")
 i x'="count(*)" s z=alias_"."_x
 s y=%z("dsv")_fun_"("_z_")"_%z("dsv")
 i fun["(" s y=y_")"
 s snum=$$addselx^%mgsqlv2(qnum1,y)
 s ^mgtmp($j,"wsel",y)=""
 i '$d(^mgtmp($j,"sqag",qnum1,z,fun)) s ^mgtmp($j,"sqag",qnum1,z,fun)=snum
 q wrd
 ;
where3(qnum,mfun,error) ; embedded functions in 'where' statement
 n pn,i,fn,ax,outv,ex,word,zcode,fun,item,snum
 s ax=$g(^mgtmp($j,"e"))+1,^("e")=ax
 s outv="___v"_ax
 s ex(1)=mfun d ex^%mgsqle(outv,.ex,.word,.zcode,.fun,.error) i $l(error) q ""
 f fn=1:1 q:'$d(fun(fn))  f pn=1:1 q:'$d(fun(fn,"p",pn))  s item=$g(fun(fn,"p",pn,1)) i item[%z("dsv") s snum=$$addselx^%mgsqlv2(qnum,item)
 f i=1:1 q:'$d(zcode(i))  f  q:zcode(i)'[%z("df")  d
 . s fn=$p(zcode(i),%z("df"),2)
 . s zcode(i)=$p(zcode(i),%z("df"),1)_fun(fn,"s")_$p(zcode(i),%z("df"),3,999)
 . q
 m ^mgtmp($j,"e",outv)=zcode
 s item=%z("dsv")_outv_%z("dsv"),snum=$$addselx^%mgsqlv2(qnum,item)
 q (%z("dsv")_outv_%z("dsv"))
 ;
corelate(sql,qnum,item,error) ; determine if sql variable comes from different sub-query
 n i,alias
 s alias=$p(item,".",1) i alias="" q
 i $d(^mgtmp($j,"from","x",qnum,alias)) q
 f i=1:1 q:'$d(^mgtmp($j,"from","x",i))  i $d(^mgtmp($j,"from","x",i,alias)) q
 i '$d(^mgtmp($j,"from","x",i,alias)) q
 i $d(sql("union",qnum)),$d(sql("union",i)) s error="'union' (sub) queries may not be correlated",error(5)="HY000" q
 s ^mgtmp($j,"corel",i,qnum,alias)="",^mgtmp($j,"corelx",qnum,i,alias)="",^mgtmp($j,"corel",i,qnum)=0
 s ^mgtmp($j,"corel",i,qnum,alias,x)=""
 q
 ;

%mgsqlv2
%mgsqlv2 ;(CM) sql - validate query part 3 ; 28 Jan 2022  10:03 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv2") q
 ;
addsel(qnum,item) ; add item to output select list
 n snum,snum1
 s snum=$$addselx(qnum,item)
 s snum1=$i(^mgtmp($j,"outsel",qnum))
 s ^mgtmp($j,"outsel",qnum,snum1)=item,^mgtmp($j,"outselx",qnum,item)=snum1
 q snum1
 ;
addselx(qnum,item) ; add item to general select list
 n snum
 s snum=$i(^mgtmp($j,"sel",qnum))
 s ^mgtmp($j,"sel",qnum,snum)=item,^mgtmp($j,"selx",qnum,item)=snum
 q snum
 ;
table(dbid,qnum,item,alias,tname,cname,pred,error) ; check table/alias
 n x,i,alias1,tname1,fr,ok
 s error="",alias="",tname="",cname=item i item["." s alias=$p(item,".",1),cname=$p(item,".",2)
 i cname="" s error="invalid sql column '"_item_"'",error(5)="HY000" q
 i pred d
 . i alias'="" d  q
 . . f i=1:1 q:'$d(^mgtmp($j,"from","x",i))  i $d(^mgtmp($j,"from","x",i,alias)) s x=^mgtmp($j,"from","x",i,alias),x=^mgtmp($j,"from",i,x),tname=$p(x,"~",1),alias=$p(x,"~",2) q
 . . q
 . i alias="" d  q
 . . f i=1:1 q:'$d(^mgtmp($j,"from","x",i))  s alias1="" f  s alias1=$o(^mgtmp($j,"from","x",i,alias1)) q:alias1=""  s x=^mgtmp($j,"from","x",i,alias1),x=^mgtmp($j,"from",i,x),tname1=$p(x,"~",1) i $$defd^%mgsqld(dbid,tname1,cname) s tname=tname1,alias=$p(x,"~",2) q
 . . q
 . q
 i 'pred d
 . i alias'="" d  q
 . . i $d(^mgtmp($j,"from","x",qnum,alias)) s x=^mgtmp($j,"from","x",qnum,alias) s tname=$p(^mgtmp($j,"from",qnum,x),"~",1)
 . . q
 . i alias="" d  q
 . . s fr=0
 . . f i=1:1 q:'$d(^mgtmp($j,"from",qnum,i))  d
 . . . s x=^mgtmp($j,"from",qnum,i),tname1=$p(x,"~",1)
 . . . i cname="*" s fr=fr+1,fr(fr)=i q
 . . . i $$defd^%mgsqld(dbid,tname1,cname) s fr=fr+1,fr(fr)=i
 . . . q
 . . i fr>1 d
 . . . s ok=1 f i=1:1 q:'$d(fr(i))  s x=^mgtmp($j,"from",qnum,fr(i)),tname1=$p(x,"~",1),alias1=$p(x,"~",2) i '$d(^mgtmp($j,"from","z",qnum,"join",cname,alias1)) s ok=0 q
 . . . i ok s fr=1
 . . . q
 . . i fr=0 q
 . . i fr=1 s x=^mgtmp($j,"from",qnum,fr(fr)),tname=$p(x,"~",1),alias=$p(x,"~",2) q
 . . s error="ambiguous column name '"_item_"'",error(5)="HY000" q
 . . q
 . q
 i error'="" q
 ;;i alias="",$d(^mgtmp($j,"from",qnum,2)) s error="ambiguous column '"_item_"'",error(5)="HY000" q
 ;;i alias'="" s tname="" i $d(^mgtmp($j,"from","x",qnum,alias)) s x=^mgtmp($j,"from","x",qnum,alias) s tname=$p(^mgtmp($j,"from",qnum,x),"~",1)
 ;;i alias="" s tname=^mgtmp($j,"from",qnum,1),alias=$p(tname,"~",2),tname=$p(tname,"~",1)
 i tname=""!(alias="") s error="unable to find source of column '"_$s(alias'="":alias_".",1:"")_cname_"'",error(5)="HY000" q
 q
 ;
group(dbid,sql,qnum,arg,error) ; validate 'group by' statement
 n i,item,com,line
 s ^mgtmp($j,"group",qnum)=""
 f i=1:1:$l(arg,",") s item=$p(arg,",",i) d group1(dbid,qnum,i,item,.error) i $l(error) s error(0)="group",error(1)=qnum q
 s line="",com="" f i=1:1 q:'$d(^mgtmp($j,"group",qnum,i))  s line=line_com_^mgtmp($j,"group",qnum,i),com=","
 i line'="" s ^mgtmp($j,"group",qnum)=line
 q
 ;
group1(dbid,qnum,itemno,item,error) ; for each element grouped by
 n %defk,%defd,alias,tname,cname
 d table(dbid,qnum,item,.alias,.tname,.cname,0,.error) i $l(error) q
 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error="column '"_cname_"' (in 'group by' statement) is not part of table '"_tname_"'",error(5)="42S22" q
 s ^mgtmp($j,"group",qnum,itemno)=%z("dsv")_alias_"."_cname_%z("dsv")
 q
 ;
having(dbid,sql,qnum,arg,error) ; validate 'having'
 n qnumh,i,item,x
 s x="count(distinct " f i=1:1:$l(arg,x) q:arg'[x  s arg=$p(arg,x,1)_"cntd("_$p(arg,x,2,999)
 s qnumh=qnum_"g" d where^%mgsqlv1(dbid,sql,qnumh,arg,.error) i $l(error) g havingx
 f i=1:1 q:'$d(^mgtmp($j,"where",qnumh,i))  d
 . s item=^mgtmp($j,"where",qnumh,i)
 . i item[%z("dsv"),$p(item,%z("dsv"),2)'?1a.a1"("1e.e1")" s error="'having' statements can only contain references to sql aggregates",error(5)="HY000" q
 . s ^mgtmp($j,"having",i)=item
 . q
havingx i $l(error) s error(0)="having",error(1)=qnum
 k ^mgtmp($j,"where",qnumh)
 q
 ;
remap(alias,cname) ; look for extra column defined for soft view only
 i alias=""!(cname="") q 0
 i $d(^mgtmp($j,"remap",alias,cname)) q 1
 q 0
 ;
order(dbid,sql,qnum,arg,error) ; validate 'order by'
 n i,argn,item,args
 s argn=$$arg^%mgsqle(arg,.args)
 f i=1:1:args s item=args(i) d order1(dbid,qnum,i,item,.error) i $l(error) s error(0)="order",error(1)=0 q
 q
 ;
order1(dbid,qnum,itemno,item,error) ; validate order by item
 n num,len,sel,dir,i,x,alias,tname,cname,sqag
 s dir="asc" i item[" " s dir=$p(item," ",2),item=$p(item," ",1)
 i dir'="asc",dir'="desc" s error="the 'order' for item '"_item_"' must be defined as 'asc' (ascending) or 'desc' (descending)",error(5)="HY000" q
 i item?1n.n,'$d(^mgtmp($j,"sel",1,item)) s error="invalid 'order by' item no. '"_item_"'",error(5)="HY000" q
 i item?1n.n s num=item,sel=^mgtmp($j,"sel",1,num) g order2
 s sqag="" i item["(",item[")" s sqag=$p(item,"(",1),item=$p($p(item,"(",2,999),")",1)
 d table(dbid,qnum,item,.alias,.tname,.cname,0,.error) i $l(error) q
 s item=alias_"."_cname i sqag'="" s item=sqag_"("_item_")"
 s sel="",len=$l(item,".") f num=1:1 q:'$d(^mgtmp($j,"sel",1,num))  s x=$p(^(num),%z("dsv"),2) i $p(x,".",1,len)=item s sel=%z("dsv")_item_%z("dsv") q
 i '$l(sel) s error="'order by' item '"_item_"' is not in the 'select' statement",error(5)="HY000" q
order2 s ^mgtmp($j,"order",itemno)=sel,^mgtmp($j,"order",itemno,0)=num_"~"_dir
 q
 ;
select(dbid,sql,qnum,arg,error) ; validate 'select' statement
 n opu,op,opu,opn,argn,args,snum,snum1,itemno,item,x
 s op="" i arg?1an.an1" "1e.e s op=$p(arg," ",1),arg=$p(arg," ",2,999)
 s opu=$$lcase^%mgsqls(op)
 i opu'="",opu'="distinct",opu'="top" s error="invalid row operator '"_op_"' in 'select' statement",error(5)="HY000" g selectx
 i opu="distinct" s op=opu
 i opu="top" s op=opu,opn=1 s x=$p(arg," ",1) s:(x?1n.n) opn=x,arg=$p(arg," ",2,999) s op=op_"#"_opn
 s ^mgtmp($j,"sel",qnum,0)=op
 s argn=$$arg^%mgsqle(arg,.args)
 i qnum>1,'$d(sql("union",qnum)),$d(args(2)) s error="sub-query 'select' statements may have only 1 output",error(5)="HY000" g selectx
 s (snum,snum1)=0
 f itemno=1:1 q:'$d(args(itemno))  s item=$$trim^%mgsqls(args(itemno)," ") d select1(dbid,qnum,itemno,item,.error) i $l(error) q
 i $l(error) g selectx
 i qnum'=1,$d(sql("union",qnum)) d union(qnum,.error) i $l(error) g selectx
selectx i $l(error) s error(0)="select",error(1)=qnum
 q
 ;
select1(dbid,qnum,itemno,item,error) ; validate specific item in 'select' line
 n len,as,asl,asv
 s len=$l(item," ")
 i len>1 d
 . s asl=$p(item," ",len)
 . s as="" i len>2 s as=$p(item," ",len-1) s as=$$ucase^%mgsqls(as)
 . i as="as" s asv=$p(item," ",1,len-2)
 . i as'="as" s asv=$p(item," ",1,len-1)
 . i $l(asv,"(")'=$l(asv,")") q
 . i '($l(asv,"""")#2) q
 . s item=asv,^mgtmp($j,"map",qnum,itemno)=asl
 . q
 i item'["(",item?1a.e1"."1"{".e1"}"1"."1a.e s item=%z("dsv")_item_%z("dsv"),snum=$$addsel(qnum,item) q
 i item?1a.e,item'["(",item'[" ",item'["*" d select2(dbid,qnum,itemno,item,.error) q
 i item="*"!(item?1a.e1"."1"*") d select3(dbid,qnum,itemno,item,.error) q
 i item?1a.a1"("1e.e1")" d select4(dbid,qnum,itemno,item,.error) q
 d select5(qnum,item,.error)
 q
 ;
select2(dbid,qnum,itemno,item,error) ; columns
 n %defk,%defd,%defm,ok,alias,tname,cname
 d table(dbid,qnum,item,.alias,.tname,.cname,0,.error) i $l(error) q
 i item?1a.e1"."1"{".e1"}"1"."1a.e g select21
 i tname?@("1"""_%z("dq")_"""1n.n1"""_%z("dq")_"""") d  q:$l(error)  g select21
 . n qnum
 . s qnum=$p(tname,%z("dq"),2)
 . i '$d(^mgtmp($j,"vx",qnum,cname)) s error="'select' item '"_cname_"' is not a column of derived table "_alias,error(5)="42S22" q
 . q
 s ok=0,%defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname),%defm=$$remap(alias,cname) s ok=%defk!%defd!%defm
 i 'ok s error="'select' item '"_cname_"' is not a column of table '"_tname_"'",error(5)="42S22" q
select21 s item=%z("dsv")_alias_"."_cname_%z("dsv"),snum=$$addsel(qnum,item)
 q
 ;
select3(dbid,qnum,itemno,item,error) ; x="*" - get all key & data columns
 n %ind,%data,pkey,ino,pkeyx,datax,i,n,x,r,sc,alias,tname,cname
 d table(dbid,qnum,item,.alias,.tname,.cname,0,.error) i $l(error) q
 s ino=$$pkey^%mgsqld(dbid,tname),sc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 s pkey=0 f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) i x?1a.e s pkey=pkey+1,pkey(pkey)=x,pkeyx(x)=pkey
 i qnum'=1,$d(pkey(1)) s item=pkey(1),item=%z("dsv")_alias_"."_item_%z("dsv"),snum=$$addsel(qnum,item) q
 f i=1:1 q:'$d(pkey(i))  s item=pkey(i) s item=%z("dsv")_alias_"."_item_%z("dsv"),snum=$$addsel(qnum,item)
 s sc=$$data^%mgsqld(dbid,tname,.%data)
 s x="" f  s x=$o(%data(x)) q:x=""  s r=$g(%data(x)),n=$p(r,"\",1)+0 s datax(n,x)=""
 s n="" f  s n=$o(datax(n)) q:n=""  s x="" f  s x=$o(datax(n,x)) q:x=""  k datax(n,x) i '$d(pkeyx(x)) s item=%z("dsv")_alias_"."_x_%z("dsv"),snum=$$addsel(qnum,item)
 q
 ;
select4(dbid,qnum,itemno,item,error) ; aggregates
 n %defk,%defd,%defm,ok,key,fun,mfun,newx,alias,tname,cname
 s fun=$p(item,"(",1),item=$p(item,"(",2,999),item=$e(item,1,$l(item)-1)
 s mfun=$$sqlfun(fun) i mfun'="" d select5(qnum,mfun_"("_item_")",.error) q
 i fun="count",$p(item," ",1)="distinct" s fun="cntd",item=$p(item," ",2,999)
 i $p(item," ",1)="notnull" s fun=fun_"_"_"notnull",item=$p(item," ",2,999)
 i "count,cntd,sum,avg,max,min"'[$p(fun,"_",1) s error="invalid aggregate '"_fun_"'",error(5)="HY000" q
 i item?.1"-".n.1"."1n.n!($e(item)=$c(34)) s error="you may not select the '"_fun_"' of '"_item_"'",error(5)="HY000" q
 i item="*" d  g select41
 . i fun'="count" s error="you may not 'select' the '"_fun_"' of '*'",error(5)="HY000" q
 . i $d(^mgtmp($j,"sqag",qnum,item_qnum,fun)) s error="duplication of aggregate in 'select' line",error(5)="HY000" q
 . s key=item_qnum,newx=fun_"("_item_qnum_")"
 . q
 d table(dbid,qnum,item,.alias,.tname,.cname,0,.error) i $l(error) q
 s ok=0,%defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname),%defm=$$remap(alias,cname) s ok=%defk!%defd!%defm
 i 'ok s error="'select' item '"_cname_"' is not a column of table '"_tname_"'",error(5)="42S22" q
 s key=alias_"."_cname,newx=fun_"("_alias_"."_cname s newx=newx_")"
select41 i error'="" q
 s item=%z("dsv")_newx_%z("dsv"),snum=$$addsel(qnum,item),^mgtmp($j,"sqag",qnum,key,fun)=snum
 q
 ;
select5(qnum,mfun,error) ; undeclared expression
 n pn,i,fn,ax,outv,ex,word,zcode,fun,item,snum
 s ax=$g(^mgtmp($j,"e"))+1,^("e")=ax
 s outv="___v"_ax
 s ex(1)=mfun d ex^%mgsqle(outv,.ex,.word,.zcode,.fun,.error) i $l(error) q
 f fn=1:1 q:'$d(fun(fn))  f pn=1:1 q:'$d(fun(fn,"p",pn))  s item=$g(fun(fn,"p",pn,1)) i item[%z("dsv") s snum=$$addselx(qnum,item)
 f i=1:1 q:'$d(zcode(i))  f  q:zcode(i)'[%z("df")  d
 . s fn=$p(zcode(i),%z("df"),2)
 . s zcode(i)=$p(zcode(i),%z("df"),1)_fun(fn,"s")_$p(zcode(i),%z("df"),3,999)
 . q
 m ^mgtmp($j,"e",outv)=zcode
 s item=%z("dsv")_outv_%z("dsv"),snum=$$addsel(qnum,item)
 q
 ;
union(qnum,error) ; check line for union compatibility
 n i,item1,item2,outsel,snum
 s outsel=$g(^mgtmp($j,"outsel",1))
 s snum=$g(^mgtmp($j,"sel",qnum))
 i snum'=outsel s error="each participating 'select' in a 'union' must have the same number of selected items",error(5)="HY000" q
 f i=1:1:outsel s item1=$p(^mgtmp($j,"sel",1,i),%z("dsv"),2),item2=$p(^mgtmp($j,"sel",qnum,i),%z("dsv"),2) d union1(item1,item2,.error)
 q
 ;
union1(item1,item2,error) ; for each item
 n a1,a2
 s (a1,a2)=""
 i item1["(" s a1=$p(item1,"(",1)
 i item2["(" s a2=$p(item2,"(",1)
 i item1'="",a1'=a2 s error="'union': 'select' item '"_item2_"' should be a '"_a1_"' aggregate",error(5)="HY000" q
 i item2'="",a1'=a2 s error="'union': 'select' aggregate '"_item2_"' is not compatible with the first query",error(5)="HY000" q
 q
 ;
sqlfun(sqlfun) ; translate SQL function name to M equivalent
 s mfun=""
 i sqlfun="lower" s mfun="$$lcase^%mgsqls"
 i sqlfun="upper" s mfun="$$ucase^%mgsqls"
 i sqlfun="trim" s mfun="$$trim^%mgsqls"
 i sqlfun="rtrim" s mfun="$$rtrim^%mgsqls"
 i sqlfun="ltrim" s mfun="$$ltrim^%mgsqls"
 q mfun
 ;

%mgsqlv3
%mgsqlv3 ;(CM) sql - validate query part 4 ; 28 Jan 2022  10:03 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv3") q
 ;
update ; validate 'update' query
 n ln
 s upd=sql(0,1),set=sql(0,2),ats=""
 s tname=$p(upd," ",2),alias=$p(upd," ",3) i tname="" s error="no table supplied in 'update' statement",error(5)="HY000" g updatex
 s updidx="" i alias?.e1":"1n.n s updidx=":"_$p(alias,":",2),alias=$p(alias,":",1)
 i '$l(alias) s alias=tname
 i $l(alias),alias'?1a.e s error="invalid alias '"_alias_"'",error(5)="HY000" g updatex
 s %d=$$tab^%mgsqld(dbid,tname) i %d="" s error="no such table '"_tname_"'",error(5)="42S02" g updatex
 s incwhr=0
 s scmnd=$p(set," ",1),set=$p(set," ",2,999)
 i scmnd="columns" d at i $p(sql(0,1)," ",1)="insert" q
 i scmnd="set" d set i $l(error) g updatex
 s (x,sel,com)="" k y
 f i=0:0 s x=$o(^mgtmp($j,"upd","set",x)) q:x=""  s sel=sel_com_x,com=",",y(x)="",y="" f i=0:0 s y=$o(^mgtmp($j,"upd","set",x,"i",y)) q:y=""  i '$d(y(y)) s sel=sel_com_y,y(y)=""
 k y
 s sql(1,1)="select "_sel,sql(1,2)="from "_tname i $l(alias) s sql(1,2)=sql(1,2)_" "_alias_updidx
 i '$l(ats) d update1 k wrd,wrdx i ins q
 s ^mgtmp($j,"upd","update")=tname,^mgtmp($j,"upd","set")=set i $l(alias) s ^mgtmp($j,"upd","update")=^mgtmp($j,"upd","update")_" "_alias
updatex i $l(error),'$d(error(0)) s error(0)="update",error(1)=0
 k upd,set
 q
 ;
at ; validate 'columns' line and transform to 'insert' if neccessary
 s ats=set i ats'?1"("1a.e1")" s error="invalid 'columns' statement",error(5)="HY000" g atx
 s ats=$e(ats,2,$l(ats)-1)
 s tnamer=tname
 k pkey s ino=$$pkey^%mgsqld(dbid,tname) s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s pkey(x)=""
 f i=1:1:$l(ats,",") s xc=$p(ats,",",i) d at1 i $l(error) q
 i $l(error) g atx
 s (x,com,pkey)="" f i=0:0 s x=$o(pkey(x)) q:x=""  s pkey=pkey_com_x
 i $l(pkey) s error="key column(s) "_pkey_" not found in 'columns' statement",error(5)="HY000" g atx
 i $d(sql(1,3)) g atx
 k sql
 s qnummax=0
 s sql(0,1)="insert"
 s sql(0,2)="into "_tname_" ("
 s sql(0,3)="values ("
 s x="",com="" f i=0:0 s x=$o(^mgtmp($j,"upd","set",x)) q:x=""  s sql(0,2)=sql(0,2)_com_x,sql(0,3)=sql(0,3)_com_^mgtmp($j,"upd","set",x),com=","
 f i=2,3 s sql(0,i)=sql(0,i)_")"
atx i $l(error) s error(0)="columns",error(1)=0
 q
 ;
at1 ; validate column
 i xc="" s error="syntax error in 'columns' statement",error(5)="HY000" q
 i xc'?1a.e!($l(xc,",")>2) s error="invalid column '"_xc_"' in 'columns' statement",error(5)="HY000" q
 s cname=$p(xc,";",1)
 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error="column '"_cname_"' not found in table '"_tname_"'",error(5)="42S22" q
 i tname?@("1"""_%z("dq")_"""1n.n1"""_%z("dq")_"""") d  q:$l(error)  g at11
 . n qnum
 . ;b
 . s qnum=$p(tname,%z("dq"),2)
 . i '$d(^mgtmp($j,"vx",qnum,cname)) s error="column '"_cname_"' is found in derived table "_alias,error(5)="42S22" q
 . q
at11 k pkey(cname) s ^mgtmp($j,"upd","set",cname)=":"_xc,^mgtmp($j,"upd","set",cname,"zcode",1)=" s "_%z("dsv")_cname_"**set**"_%z("dsv")_"="_%z("dev")_xc_%z("dev"),inv(xc)=""
 q
 ;
set ; validate 'set' statement
 n arg,args
 s arg=set s arg=$$arg^%mgsqle(arg,.args)
 f i=1:1:args s x=args(i) d set1 i $l(error) q
 i $l(error) s error(0)="set",error(1)=0
 q
 ;
set1 ; validate individual 'set' in 'set' statement
 n i,outv,zcode,word
 s to=$p(x," ",3,999),outv=$p(x," ",1)
 s cname=outv i outv?1a.e1"."1a.e s cname=$p(outv,".",2) i $p(outv,".",1)'=alias s error="'set' statement: incorrect alias in '"_outv_"'",error(5)="HY000" q
 i $p(x," ",2)'="="!(cname="")!(to="") s error="invalid assignment: '"_x_"'",error(5)="HY000" q
 i tname?@("1"""_%z("dq")_"""1n.n1"""_%z("dq")_"""") d  q:$l(error)  g set11
 . n qnum
 . ;b
 . s qnum=$p(tname,%z("dq"),2)
 . i '$d(^mgtmp($j,"vx",qnum,cname)) s error="column '"_cname_"' in 'set' statement not found in derived table "_alias,error(5)="42S22" q
 . q
 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error="column '"_cname_"' in 'set' statement not found in table '"_tname_"'",error(5)="42S22" q
set11 d set2 i $l(error) q
 s ^mgtmp($j,"upd","set",cname)=to
 f i=1:1 q:'$d(zcode(i))  s ^mgtmp($j,"upd","set",cname,"zcode",i)=zcode(i)
 s x="" f i=0:0 s x=$o(word("sqv","x",x)) q:x=""  s ^mgtmp($j,"upd","set",cname,"i",x)=""
 q
 ;
set2 ; compile set assignment
 ; cm: add %z
 n (%z,dbid,qid,error,to,outv,inv,entpar,del,zcode,word)
 k zcode,word
 s outv=outv_"**set**"
 s l=1,ex(1)=to d ex^%mgsqle(outv,.ex,.word,.zcode,.fun,.error)
 q
 ;
update1 ; determine if transformation into 'insert' is necessary
 s ins=1
 i '$d(sql(1,3)) s ins=0 q
 f i=1:1:$l(set,",") s x=$p(set,",",i),cname=$p(x," ",1) s:cname?1a.e1"."1a.e cname=$p(cname,".",2) i $l(cname) s wrdx(cname)=$p(x," ",3,999),ino=$$pkey^%mgsqld(dbid,tname) s %def=$$defkdi^%mgsqld(dbid,tname,cname,ino) i %def s ins=0 q
 i 'ins q
 s ln=$p(sql(1,3)," ",2,999)
 d update2 k pkey i 'uni!'uni(0) s ins=0 q
 k sql
 s qnummax=0
 s sql(0,1)="insert"
 s sql(0,2)="into "_tname_" ("
 s sql(0,3)="values ("
 s com="",x="" f i=0:0 s x=$o(wrdx(x)) q:x=""  s sql(0,2)=sql(0,2)_com_x,sql(0,3)=sql(0,3)_com_wrdx(x),com=","
 f i=2,3 s sql(0,i)=sql(0,i)_")"
 q
 ;
update2 ; determine unique restriction for table tname (on primary key)
 n exp,eq,pkeyn
 s uni=1,uni(0)=0 i '$l(ln) s uni=0 q
 k pkey s ino=$$pkey^%mgsqld(dbid,tname),pkeyn=0 s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s pkeyn=pkeyn+1,pkey(x)=""
 s exp=ln d eq
 s x="" f i=1:1 s x=$o(eq(x)) q:x=""  s wrdx(x)=eq(x) k pkey(x)
 i pkeyn=(i-1) s uni(0)=1
 i $d(pkey) s (uni,uni(0))=0
 q
 ;
delete ; delete records
 n %om,exp,eq
 s dele=sql(0,1),frm=sql(1,2),exp=$s($d(sql(1,3)):sql(1,3),1:"")
 i $l($p(dele,"delete",2,999)) s error="the 'delete' statement does not take an argument",error(5)="HY000",error(0)="delete",error(1)=0 q
 s tname=$p(frm," ",2),alias=$p(frm," ",3) i tname="" s error="no table supplied in 'from' statement",error(5)="HY000",error(0)="from",error(1)=0 q
 i alias="" s alias=tname
 i $l(exp),exp'?1"where ".e s error="invalid 'where' statement following the 'from' statement",error(5)="HY000",error(0)="from",error(1)=0 q
 i $l(exp) s exp=$p(exp,"where ",2,999)
 i $l(alias),alias'?1a.e s error="invalid alias '"_alias_"'",error(5)="HY000",error(0)="from",error(1)=0 q
 s %d=$$tab^%mgsqld(dbid,tname) i %d="" s error="no such table '"_tname_"'",error(5)="42S02",error(0)="from",error(1)=0 q
 s incwhr=0
 i tname?1a.e s rc=$$ind^%mgsqld(dbid,tname,.%ind) s ino="" f i=0:0 s ino=$o(%ind(ino)) q:ino=""  s sc=$$key^%mgsqld(dbid,tname,ino,.%ind)
 d delete1 i $l(error) q
 i hilev k sql(1) g deletex
 s (com,sel)="",ino=$$pkey^%mgsqld(dbid,tname)
 f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s sel=sel_com_x,com=","
 i sel="" s error="no key columns found in table '"_tname_"'",error(5)="HY000",error(0)="from",error(1)=0 q
 s sql(1,1)="select "_sel
 s ^mgtmp($j,"upd","key")=sel
deletex s ^mgtmp($j,"upd","delete")=tname i $l(alias) s ^mgtmp($j,"upd","delete")=^mgtmp($j,"upd","delete")_" "_alias
 k dele,frm,whe,x,sel,tname,com
 q
 ;
delete1 ; assess possibility of doing high level kill
 s hilev=0 q  ; don't do this for now
 i '$l(exp) s hilev=1 q
 d eq i $l(error) s error="",hilev=0 q
 i 'eq q
 s hilev=1,ino="" f i=0:0 s ino=$o(%ind(ino)) q:ino=""  d delete2 i 'hilev q
 i 'hilev q
 s cname="" f i=0:0 s cname=$o(eq(cname)) q:cname=""  s ^mgtmp($j,"upd","attx",cname)=eq(cname,"c")
 q
 ;
delete2 ; each index must conform to hilev criteria
 s kno=0 f i=1:1 q:'$d(%ind(ino,i))  s cname=%ind(ino,i) i cname?1a.e q:'$d(eq(cname))  s kno=kno+1
 i kno'=eq s hilev=0 q
 q
 ;
eq ; extract contiguous equivalence table
 n word,ex
 k eq s eq=0
 s ex(1)=exp d where^%mgsqle(.ex,.word,.error) i $l(error) k eq s eq=0 q
 k eq s eq=0
 s ok=1 f wn=1:1 q:'$d(word(0,wn))  s wrd=word(0,wn) d eq1 i 'ok k eq s eq=0 q
 q
 ;
eq1 ; verify each word
 n obr,cbr,set,setc,to,alias
 i wrd="or"!(wrd="!") s ok=0 q
 i wrd[%z("df") s ok=0 q
 i wrd'[%z("dsv") q
 s wrd=$p(wrd,%z("dsv"),2),alias="" i wrd["." s alias=$p(wrd,".",1),wrd=$p(wrd,".",2)
 i '$d(word(0,wn+1))!'$d(word(0,wn+2)) s ok=0 q
 i word(0,wn+1)'="=" s ok=0 q
 s to=word(0,wn+2) i to'="(" s (set,setc)=to s:set[%z("dev") set=":"_$p(set,%z("dev"),2) g eq2
 s (obr,cbr)=0,(set,setc)="" f wn1=wn+2:1 q:'$d(word(0,wn1))  s (x,y)=word(0,wn1) s:x="(" obr=obr+1 s:x=")" cbr=cbr+1 s:x[%z("dev") x=":"_$p(x,%z("dev"),2) s set=set_x,setc=setc_y i obr=cbr q
 i set[%z("dsv") s ok=0 q
eq2 s eq(wrd)=set,eq(wrd,"c")=setc,eq(wrd,"f")=alias,eq=eq+1,wn=wn+2
 q
 ;
asn ; extract universal statement assignments
 n dead,word,ex
 k eq1 s eq1=0 ; equals + others - or
 s ex(1)=exp d where^%mgsqle(.ex,.word,.error) i $l(error) q
 f wn=1:1 q:'$d(word(0,wn))  s wrd=word(0,wn) i wrd="!" d asn1
 f wn=1:1 q:'$d(word(0,wn))  s wrd=word(0,wn) i wrd="=",'$d(dead(wn)) d asn2
 q
 ;
asn1 ; remove or + affected variables
 n strt,end,i,obr,cbr,x
 s strt=wn,(obr,cbr)=0 f i=wn-1:-1 q:'$d(word(0,i))  s x=word(0,i),strt=i s:x="(" obr=obr+1 s:x=")" cbr=cbr+1 i obr=(cbr+1) q
 s end=wn,(obr,cbr)=0 f i=wn+1:1 q:'$d(word(0,i))  s x=word(0,i),end=i s:x="(" obr=obr+1 s:x=")" cbr=cbr+1 i cbr=(obr+1) q
 f i=strt:1:end s dead(i)=""
 q
 ;
asn2 ; extract assignment
 n obr,cbr,set,setc,to,alias,wrd
 i '$d(word(0,wn-1)) q
 s wrd=word(0,wn-1) i wrd'[%z("dsv") q
 s wrd=$p(wrd,%z("dsv"),2),alias="" i wrd["." s alias=$p(wrd,".",1),wrd=$p(wrd,".",2)
 i '$d(word(0,wn+1)) q
 s to=word(0,wn+1) i to'="(" s (set,setc)=to s:set[%z("dev") set=":"_$p(set,%z("dev"),2) g asn21
 s (obr,cbr)=0,(set,setc)="" f wn1=wn+1:1 q:'$d(word(0,wn1))  s (x,y)=word(0,wn1) s:x="(" obr=obr+1 s:x=")" cbr=cbr+1 s:x[%z("dev") x=":"_$p(x,%z("dev"),2) s set=set_x,setc=setc_y i obr=cbr q
 i set[%z("dsv") q
asn21 s eq1(wrd)=set,eq1(wrd,"c")=setc,eq1(wrd,"f")=alias,eq1=eq1+1
 q
 ;

%mgsqlv4
%mgsqlv4 ;(CM) sql - validate query part 5 ; 28 Jan 2022  10:03 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv4") q
 ;
create(dbid,sql,error) ; validate 'create' statement
 n %ind,type,crt,on,ln,idx,tname,alias,i,x,com
 s crt=sql(0,1),type=$$lcase^%mgsqls($p(crt," ",2)) i type="unique" s type=$$lcase^%mgsqls($p(crt," ",3))
 i type'="index",type'="table",type'="procedure" s error="second word in 'create' statement should be 'index', 'table' or 'procedure'",error(5)="HY000" q
 i type="table" d table(dbid,.sql,.error) s error="\ddl\"_error q
 i type="index" d tindex(dbid,.sql,.error) s error="\ddl\"_error q
 i type="procedure" d proc(dbid,.sql,.error) s error="\ddl\"_error q
 s idx=$p(crt," ",3) i idx'?1n.n,idx'?1"q"1n.n s error="invalid query identity in 'create' statement",error(5)="HY000" q
 s on=$p(crt," ",4)
 s ln="" i $d(sql(0,2)) s ln=sql(0,2)
 i on'="on",$p(ln," ",1)'="on" s error="'create' must be followed by 'on' what table",error(5)="HY000" q
 i on="on",$p(ln," ",1)="on" s error="duplication in 'on' statement",error(5)="HY000" q
 i on="on" s on=$p(crt," ",4,999)
 i $p(ln," ",1)="on" s on=ln
 s (tname,alias)=$p(on," ",2) s %d=$$tab^%mgsqld(dbid,tname) i %d="" s error="invalid table in 'on' statement",error(5)="42S02" q
 s index=$p(on," ",3,999) i index'?1"("1e.e1")" s error="invalid index declaration in 'on' statement",error(5)="HY000" q
 s index=$e(index,2,$l(index)-1)
 f i=1:1:$l(index,",") s x=$p(index,",",i),^mgtmp($j,"from","i",i)=x s:$l(x) ^mgtmp($j,"from","i","x",x)="" i '$l(x) s error="unspecified item in index",error(5)="HY000"
 i $l(error) q
 s ino=$$pkey^%mgsqld(dbid,tname) s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) i x?1a.e,'$d(^mgtmp($j,"from","i","x",x)) s error="primary key column '"_x_"' is missing from index",error(5)="HY000" q
 i $l(error) q
 f i=1:1 q:'$d(^mgtmp($j,"from","i",i))  d create1 i $l(error) q
 i $l(error) q
 d index
 s sql(1,1)="select ",com="" f i=1:1 q:'$d(^mgtmp($j,"from","i",i))  s x=^mgtmp($j,"from","i",i) i x?1a.e s sql(1,1)=sql(1,1)_com_alias_"."_x,com=","
 s sql(1,2)="from "_tname_" "_alias
 s ^mgtmp($j,"create","index")=tname_" "_alias_"~"_idx
 q
 ;
create1 ; check individual items in index
 s cname=^mgtmp($j,"from","i",i)
 i cname?1n.n!(at?1""""1e.e1"""")!(wrd[%z("ds")) q
 i cname'?1a.e s error="invalid item '"_cname_"' in index",error(5)="HY000" q
 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error="column '"_cname_"' not found in table '"_tname_"'",error(5)="42S22" q
 q
 ;
table(dbid,sql,error) ; create a new table
 n crt,tname,i,item,obr,cbr,cols,chr,rc,strt,end,pre,post,opt,name,value,cn
 s crt=sql(0,1)
 s tname=$p(crt," ",3),crt=$p(crt," ",4,999)
 s (strt,end,obr,cbr)=0 f i=1:1 s chr=$e(crt,i) q:chr=""  d  i obr=cbr s end=i q
 . i chr="(" s obr=obr+1 i strt=0 s strt=i
 . i chr=")" s cbr=cbr+1
 . q
 s cols=$e(crt,strt+1,end-1)
 s pre=$e(crt,1,strt-1),post=$e(crt,end+1,9999),crt=pre_post
 s (obr,cbr)=0,item="",cn=0 f i=1:1 s chr=$e(cols,i) q:chr=""  d
 . i chr="(" s obr=obr+1
 . i chr=")" s cbr=cbr+1
 . i chr=",",obr=cbr s cn=cn+1,cols(cn)=$$trim^%mgsqls(item," "),(obr,cbr)=0,item="" q
 . s item=item_chr
 . q
 i item'="" s cn=cn+1,cols(cn)=$$trim^%mgsqls(item," ")
 s opt="" i crt["/*!" s opt=$p($p(crt,"/*!",2,999),"*/",1)
 f i=1:1:$l(opt,",") s item=$p(opt,",",i) d
 . s name=$$trim^%mgsqls($p(item,"=",1)," ")
 . s value=$$trim^%mgsqls($p(item,"=",2)," ")
 . i name'="" s tname($$lcase^%mgsqls(name))=value
 . q
 i '$d(cols(1)) s error="No columns specified" q
 s rc=$$ctable^%mgsqld(dbid,.tname,.cols)
 q
 ;
tindex(dbid,sql,error) ; create a new index for table
 n opt,i,item,name,value,part,x,rc
 s part=0 f i=1:1:$l(crt," ") s item=$p(crt," ",i) d
 . s x=$$lcase^%mgsqls(item) i item="" q
 . i x="index" s part=1 q
 . i x="on" s part=2 q
 . i part=1 s ino=item,part=0
 . i part=2 s tname=item,part=0
 . q
 s cols=$p($p(crt,"(",2),")",1)
 f i=1:1:$l(cols,",") s cols(i)=$p(cols,",",i)
 s opt="" i crt["/*!" s opt=$p($p(crt,"/*!",2,999),"*/",1)
 f i=1:1:$l(opt,",") s item=$p(opt,",",i) d
 . s name=$$trim^%mgsqls($p(item,"=",1)," ")
 . s value=$$trim^%mgsqls($p(item,"=",2)," ")
 . i name'="" s tname($$lcase^%mgsqls(name))=value
 . q
 s rc=$$cindex^%mgsqld(dbid,.tname,ino,.cols)
 q
 ;
proc(dbid,sql,error) ; create a new procedure
 n crt,pname,i,item,obr,cbr,cols,chr,rc
 s crt=sql(0,1)
 s pname=$p(crt," ",3),crt=$p(crt," ",4,999)
 s crt=$e(crt,2,$l(crt)-1)
 s item="",obr=0,cbr=0 f i=1:1 s chr=$e(crt,i) q:chr=""  d
 . i chr="(" s obr=obr+1
 . i chr=")" s cbr=cbr+1
 . i chr=",",obr=cbr s cols($i(cols))=$$trim^%mgsqls(item," "),item="",obr=0,cbr=0 q
 . s item=item_chr
 . q
 i item'="" s cols($i(cols))=$$trim^%mgsqls(item," ")
 s rc=$$cproc^%mgsqld(dbid,pname,.cols)
 q
 ;
drop(dbid,sql,error) ; drop catalogue item
 n crt,type,item
 s error=""
 s crt=sql(0,1),type=$$lcase^%mgsqls($p(crt," ",2)),item=$p(crt," ",3)
 i type'="index",type'="table",type'="procedure" s error="second word in 'drop' statement should be 'index', 'table' or 'procedure'",error(5)="HY000" q
 i type="table" s rc=$$dtable^%mgsqld(dbid,item) s error="\ddl\"_error q
 q
 ;
index ; table index idx for tname in ^mgtmp($j,"from","i",1-n)
 s id=tname k xsub,xcon d indexr^%mgsqld(dbid,tname,ino,.xsub)
 i idx'["q" s ino=$$pkey^%mgsqld(dbid,tname),%ref=$$ref^%mgsqld(dbid,tname,ino) s ref=%ref
 i idx["q" s ref="^qryinx"
 f i=1:1 q:'$d(^mgtmp($j,"from","i",i))
 i idx["q" f ii=i-1:-1:1 s ^mgtmp($j,"from","i",ii+2)=^mgtmp($j,"from","i",ii)
 i idx["q" s ^mgtmp($j,"from","i",1)=$c(34)_tname_$c(34),^mgtmp($j,"from","i",2)=$c(34)_idx_$c(34)
 k xsub(idx) s xsub(idx)=ref
 f i=1:1 q:'$d(^mgtmp($j,"from","i",i))  s xsub(idx,i)=^mgtmp($j,"from","i",i)
 d indexw^%mgsqld(dbid,tname,ino,.xsub) k xsub,xcon,scl
 q
 ;
insert ; validate 'insert' query
 s inse=sql(0,1),into=sql(0,2),valu=$s($d(sql(0,3)):sql(0,3),1:"")
 i $l($p(inse,"insert",2,999)) s error="the 'insert' statement does not have an argument",error(5)="HY000",error(0)="insert",error(1)=0 g insertx
 s tname=$p(into," ",2) i tname="" s error="no table supplied in 'into' statement",error(5)="HY000" g insertx
 s tnamer=tname
 s %d=$$tab^%mgsqld(dbid,tname) i %d="" s error="no such table '"_tname_"'",error(5)="42S02" g insertx
 s ^mgtmp($j,"upd","insert")=tname
 i $p(valu," ",1)="values" d insv i $l(error) g insertx
 i $p(valu," ",1)'="values" d inss i $l(error) g insertx
 s inta=$p(into," ",3,999) i inta'="",inta'?1"("1e.e1")" s error="invalid column declaration list in 'into' statement",error(5)="HY000" g insertx
 i tname?1"{n:"1a.e,inta="" s error="column names must be specified in the 'into' statement for named aggregates",error(5)="HY000" g insertx
 i inta'="" s inta=$e(inta,2,$l(inta)-1)
 i inta'="" f i=1:1:$l(inta,",") s cname=$p(inta,",",i) s:cname="" error=1 q:cname=""  s ^mgtmp($j,"upd","att",i)=cname,^mgtmp($j,"upd","attx",cname)="",^mgtmp($j,"upd","att")=i s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error=2 q
 i $l(error) s error=$s(error=1:"invalid column list in 'into' line",error=2:"column '"_cname_"' not found in table '"_tname_"'",1:""),error(5)="HY000" g insertx
 i $l(error) s error=$s(error=1:"invalid column list in 'into' line",error=2:"column '"_cname_"' not available from aggregates",1:""),error(5)="HY000" g insertx
 s kno=0,ino=$$pkey^%mgsqld(dbid,tname) s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s kno=kno+1,key(kno)=x
 s an=0 i tnamer?1"{n:"1a.e f i=1:1 q:'$d(key(i))  s an=an+1,data(an)=key(i) k key(i)
 s sc=$$data^%mgsqld(dbid,tname,.%data) s x="" f  s x=$o(%data(x)) q:x=""  s data(($p(%data(x),"\",2)+an))=x k %data(x)
 i $d(^mgtmp($j,"upd","att")) f i=1:1 q:'$d(key(i))  s x=key(i) i '$d(^mgtmp($j,"upd","attx",x)) s error="key column '"_x_"' not found in 'into' variable list",error(5)="HY000" q
 i $l(error) g insertx
 i $d(^mgtmp($j,"upd","att")),^mgtmp($j,"upd","att")'=^mgtmp($j,"upd","val") s error="the number of columns given is not the same as the number of values",error(5)="HY000" g insertx
 i $d(^mgtmp($j,"upd","att")) g insert1
 f i=1:1 q:'$d(^mgtmp($j,"upd","val",i))!'$d(key(i))  s ^mgtmp($j,"upd","att",i)=key(i)
 i $d(key(i)),'$d(^mgtmp($j,"upd","val",i)) s error="not enough data available to satisfy whole key to table '"_tname_"'",error(5)="HY000" g insertx
 i '$d(^mgtmp($j,"upd","val",i)) g insert1
 s i=i-1
 f ii=1:1 q:'$d(^mgtmp($j,"upd","val",i+ii))!'$d(data(ii))  s ^mgtmp($j,"upd","att",i+ii)=data(ii)
 i tname'?1"{n:"1a.e,$d(^mgtmp($j,"upd","val",i+ii)),'$d(data(ii)) s error="too much data data available for table '"_tname_"'",error(5)="HY000" g insertx
insert1 s tname=^mgtmp($j,"upd","insert")
 s incwhr=0
 s ^mgtmp($j,"upd","insert")=tname
insertx i $l(error),'$d(error(0)) s error(0)="into",error(1)=0
 q
 ;
insv ; validate 'values' line
 s val=$p(valu," ",2,999)
 i val'?1"("1e.e1")" s error="invalid declaration of values in the 'values' statement",error(5)="HY000" g insvx
 s val=$e(val,2,$l(val)-1)
 s pn=0,an=0
insv1 s pn=pn+1 i pn>$l(val,",") q
 s wrd=$p(val,",",pn)
 f  q:($l(wrd,"""")#2)  s pn=pn+1,wrd=wrd_$p(val,",",pn)
 s an=an+1
 i wrd?.1"-".n.1"."1n.n g insv2
 i wrd?1"""".e1""""!(wrd?@("1"""_%z("ds")_""".e1"""_%z("ds")_"""")) g insv2
 i wrd?1"'".e1"'" s wrd=$tr(wrd,"'","""") g insv2
 i wrd?1"{".e1"}" s wrd=$$trx^%mgsqlv(wrd) g insv2
 i wrd?1":"1a.e s inv($p(wrd,":",2))="",wrd=%z("dev")_$p(wrd,":",2)_%z("dev") g insv2
 s error="invalid item '"_wrd_"' in 'values' statement",error(5)="HY000" g insvx
insv2 s ^mgtmp($j,"upd","val",an)=wrd,^mgtmp($j,"upd","val")=an
 g insv1
insvx i $l(error) s error(0)="values",error(1)=0
 q
 ;
inss ; validate 'select' line (after 'into')
 s valu="" i $d(sql(1,1)) s valu=sql(1,1)
 i '$l(valu) s error="missing 'values' or query component to 'insert' query",error(5)="HY000" q
 s val=$p(valu," ",2,999)
 i val="*" d inssa g inssx
 s pn=0,an=0
inss1 s pn=pn+1 i pn>$l(val,",") g inssx
 s wrd=$p(val,",",pn)
 i wrd?1"distinct "1a.e s wrd=$p(wrd,"distinct ",2,999)
 s an=an+1
 i wrd?.1"."1a.e g inss2
 i wrd?1":"1a.e s wrd=%z("dev")_$p(wrd,":",2)_%z("dev") g inss2
 i wrd?.1"-".n.1"."1n.n g inss2
 i wrd?1"""".e1""""!(wrd[%z("ds")) g inss2
 s error="invalid item '"_wrd_"' in 'select' statement",error(5)="HY000" g inssx
inss2 s ^mgtmp($j,"upd","val",an)=wrd,^mgtmp($j,"upd","val")=an
 g inss1
inssx i $l(error),'$d(error(0)) s error(0)="select",error(1)=1
 q
 ;
inssa ; select all items from table
 n alias1,tname
 i '$d(sql(1,2)) s error="a 'from' statement should follow the 'select *' statement",error(5)="HY000" q
 s (alias1,tname)=$p(sql(1,2),"from ",2,999)
 i alias1[" " s tname=$p(alias1," ",1),alias1=$p(alias1," ",2)
 i '$l(alias1) s error="invalid 'from' statement",error(5)="HY000",error(0)="from",error(1)=1 q
 s ino=$$pkey^%mgsqld(dbid,tname) s sc=$$key^%mgsqld(dbid,tname,ino,.%ind) s an=0 f i=1:1 q:'$d(%ind(ino,i))  s x=%ind(ino,i) k %ind(ino,i) i x?1a.e s an=an+1,^mgtmp($j,"upd","val",an)=alias1_"."_x,^mgtmp($j,"upd","val")=an
 s sc=$$data^%mgsqld(dbid,tname,.%data) s x="" f i=1:1 s x=$o(%data(x)) q:x=""  s y=$p(%data(x),"\",2),^mgtmp($j,"upd","val",y+an)=alias1_"."_x,^mgtmp($j,"upd","val")=i+an k %data(x)
 q
 ;

%mgsqlv5
%mgsqlv5 ;(CM) sql - validate query - part 6 ; 28 Jan 2022  10:03 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv5") q
 ;
from(dbid,sql,qnum,arg,error) ; validate 'from' statement
 n tnum,nord,xord,i,x,tname,alias,args,index,on
 s ^mgtmp($j,"from","i","x",qnum)=0
 s arg=$$arg^%mgsqle(arg,.args)
 s tnum=0 f i=1:1:args s tname=args(i) i tname'="" d from1(dbid,qnum,.tnum,tname) i $l(error) q
 i '$l(error) s ^mgtmp($j,"from",qnum)=arg
fromx i $l(error) s error(0)="from",error(1)=qnum q
 s x="" f  s x=$o(^mgtmp($j,"from","z",qnum,"jn",x)) q:x=""  d natv(dbid,qnum,x,.error) i $l(error) q
 i $l(error) q
 s x="" f  s x=$o(^mgtmp($j,"from","z",qnum,"c",0,x)) q:x=""  s ^mgtmp($j,"from","z",qnum,"c","x",$p(^mgtmp($j,"from",qnum,x),"~",2))="",^mgtmp($j,"from","z",qnum,"c","x",$p(^mgtmp($j,"from",qnum,x+1),"~",2))=""
 s xord=1 s x=$o(^mgtmp($j,"from","z",qnum,"o",0,"")) i $l(x),^mgtmp($j,"from","z",qnum,"o",0,x)="right" s xord=-1
 s nord=0
 s x="" f  s x=$o(^mgtmp($j,"from","z",qnum,"o",0,x),xord) q:x=""  d from4(x,xord,.nord)
 f nord=1:1 q:'$d(^mgtmp($j,"from","z",qnum,"ord",nord))  s x=^mgtmp($j,"from","z",qnum,"ord",nord),^mgtmp($j,"from","z",qnum,"ord",nord)=$p(^mgtmp($j,"from",qnum,x),"~",2)
fromxx ; compile 'on' predicates
 f i=1:1 q:'$d(^mgtmp($j,"from","on",qnum,i))  s on=$g(^mgtmp($j,"from","on",qnum,i)) d  i $l(error) q
 . n qnumo
 . s qnumo=qnum_"gon"_i d where^%mgsqlv1(dbid,sql,qnumo,on,.error) i $l(error) q
 . q
 q
 ;
from1(dbid,qnum,tnum,tname) ; validate each table selected from
 n %ref,i,ii,j,x,y,z,z1,zz,ino,inof,inop,exp,pn,nat,jtyp,ok,com
 f x="inner","left","right","full" s jtyp(x)=""
 s (exp,pn,obr,cbr)=0,y="",com="" f i=1:1:$l(tname," ") s x=$$trim^%mgsqls($p(tname," ",i)," ") i $l(x) d
 . i x["(" s obr=obr+1
 . i x[")" s cbr=cbr+1
 . s y=y_com_x,com=" "
 . i obr=cbr s exp=exp+1,exp(exp)=y,y="",com="",(obr,cbr)=0
 . q
 f i=1:1 q:'$d(exp(i))  i exp(i)="on" d
 . i '$d(exp(i+1)) q
 . i exp(i+1)?1"(".e q
 . s x="(",com="" f ii=i+1:1 q:'$d(exp(ii))  s y=exp(ii) i y'="" q:$d(jtyp(y))!(y="join")!(y="natural")!(y="inner")!(y="cross")  s x=x_com_y,com=" " k exp(ii)
 . s x=x_")"
 . s j=i+1,exp(j)=x
 . f ii=ii:1 q:'$d(exp(ii))  s x=exp(ii) k exp(ii) s j=j+1,exp(j)=x
 . q
from11 s pn=pn+1 i '$d(exp(pn)) q
 s tname=exp(pn),nat=0
 s alias=tname i alias["." s alias=$p(tname,".",2)
 s pn=pn+1 i '$d(exp(pn)) g from16
 s x=exp(pn)
 i x="join" g from14
 i x="natural" s nat=1 g from12
 i x="cross" g from12
 i $d(jtyp(x)) s y=x g from12a
 s alias=x
 s pn=pn+1 i '$d(exp(pn)) g from16
 s x=exp(pn)
 i x="join" g from14
 i x="natural" s nat=1 g from12
 i x="cross" g from12
 i $d(jtyp(x)) s y=x g from12a
 s alias=x
 s pn=pn+1 i '$d(exp(pn)) g from16
 s x=exp(pn)
 i x="join" g from14
 i x="natural" s nat=1 g from12
 i x="cross" g from12
 i $d(jtyp(x)) s y=x g from12a
 s error="joins should be specified as [natural] <inner|left|right|full> or join or cross join",error(5)="HY000" q
from12 ; join expression
 s pn=pn+1 i '$d(exp(pn)) s error="'from' declaration may not be terminated with '"_x_"'",error(5)="HY000" q
 s y=exp(pn)
 i x="cross",y'="join" s error="keyword 'cross' must be followed by 'join'",error(5)="HY000" q
 i x="cross",y="join" g from13
 i x="natural",y="join" g from14
from12a i '$d(jtyp(y)) s error="invalid join type '"_y_"' use inner,left, right or full",error(5)="HY000" q
 s pn=pn+1 i '$d(exp(pn)) s error="'from' declaration must not be terminated with '"_y_"'",error(5)="HY000" q
 s z=exp(pn)
 i y="inner",z'="join" s error="keyword 'inner' should be followed by 'join'",error(5)="HY000" q
 i y="inner",z="join" g from14
 i z="join" g from15
 i z'="outer" s error="keyword left|right|full should be followed by outer or join",error(5)="HY000" q
 s pn=pn+1 i '$d(exp(pn)) s error="'from' declaration cannot be terminated with '"_z_"'",error(5)="HY000" q
 s z1=exp(pn) i z1'="join" s error="keyword 'outer' must be followed by 'join'",error(5)="HY000" q
 g from15
from13 ; cartesian product
 s ^mgtmp($j,"from","z",qnum,"c",0,tnum+1)=""
 g from16
from14 ; inner join
 s ^mgtmp($j,"from","z",qnum,"i",0,tnum+1)=""
 d nat(dbid,qnum,tnum,tname,nat,.exp,.error)
 g from16
from15 ; outer join
 s n="" f  s n=$o(^mgtmp($j,"from","z",qnum,"o",0,n)) q:n=""  i ^mgtmp($j,"from","z",qnum,"o",0,n)'=y s error="express all outer joins as either 'left', 'right' or 'full'",error(5)="HY000" q
 i $l(error) q
 s ^mgtmp($j,"from","z",qnum,"o",0,tnum+1)=y
 d nat(dbid,qnum,tnum,tname,nat,.exp,.error)
from16 ; process table/alias
 s inof=""
 i tname[" " s alias=$p(tname," ",2) s:'$l(alias) error="invalid component '"_tname_"' in 'from' statement",error(5)="HY000" q:$l(error)  s tname=$p(tname," ",1)
 i tname["." s dbid=$p(tname,".",1),tname=$p(tname,".",2)
 i tname[":" s inof=$p(tname,":",2),tname=$p(tname,":",1)
 i '$l(dbid) s error="invalid 'from' statement",error(5)="HY000" q
 i '$l(tname) s error="invalid 'from' statement",error(5)="HY000" q
 s (ino,inop)=$$pkey^%mgsqld(dbid,tname)
 i alias[":" s inof=$$from3(qnum,.alias)
 i inof'="" s:inof="0" inof=inop s ino=inof
 s ok=$$fromv(dbid,tname,.error) i $l(error) q
 f ii=1:1 q:'$d(^mgtmp($j,"from","x",ii))  i $d(^mgtmp($j,"from","x",ii,alias)) s error="query contains duplication of table/alias '"_alias_"'",error(5)="HY000" q
 i $l(error) q
 s %ref=$$ref^%mgsqld(dbid,tname,ino) i %ref="" s error="invalid index name '"_ino_"' for table '"_tname_"'",error(5)="HY000" q
 s tnum=tnum+1,^mgtmp($j,"from",qnum,tnum)=tname_"~"_alias,^mgtmp($j,"from","x",qnum,tname)=tnum,^mgtmp($j,"from","x",qnum,alias)=tnum
 s ^mgtmp($j,"from","i",0,alias)=ino i inof'="" s ^mgtmp($j,"from","i","f",$s(alias'="":alias,1:tname))=inof
 g from11
 ;
from3(qnum,alias) ; index specification
 n x,ino
 s x=$p(alias,":",2,999),alias=$p(alias,":",1)
 s ino=x,ino=$p(x,"(",1),^mgtmp($j,"from","i","x",qnum)=1
 q ino
 ;
from4(fnum,xord,nord) ; outer join mandatory running order
 n fnum1,fnum2
 i xord=1 s fnum1=fnum,fnum2=fnum+1
 i xord=-1 s fnum1=fnum+1,fnum2=fnum
 s ^mgtmp($j,"from","z",qnum,"pass",$p(^mgtmp($j,"from",qnum,fnum2),"~",2))=""
 i '$d(^mgtmp($j,"from","z",qnum,"ordx",fnum1)) s nord=nord+1,^mgtmp($j,"from","z",qnum,"ord",nord)=fnum1,^mgtmp($j,"from","z",qnum,"ordx",fnum1)=""
 i '$d(^mgtmp($j,"from","z",qnum,"ordx",fnum2)) s nord=nord+1,^mgtmp($j,"from","z",qnum,"ord",nord)=fnum2,^mgtmp($j,"from","z",qnum,"ordx",fnum2)=""
 q
 ;
fromv(dbid,tname,error) ; validate table
 n %d
 s %d=$$tab^%mgsqld(dbid,tname) i %d="" s error="no such table '"_tname_"'",error(5)="42S02" q 0
 q 1
 ;
nat(dbid,qnum,tnum,tname,nat,exp,error) ; extract join parameters
 n i,ii,x,cname,alias,on,onexp
 i nat q  ; data dictionary
 s on=""
 f i=pn+1:1 q:'$d(exp(i))  s x=exp(i) i x="using"!(x="on") s on=x q
 i on="" s error="if a join is not natural then qualify it with either an 'on' or 'using' statement",error(5)="HY000" q
 i '$d(exp(i+1)) s error="missing parameter(s) for 'on'/'using' statement",error(5)="HY000" q
 i on="on" g naton
 s x=exp(i+1)
 i x'?1"("1e.e1")" s error="syntax error in parameters to 'using' statement",error(5)="HY000" q
 s x=$p($p(x,"(",2),")",1)
 f ii=1:1:$l(x,",") s cname=$$trim^%mgsqls($p(x,",",ii)," ") i $l(cname) s ^mgtmp($j,"from","z",qnum,"jn",tnum+1,cname)=""
 i '$d(^mgtmp($j,"from","z",qnum,"jn",tnum+1)) s error="no valid parameters for 'using' statement found",error(5)="HY000" q
 k exp(i),exp(i+1) f i=i+2:1 q:'$d(exp(i))  s exp(i-2)=exp(i) k exp(i)
 q
naton ; 'on' statement
 s x=exp(i+1)
 i x?1"("1e.e1")" s x=$p($p(x,"(",2),")",1)
 ; cmtxxx
 d where^%mgsqle(x,.onexp,.error) i error'="" q
 s ^mgtmp($j,"from","on",qnum,$i(^mgtmp($j,"from","on",qnum)))=x
 ; cmtxxx
 ;f ii=1:1:$l(x," ") s cname=$$trim^%mgsqls($p(x," ",ii)," "),alias=$p(cname,".",1),cname=$p(cname,".",2) i cname'="",alias'="" s ^mgtmp($j,"from","z",qnum,"join",cname,alias)=""
 s ii="" f  s ii=$o(onexp("sqv",0,"x",ii)) q:ii=""  s alias=$p(ii,".",1),cname=$p(ii,".",2) i cname'="",alias'="" s ^mgtmp($j,"from","z",qnum,"join",cname,alias)=""
 k exp(i),exp(i+1) f i=i+2:1 q:'$d(exp(i))  s exp(i-2)=exp(i) k exp(i)
 q
 ;
natv(dbid,qnum,tnum,error) ; validate element in using statement
 n tname,tname1,tname2,alias,alias1,alias2,cname
 s tname1=$p(^mgtmp($j,"from",qnum,tnum),"~",1),alias1=$p(^mgtmp($j,"from",qnum,tnum),"~",2)
 s tname2=$p(^mgtmp($j,"from",qnum,tnum+1),"~",1),alias2=$p(^mgtmp($j,"from",qnum,tnum+1),"~",2)
 s cname="" f  s cname=$o(^mgtmp($j,"from","z",qnum,"jn",tnum,cname)) q:cname=""  d natv1(dbid,qnum,tname1,tname2,cname,.error) i $l(error) q
 i $l(error) q
 s ^mgtmp($j,"from","z",qnum,"c","x",alias1)="",^mgtmp($j,"from","z",qnum,"c","x",alias2)=""
 k ^mgtmp($j,"from","z",qnum,"jn",tnum)
 q
 ;
natv1(dbid,qnum,tname1,tname2,cname,error) ; column in tables test
 n %defk,%defd
 f tname=tname1,tname2 s %defk=$$defk^%mgsqld(dbid,tname,cname),%defd=$$defd^%mgsqld(dbid,tname,cname) i '%defk,'%defd s error="'using' statement: column '"_cname_"' not found in table '"_tname_"'",error(5)="42S22" q
 i $l(error) q
 s ^mgtmp($j,"from","z",qnum,"join",cname,alias1)="",^mgtmp($j,"from","z",qnum,"join",cname,alias2)=""
 q
 ;

%mgsqlv6
%mgsqlv6 ;(CM) sql - set expansion ; 28 Jan 2022  10:03 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlv6") q
 ;
link(dbid,sql,qnum,arg,error) ; expand where statement
 q
 ;

%mgsqlw
%mgsqlw ;(CM) MGSQL HTTP ; 28 Jan 2022  10:04 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlw") q
 ;
main ; start
 n %zi,%zo,dbid,head,ok,cgi,data,nvp,error
 s $zt="loope^%mgsqlw" ; new $ztrap set $ztrap="zgoto "_$zlevel_":loope^%mgsqlw"
 k ^mgtmp($j)
 s dbid=$$init(.%zi)
 s head=buf
loop ; next command
 s $zt="loope^%mgsqlw" ; new $ztrap set $ztrap="zgoto "_$zlevel_":loope^%mgsqlw"
 s ok=$$read(.head,.cgi,.data)
 s ok=$$nvp($g(cgi("QUERY_STRING")),.nvp)
 i $g(cgi("CONTENT_TYPE"))="application/x-www-form-urlencoded" s ok=$$nvp($g(data),.nvp)
 i '$d(nvp("UCI")) s nvp("UCI")="USER"
 i $g(nvp("UCI"))'="" s ok=$$cuci^%mgsqls($g(nvp("UCI")))
 i $g(cgi("SCRIPT_NAME"))[".ico" d notfound g loop1
 i $d(nvp("SQL")) d sql(dbid,.%zi,$g(nvp("SQL"))) g loop1
 i $d(nvp("sql")) d sql(dbid,.%zi,$g(nvp("sql"))) g loop1
 i $d(nvp("QUERY")) d sql(dbid,.%zi,$g(nvp("QUERY"))) g loop1
 i $d(nvp("query")) d sql(dbid,.%zi,$g(nvp("query"))) g loop1
 i $g(cgi("CONTENT_TYPE"))["/sql" d sql(dbid,.%zi,data) g loop1
 d sqlform
loop1 ; request satisfied
 c $I
 h
loope ; error
 s error=$$error^%mgsqls(),error(5)="HY000"
 d servererror(error)
 d logerror^%mgsqls($$error^%mgsqls(),"M Exception")
 h
 ;
init(%zi) ; essential constants
 n dbid
 s dbid="mgsql"
 s %zi("df")=$c(1)
 s %zi("base")=10
 q dbid
 ;
read(head,cgi,data) ; read request
 n x,i,line,len,clen,pathinfo
 k cgi
 s data=""
 f  r *x s head=head_$c(x) q:head[$c(13,10,13,10)
 s head=$$rreplace^%mgsqls(head,"  "," ")
 s line=$p(head,$c(13,10),1)
 s cgi("REQUEST_METHOD")=$p(line," ",1)
 s cgi("SCRIPT_NAME")=$p($p(line," ",2),"?",1)
 s cgi("PATH_INFO")=$p(cgi("SCRIPT_NAME"),".sql",2,9999)
 s cgi("SCRIPT_NAME")=$p(cgi("SCRIPT_NAME"),".sql",1)_".sql"
 i line["?" s cgi("QUERY_STRING")=$p($p(line," ",2),"?",2,9999)
 s cgi("SERVER_PROTOCOL")=$p(line," ",3)
 f i=2:1 s line=$p(head,$c(13,10),i) q:line=""  d
 . s name=$tr($$ucase^%mgsqls($$rtrim^%mgsqls($p(line,":",1)," ")),"-","_")
 . i name="CONTENT_LENGTH"!(name="CONTENT_TYPE") s cgi(name)=$$ltrim^%mgsqls($p(line,":",2,999)," ") q
 . s cgi("HTTP_"_name)=$$ltrim^%mgsqls($p(line,":",2,999)," ")
 . q
 s clen=+$g(cgi("CONTENT_LENGTH")) i clen=0 q 1
 s data="",len=0 f  r x#(clen-len) s data=data_x,len=len+$l(x) i len=clen q
 q 1
reade ; Error
 q 0
 ;
nvp(qs,nvp) ; get name/value pairs for url-encoded content
 n i,p,name,value
 i qs="" q 1
 f i=1:1:$l(qs,"&") s p=$p(qs,"&",i) d
 . s name=$p(p,"=",1),value=$p(p,"=",2)
 . i name="" q
 . s nvp($$urldecode^%mgsqls(name))=$$urldecode^%mgsqls(value)
 . q
 q 1
nvpe ; Error
 q 0
 ;
sql(dbid,%zi,sql) ; run query
 n %zo,cols,stmt,error,line,info,rou,qid,i,r,cname,tname,dtyp,ag,ok,rc
 s dbid=$$schema^%mgsql("")
 s stmt=0
 s sql=$tr(sql,$c(13,10),"")
 s error=""
 s line(1)=sql
 s %zi(0,"stmt")=0
 s rou=$$main^%mgsqlx(dbid,.line,.info,.error)
 i rou="" s error="Invalid Query",error(5)="HY000"
 i error'="" g sql1
 s qid=$g(info("qid"))
 f i=1:1 q:'$d(^mgsqlx(1,dbid,qid,"out",i))  d
 . s r=$g(^(i))
 . s cname=$p(r,"~",1)
 . s tname=$p(r,"~",2)
 . s dtyp=$p(r,"~",8)
 . i cname["(" d  q
 . . s ag=$p(cname,"("),cname=$p($p(cname,"(",2,999),")",1)
 . . i cname["." s cname=$p(cname,".",2)
 . . s ag=$$trim^%mgsqln(ag," ")
 . . s cname=$$trim^%mgsqln(cname," ")
 . . i cname="" s cname="col_"_i
 . . s cname=ag_"-"_cname
 . . s cname=$tr(cname,":","")
 . . q
 . i cname["." s cname=$p(cname,".",2)
 . i cname="" s cname="xxx"
 . s cols(i)=cname
 . q
 i $d(info("sp")) d  g sql1
 . s ok=-1
 . s %zo("routine")=rou
 . s %zi(0,"stmt")=stmt
 . s rc=$$so^%mgsqlz()
 . s @("ok=$$"_rou_"(.%zi,.%zo)")
 . s rc=$$sc^%mgsqlz()
 . q
 i rou'="" s %zo("routine")=rou,@("ok=$$exec^"_rou_"(.%zi,.%zo)")
sql1 ; output result
 d json(.%zi,.%zo,.cols,.error)
 q
 ;
json(%zi,%zo,cols,error) ; output results as JSON document
 n %z,head,out,ecom,rn,cn,name,value,com
 d gvars^%mgsqlx(.%z)
 s head="HTTP/1.1 200 OK"_$c(13,10)
 ;s head=head_"Content-Type: text/plain"_$c(13,10)
 ;s head=head_"Content-Type: text/x-json"_$c(13,10)
 s head=head_"Content-Type: application/json"_$c(13,10)
 s head=head_"Connection: close"_$c(13,10)
 s head=head_$c(13,10)
 w head d flush^%mgsqls()
 i $g(error)'="" s out="{""sqlcode"": "_"-1"_", ""sqlstate"": """_$s($d(error(5)):error(5),1:"HY000")_""", ""error"": """_error_"""}" g json1
 s out="{""sqlcode"": "_"0"_", ""sqlstate"": """_"00000"_""", ""error"": "_""""""
 s out=out_", ""result"": [",ecom=""
 f rn=1:1 q:'$d(^mgsqls($j,%zi(0,"stmt"),0,rn))  d
 . s out=out_ecom_"{",com="",ecom=","
 . f cn=1:1 q:'$d(^mgsqls($j,%zi(0,"stmt"),0,rn,cn))  d
 .. s name=$g(cols(cn))
 .. i name[%z("dsv") s name=$p(name,%z("dsv"),2)
 .. s name=$tr(name,".","_")
 .. s value=$g(^mgsqls($j,%zi(0,"stmt"),0,rn,cn))
 .. s out=out_com_""""_name_""""_": """_value_"""",com=","
 .. q
 . s out=out_"}"
 . q
 s out=out_"]"
 s out=out_"}"
json1 ; response complete
 w out d flush^%mgsqls()
 q
 ;
sqlform ; output a simple form
 n head,out
 s head="HTTP/1.1 200 OK"_$c(13,10)
 s head=head_"Content-Type: text/html"_$c(13,10)
 s head=head_"Connection: close"_$c(13,10)
 s head=head_$c(13,10)
 w head d flush^%mgsqls()
 s out="<html>"_$c(13,10)
 s out=out_"<head><title>SQL Test Form</title></head>"_$c(13,10)
 s out=out_"<body>"_$c(13,10)
 s out=out_"<form method=POST>"_$c(13,10)
 s out=out_"<h2>SQL Test Form</h2>"_$c(13,10)
 s out=out_"<p></p>"_$c(13,10)
 s out=out_"<textarea name=SQL rows=20 cols=140></textarea>"_$c(13,10)
 s out=out_"<p></p>"_$c(13,10)
 s out=out_"<input type=SUBMIT value='Execute SQL'>"_$c(13,10)
 s out=out_"</form>"_$c(13,10)
 s out=out_"</body>"_$c(13,10)
 s out=out_"</html>"_$c(13,10)
 w out d flush^%mgsqls()
 q
 ;
notfound ; HTTP not found
 n head
 s head="HTTP/1.1 404 Not Found"_$c(13,10)
 s head=head_"Connection: close"_$c(13,10)
 s head=head_$c(13,10)
 w head d flush^%mgsqls()
 q
 ;
servererror(error) ; HTTP internal server error
 n head
 s head="HTTP/1.1 500 Internal Server Error"_$c(13,10)
 s head=head_"Connection: close"_$c(13,10)
 s head=head_$c(13,10)
 w head,error
 d flush^%mgsqls()
 q
 ;
test ; test harness
 k
 ;s sql="select * from patient a"
 s sql="call patient_getdata"
 d sql(sql)
 q
 ;

%mgsqlx
%mgsqlx ;(CM) sql - MGSQL as a server ; 28 Jan 2022  10:04 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlx") q
 ;
main(dbid,line,info,error) ; compile query
 n (%z,dbid,line,info,error)
 s $zt="maine^%mgsqlx" ; new $ztrap set $ztrap="zgoto "_$zlevel_":maine^%mgsqlx"
 s rou="",error=""
 d gvars(.%z)
 s ddl=$$verify(dbid,.line,.sql,.error) i ddl=1 g exit
 m info("tp")=sql("txp")
 i $d(info("tp")),'$d(sql(0,1)) g exit
 s qid=$$hash(dbid,.rou,.line)
 d gcvars(dbid,qid,.%zq)
 s info("qid")=qid
 i ddl=2 s info("sp")=rou g main1
 ; Force recompilation if instructed to
 i $g(info(0,"recompile"))=1 k ^mgsqlx(1,dbid,qid,"m")
 ; Don't recompile if already compiled
 i $d(^mgsqlx(1,dbid,qid,"m")) g exit
 d comp(dbid,qid,rou,.sql,.line,.error)
main1 d save
 g exit
maine ; error
 s error="System Exception: "_$$error^%mgsqls(),error(5)="HY000"
exit ; exit
 q rou
 ;
n36(n10) ; generate 3 character base-36 node number 000 -> zzz
 n alpha,char,n36,rem
 s alpha="0123456789abcdefghijklmnopqrstuvwxyz"
 s n36="" f char=1:1:3 s rem=n10#36,n10=n10\36,n36=$e(alpha,rem+1)_n36
 q n36
 ;
hash(dbid,sqrou,line) ; apply hashing algorithm to query
 n lin,ln,chng,n10,n36,i,mxi,hash
 s sqrou=""
 s ln=0 f i=1:1 q:'$d(line(i))  s lin=line(i),ln=ln+1,lin(ln)=lin
 s mxi=i-1
 s hash="" f i=1:1:3 s n10=$s($d(lin(i)):$l(lin(i)),1:0) s n36=$$n36(n10) s hash=hash_$e(n36,2,3)
 s n10=mxi,n36=$$n36(n10),hash=hash_$e(n36,2,3)
 ; try and find existing query
 s chng=1,qid="" f  s qid=$o(^mgsqlx(2,dbid,hash,qid)) q:qid=""  i '$$hash1(dbid,qid,.line) q
 i '$l(qid) s qid=$$prfx()
 s sqrou="x"_qid_1 i $d(^mgtmp($j,"sp")) s sqrou=$g(^mgtmp($j,"sp")),^mgsqlx(1,dbid,qid,"sp")=sqrou
 s ^mgsqlx(1,dbid,qid,"hash")=hash,^("rou")=sqrou,^mgsqlx(2,dbid,hash,qid)=""
 f i=1:1 q:'$d(line(i))  s ^mgsqlx(1,dbid,qid,"sql",i)=line(i)
 q qid
 ;
hash1(dbid,qid,line) ; compare individual query
 n chng,i
 s chng=0
 f i=1:1 q:'$d(^mgsqlx(1,dbid,qid,"sql",i))  s:'$d(line(i)) chng=1 q:chng  i ^(i)'=line(i) s chng=1 q
 i $d(line(i)) s chng=1
 q chng
 ;
save ; allocate query id and save query
 n type,i,l,to,fr,rou
 m ^mgsqlx(1,dbid,qid,"in")=^mgtmp($j,"in")
 m ^mgsqlx(1,dbid,qid,"t")=^mgtmp($j,"sqlupd")
 f i=1:1 q:'$d(^mgtmp($j,"outsel",1,i))  s var=$g(^(i)) d
 . s tname="",cname=var
 . i var[%z("dsv") s var=$p(var,%z("dsv"),2)
 . s alias=$p(var,".",1),cname=$p(var,".",2)
 . i alias'="" s tno=$g(^mgtmp($j,"from","x",1,alias)) i tno'="" s tname=$p($g(^mgtmp($j,"from",1,tno)),"~",1)
 . s ^mgsqlx(1,dbid,qid,"out",i)=var_"~"_tname_"~"_cname_"~"_$$dtype^%mgsqld(dbid,tname,cname)
 . q
 i '$d(^mgsqlx(1,dbid,qid,"sp")) s code="^mgsqlx(1,dbid,qid,""m"",i)",mxi=$g(^mgsqlx(1,dbid,qid,"m")),rou="x"_qid_"1",ok=$$zs^%mgsqlr(rou,code,mxi)
 q
 ;
del(dbid,qid) ; delete script from file
 n hash,rou,ok
 s (hash,rou)=""
 i $d(^mgsqlx(1,dbid,qid,"hash"))#10 s hash=^("hash")
 i $d(^mgsqlx(1,dbid,qid,"rou"))#10 s rou=^("rou")
 i $l(rou) s ok=$$zr^%mgsqlr(rou)
 i $l(hash) k ^mgsqlx(1,dbid,hash,qid)
 d delcalls(dbid,qid)
 d delupd(dbid,qid)
 k ^mgsqlx(1,dbid,qid)
 q
 ;
delcalls(dbid,qid) ; delete calls index
 k ^mgsqlx(1,dbid,qid,"calls")
 q
 ;
delupd(dbid,qid) ; delete update index
 k ^mgsqlx(1,dbid,qid,"squpd")
 q
 ;
newfid ; file updated - wipe out affected code
 n (%z,dbid,tname)
 q
newfide ; error
 q
 ;
prfx() ; assign new prefix
 n n10,qid
 l ^mgsqlx(0)
 i '$d(^mgsqlx(0)) s ^(0)=0
 s n10=^(0)+1,^(0)=n10
 l
 s qid=$$n36(n10)
 q qid
 ;
verify(dbid,line,sql,error) ; verify query and execute any DDL commands
 n ddl
 s ddl=0
 d main^%mgsqlv(dbid,.line,.sql,.error)
 i $e(error,1,5)="\ddl\" s ddl=1,error=$e(error,6,999)
 i $e(error,1,4)="\sp\" s ddl=2,error=$e(error,5,999)
 q ddl
 ;
comp(dbid,qid,rou,sql,line,error) ; compile query
 n i,ok,var
 k ^mgsqlx(1,dbid,qid,"var")
 d delcalls(dbid,qid)
 d delupd(dbid,qid)
 d main^%mgsqlo(dbid,qid,.sql,.error) i $l(error) g compx
 d main^%mgsqlc i $l(error) g compx
compx ; exit compilation process
 i $l(error) s ^mgsqlx(1,dbid,qid,"error")=error d del(dbid,qid)
 q
 ;
upd() ; see if updates are allowed
 s upd=0
 q upd
 ;
acc(user,model,entity,context,error,info) ; see if access is allowed
 s error=""
 q 1
 i user="s3992\muntc" q 1
 i 'result,error="" s error="you ("_user_") may not access "_entity_" (app="_$g(info("app"))_"; ip="_$g(info("ip"))_")",error(5)="42000"
 q result
 ;
gvars(vars) ; initialize global variables
 k vars
 s vars("pv")="sq"
 s vars("pt")="sq"
 s vars("dsv")="{s}"
 s vars("dev")="{v}"
 s vars("df")="{f}"
 s vars("de")="{e}"
 s vars("dq")="{q}"
 s vars("dl")="{l}"
 s vars("ds")="{$}"
 s vars("dc")="{z}"
 s vars("db")="{b}"
 s vars("vok")=vars("dsv")_"__status"_vars("dsv")
 s vars("vdata")=vars("dsv")_"__data"_vars("dsv")
 s vars("vdatax")=vars("dsv")_"__datax"_vars("dsv")
 s vars("vrc")=vars("dsv")_"__rowcount"_vars("dsv")
 s vars("vn")=vars("dsv")_"__count"_vars("dsv")
 s vars("vnx")=vars("dsv")_"__count_d"_vars("dsv")
 s vars("vdef")=vars("dsv")_"__defined"_vars("dsv")
 s vars("vck")=vars("dsv")_"__compound_key"_vars("dsv")
 s vars("vckcrc")=vars("dsv")_"__compound_key_crc"_vars("dsv")
 s vars("vckcrcdef")=vars("dsv")_"__compound_key_crc_defined"_vars("dsv")
 s vars("ctg")="^mgtemp"
 s vars("cts")="$j"
 q
 ;
gcvars(dbid,qid,vars) ; initialize global variables
 s vars("ccode")="^mgsqlx(1,"""_dbid_""","""_qid_""",""m"""
 s vars("ccoder")="^mgsqlx(1,"""_dbid_""","""_qid_""",""mr"""
 q
 ;

%mgsqlz
%mgsqlz ;(CM) MGSQL : client-server computing ; 28 Jan 2022  10:04 AM
 ;
 ;  ----------------------------------------------------------------------------
 ;  | MGSQL                                                                    |
 ;  | Author: Chris Munt cmunt@mgateway.com, chris.e.munt@gmail.com            |
 ;  | Copyright (c) 2016-2022 M/Gateway Developments Ltd,                      |
 ;  | Surrey UK.                                                               |
 ;  | All rights reserved.                                                     |
 ;  |                                                                          |
 ;  | http://www.mgateway.com                                                  |
 ;  |                                                                          |
 ;  | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
 ;  | not use this file except in compliance with the License.                 |
 ;  | You may obtain a copy of the License at                                  |
 ;  |                                                                          |
 ;  | http://www.apache.org/licenses/LICENSE-2.0                               |
 ;  |                                                                          |
 ;  | Unless required by applicable law or agreed to in writing, software      |
 ;  | distributed under the License is distributed on an "AS IS" BASIS,        |
 ;  | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
 ;  | See the License for the specific language governing permissions and      |
 ;  | limitations under the License.                                           |
 ;  ----------------------------------------------------------------------------
 ;
a d vers^%mgsql("%mgsqlz") q
 ;
so(%zi,%zo) ; server: open
 i $g(%zi(0,"stmt"))'="" k ^mgsqls($j,%zi(0,"stmt"))
 q 0
 ;
ss(%zi,%zo,rn) ; server: row of data
 n i,stop
 i $g(%zi(0,"stmt"))'="" d  k %zo(rn) q 0
 . f i=1:1 q:'$d(%zo(rn,i))  i $g(%zo(0,i,0))="date" s %zo(rn,i)=$$ddate^%mgsqls($g(%zo(rn,i)),1)
 . m ^mgsqls($j,%zi(0,"stmt"),0,rn)=%zo(rn)
 . q
 i $g(%zi(0,"callback"))'="" d  k %zo(rn) q stop
 . f i=1:1 q:'$d(%zo(rn,i))  i $g(%zo(0,i,0))="date" s %zo(rn,i)=$$ddate^%mgsqls($g(%zo(rn,i)),1)
 . s @("stop=$$"_$g(%zi(0,"callback"))_"(.%zi,.%zo,rn)")
 . q
 w ! f i=1:1 q:'$d(%zo(rn,i))  d
 . i i>1 w ","
 . i $g(%zo(0,i,0))="date" w $$ddate^%mgsqls($g(%zo(rn,i)),1) q
 . i $g(%zo(rn,i))["," w """"_$g(%zo(rn,i))_"""" q
 . w $g(%zo(rn,i))
 . q
 k %zo(rn)
 q 0
 ;
sc(%zi,%zo) ; server: close
 i $g(%zi(0,"stmt"))'="" k ^mgsqls($j,%zi(0,"stmt"),1),^mgsqls($j,%zi(0,"stmt"),2),^mgsqls($j,%zi(0,"stmt"),3)
 q 0
 ;
tpcb(dbid,sql,%zi,%zo,info) ; transaction processing callback
 n ok,cb
 s ok=0
 s cb=$g(%zi(0,"callback")) k %zi(0,"callback")
 i $d(info("tp",0,"start")),cb="",$$isydb^%mgsqls() s %zo("error")="A callback must be defined for transactions in YottaDB" q -1
 i $d(info("tp",0,"start")) k info("tp",0,"start") tstart
 i $g(%zo("routine"))'="" s @("ok=$$exec^"_%zo("routine")_"(.%zi,.%zo)")
 i $d(info("tp",0,"commit")) k info("tp",0,"commit") i $tlevel>0 tcommit
 i $d(info("tp",0,"rollback")) k info("tp",0,"rollback") i $tlevel>0 trollback
 i cb'="" s @("ok=$$"_cb_"(.%zi,.%zo)")
 q ok
 ;



